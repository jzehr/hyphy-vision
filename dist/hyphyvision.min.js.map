{"version":3,"sources":["webpack:///hyphyvision.min.js","webpack:///./src/entry.js","webpack:///./src/datamonkey/datamonkey.js","webpack:///./src/jsx/absrel.jsx","webpack:///./src/jsx/components/absrel_summary.jsx","webpack:///./src/jsx/components/model_fits.jsx","webpack:///./src/jsx/components/tree_summary.jsx","webpack:///./src/jsx/components/tree.jsx","webpack:///./src/jsx/components/branch_table.jsx","webpack:///./src/jsx/components/prop_chart.jsx","webpack:///./~/react-dom/index.js","webpack:///./src/busted/busted.js","webpack:///./src/jsx/busted.jsx","webpack:///./src/fade/FADE.js","webpack:///./src/jsx/fade_summary.jsx","webpack:///./src/jsx/relax.jsx","webpack:///./src/jsx/components/omega_plots.jsx","webpack:///./src/jsx/slac.jsx","webpack:///./src/jsx/components/shared_summary.jsx","webpack:///./src/jsx/components/slac_sites.jsx","webpack:///./src/jsx/components/slac_summary.jsx","webpack:///./src/datamonkey/helpers.js"],"names":["webpackJsonp","0","module","exports","__webpack_require__","1","$","_interopRequireDefault","obj","__esModule","default","_bootstrap","window","JQuery","absrel","busted","fade","fade_summary","relax","slac","call","5","14","22","24","39","d3","jQuery","b64toBlob","b64","onsuccess","onerror","img","Image","onload","canvas","document","getElementById","width","height","ctx","getContext","fillStyle","fillRect","drawImage","toBlob","src","datamonkey","errorModal","msg","text","modal","export_csv_button","data","csv","format","pom","createElement","setAttribute","encodeURIComponent","className","innerHTML","append","click","remove","save_image","type","container","get_styles","doc","process_stylesheet","ss","cssRules","i","length","rule","styleSheet","selectorText","indexOf","styles","cssText","e","console","log","styleSheets","prefix","xmlns","xlink","svg","find","defsEl","insertBefore","firstChild","styleEl","appendChild","removeAttribute","hasAttributeNS","setAttributeNS","source","XMLSerializer","serializeToString","replace","doctype","getBoundingClientRect","to_download","image_string","blob","url","URL","createObjectURL","error","validate_date","this","val","next","parent","removeClass","addClass","class","insertAfter","isNaN","Date","parse","ready","tooltip","collapse","initial_padding","css","on","toggleClass","new_padding","select","transition","style","44","render_absrel","element","React","render","BSREL","_absrel_summary","_model_fits","_tree_summary","_tree","_branch_table","_","createClass","displayName","float_format","loadFromServer","self","json","props","formatBranchAnnotations","annotations","pmid","test_results","setState","getDefaultProps","edgeColorizer","svg_defs","empty","attr","scaling_exponent","omega_format","prop_format","omega_color","scale","pow","exponent","domain","range","options","clamp","createBranchGradient","node","generateGradient","grad_id","already_cumulative","current_weight","this_grad","forEach","d","prop","new_weight","omega","undefined","gradient_count","omegas","target","alpha_level","name","reference_omega_weight","distro","omega_value","omega_weight","title","html","trigger","placement","grad","color","getInitialState","tree_settings","omegaPlot","tree-options","hyphy-tree-model","hyphy-tree-highlight","hyphy-tree-branch-lengths","hyphy-tree-hide-legend","hyphy-tree-fill-color","suppress-tree-render","chart-append-html","settings","tree","componentWillMount","setEvents","files","f","reader","FileReader","theFile","JSON","result","readAsText","dropdown","preventDefault","key","initial_branch_annotations","branch_annotations","mapObject","vals","map","object","clone","extend","initialize","id","BSRELSummary","state","TreeSummary","ModelFits","Tree","BranchTable","45","render_absrel_summary","countBranchesTested","branches_tested","split","getBranchesWithEvidence","filter","p","getTestBranches","tested","getTotalBranches","keys","branches_with_evidence","test_branches","total_branches","componentWillReceiveProps","nextProps","href","203","render_model_fits","rerender_model_fits","table_row_data","getModelRows","table_columns","getModelColumns","formatRuntime","seconds","duration_string","parseFloat","split_array","Math","floor","quals","getLogLikelihood","this_model","getAIC","getNumParameters","getBranchLengths","values","reduce","c","getRuntime","getDistributions","m","omega_distributions","distributions","this_distro","this_distro_entry","weight","k","push","sort","a","b","this_model_row","concat","r","slice","model_header","logl_header","num_params_header","aic_header","runtime_header","branch_lengths_header","branch_set_header","omega_1_header","omega_2_header","omega_3_header","all_columns","column_headers","take","transpose","componentDidUpdate","model_columns","selectAll","enter","model_rows","exit","styleFormat","204","render_tree_summary","rerender_tree_summary","getSummaryRows","getTreeSummaryColumns","getRateClasses","all_branches","countBy","branch","getBranchProportion","rate_classes","sum","memo","num","getBranchLengthProportion","total_branch_length","branch_lengths","get_node_by_name","branch_length","getNumUnderSelection","num_under_selection","analysis_data","trees","layout","phylotree","tree_length","proportions","length_proportions","summary_rows","zip","omega_header","branch_num_header","branch_prop_header","branch_prop_length_header","under_selection_header","tree_summary_columns","tree_summary_rows","205","render_tree","rerender_tree","sortNodes","asc","traverse_and_compute","n","children","max","resort_children","which_model","nodes","get_nodes","attribute","assignBranchAnnotations","assign_attributes","renderDiscreteLegendColorScheme","svg_container","color_fill","margins","bottom","top","left","right","dc_legend","fg_item","bg_item","renderLegendColorScheme","attr_name","do_not_render","bar_width","bar_height","omega_scale","extent","axis_scale","g_container","draw_omega_bar","axis","orient","tickFormat","tickValues","scale_bar","_label","x_label","setHandlers","renderTree","placenodes","update","nwk","get_newick","setTreeHandlers","tree_object","which_function","spacing_x","spacing_y","is","radial","align_tips","setPartitionList","set_partitions","partition_list","setModelList","def_displayed","model_list","fit_format","p_value_format","legend_type","initializeTree","size","separation","branch_name","node_span","draw-size-bubbles","selectable","left-right-spacing","left-offset","color-fill","style_edges","style_nodes","nodeColorizer","skip_render","do_layout","controller","controller_value","property","font_size","scale_bar_font_size","node_circle_size","findKey","partition","update_layout","componentDidMount","data-toggle","data-direction","data-amount","data-mode","autoComplete","checked","data-align","disabled","207","render_branch_table","rerender_branch_table","_prop_chart","getBranchRows","getBranchColumns","initial_model_name","initial_omegas","distro_settings","dimensions","legend","do_log_plot","k_p","plot","svg_id","current_model_name","current_omegas","getBranchLength","getLRT","formatted","getPVal","getUncorrectedPVal","getOmegaDistribution","omega_string","formatted_omega","parseInt","branch_row","branch_table","label","createDistroChart","has_zeros","legend_id","name_header","length_header","lrt_header","pvalue_header","uncorrected_pvalue_header","branch_columns","branch_rows","PropChart","208","render_prop_chart","model_name","rerender_prop_chart","omeags","save_svg_id","save_png_id","data_to_plot","some","plot_width","plot_height","linear","nice","proportion_scale","reference_omega_lines","displacement_lines","createNeutralLine","createXAxis","createYAxis","createOmegaLine","colores_g","shuffle","omega_lines","rest","neutral_line","xAxis","ticks","x_axis","y_label","yAxis","y_axis","209","210","busted_render_summary","format_run_time","branch_p_values","rate_distro_by_branch","branch_count","selected_count","tested_count","for_branch_table","fitted_distributions","rateD","has_background","access_key","secondary_key","only_distro","j","busted_render_histogram","erc","model_results","elem","site_index","unconstrained","constrained","optimized_null","er_constrained","er_optimized_null","crossfilter","dimension","sitesByConstrained","group","v","constrained_evidence","optimized_null_evidence","sitesByON","composite","dc","compositeChart","x","yAxisLabel","xAxisLabel","y","itemHeight","gap","renderHorizontalGridLines","compose","lineChart","colors","ordinal","valueAccessor","value","keyAccessor","numberFormat","dataTable","groupAll","reduceCount","columns","sortBy","order","ascending","renderlet","table","classed","Infinity","erConstrainedThreshold","erOptimizedNullThreshold","renderAll","render_summary","render_histogram","211","217","219","ReactDOM","BUSTED","pmid_text","pmid_href","test_result","fg_rate","mapped_omegas","is_foreground","hyphy-tree-legend-type","constrained_threshold","null_threshold","foreground","node_names","styleName","for","defaultValue","render_busted","220","datamonkey_fade","_use_BF","interpolateRgb","rgb","fade_results","dict_to_array","dict","ar","keys_in_dict","display_column_map","row","display_column_map_bf","row_display_filter","initial_display","plot_property_graphs","set_handlers","file_id","fade_headers","found","submit","cutoff","load_analysis_results","event","display_site_properties","stopPropagation","toggle_view","hasClass","property_plot_done","site_id","job_id","site_info","property_plot","show_hide","elements","headers","header_element","property_info","site_count","margin","category10","yAxis2","make_x_axis","make_y_axis","tickSize","y2","h","vis","series","matrix","column_selector","condition","parent_element","filtered_matrix","rows","conserved","toFixed","221","render_fade_summary","msa","FadeSummary","subs","setProps","sequences","sites","model","grid_desc","partitions","partition_info","index","222","render_relax","RELAX","_omega_plots","direction","evidence","pvalue","lrt","summary_k","selected_partition","get_partitions","relaxation_K","OmegaPlotGrid","223","OmegaPlot","secondary_data","createDisplacementLine","createReferenceLine","makeSpring","x1","x2","y1","step","displacement","min","spring_data","point","angle","atan2","cos","sin","abs","pop","line","interpolate","diffs","each","item","toLowerCase","isObject","OmegaPlots","224","render_slac","SLAC","_shared_summary","_slac_sites","_slac_summary","dm_loadFromServer","request_error","dm_initializeFromJSON","error_message_text","status","statusText","error_message","analysis_results","pValue","dm_setEvents","toString","dm_adjustPvalue","role","data-dismiss","aria-label","aria-hidden","SLACBanner","pAdjuster","bind","DatamonkeyPartitionTable","branchAttributes","siteResults","MLE","accessorPositive","accessorNegative","DatamonkeyModelTable","fits","DatamonkeyTimersTable","timers","totalTime","SLACSites","mle","helpers","content","has","sample25","sampleMedian","sample975","partitionSites","225","_typeof","Symbol","iterator","constructor","prototype","DatamonkeyTableRow","dm_compareTwoValues","myType","isArray","not_compared","every","comp","dm_log100times","before","shouldComponentUpdate","header","rowData","compare","cell","isValidElement","abbr","cellProps","span","classes","DatamonkeyTable","rowHash","sortableColumns","Object","initialSort","sortedOn","headerData","bodyData","componentData","DatamonkeyRateDistributionTable","propTypes","distribution","PropTypes","isRequired","dm_formatterRate","dm_formatterProp","dm_createDistributionTable","jsonRates","rate","dm_formatterFloat","func","number","dm_computePartitionInformation","attributes","partitionKeys","matchingKey","extractBranchLength","extractOn","treeBranches","testedLength","toUpperCase","totalLength","coverage","attributedCell","textAlign","dm_makeHeaderRow","String","fromCharCode","borderBottom","borderTop","dm_numberFormatter","dm_supportedColumns","log likelihood","display_format","parameters","AIC-c","rate distributions","transform","orderOn","dm_extractFitsTable","jsonTable","columnMap","columnMapIterator","valueFormat","valueTransform","cellValue","cellName","isFunction","thisRow","fontVariant","tag","myValue","isNumber","headerRow","tableInfo","caption","dm_percentageFormatter","dm_formatSeconds","fields","join","dm_extractTimerTable","formattedRows","226","arrayOf","string","initialAmbigHandling","canDoCI","ambigOptions","dm_AmbigOptions","ambigHandling","filters","showIntervals","hasCI","dm_formatNumber","dm_formatNumberShort","dm_log10times","dm_formatInterval","theseProps","dm_changeAmbig","dm_toggleIntervals","dm_toggleVariableFilter","filterState","dm_makeFilterFunction","filterFunction","composeFunction","partitionIndex","site","siteData","wrap","doCI","secondRow","dm_makeDataRows","partitionCount","countPartitionsJSON","estimate","colIndex","aria-haspopup","aria-expanded","defaultChecked","onChange","227","dm_countSites","all","positive","negative","countSitesFromPartitionsJSON","dm_computeState","dm_formatP","marginBottom","display","marginLeft","aria-labelledby","228","datamonkey_get_styles","processStyleSheet","datamonkey_save_newick_to_file","top_modal_container","datamonkey_convert_svg_to_png","image","context","toDataURL","datamonkey_save_newick_tree","datamonkey_validate_email","email","regex","test","datamonkey_describe_vector","vector","as_list","median","Q1","quantile","Q3","mean","datamonkey_export_handler","filename","mimeType","msieversion","ua","navigator","userAgent","msie","match","IEwindow","open","write","close","execCommand","datamonkey_table_to_text","table_id","sep","header_row","data_rows","datamonkey_capitalize","s","datamonkey_count_partitions","datamonkey_sum","accessor","datamonkey_count_sites_from_partitions","datamonkey_filter_list","list","predicate","datamonkey_map_list","save_newick_to_file","convert_svg_to_png","save_newick_tree","validate_email","describe_vector","table_to_text","export_handler","capitalize"],"mappings":"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","file":"hyphyvision.min.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n\n/***/ 1:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function($) {'use strict';\n\t\n\tvar _bootstrap = __webpack_require__(5);\n\t\n\tvar _bootstrap2 = _interopRequireDefault(_bootstrap);\n\t\n\tfunction _interopRequireDefault(obj) {\n\t  return obj && obj.__esModule ? obj : { default: obj };\n\t}\n\t\n\twindow.$ = window.JQuery = $;\n\t\n\t__webpack_require__(14);\n\t__webpack_require__(22);\n\t__webpack_require__(24);\n\t\n\t__webpack_require__(26);\n\t__webpack_require__(39);\n\t\n\tvar absrel = __webpack_require__(44);\n\tvar busted = __webpack_require__(219);\n\tvar fade = __webpack_require__(220);\n\tvar fade_summary = __webpack_require__(221);\n\tvar relax = __webpack_require__(222);\n\tvar slac = __webpack_require__(224);\n\t\n\t// Create new hyphy-vision export\n\twindow.absrel = absrel;\n\twindow.busted = busted;\n\twindow.fade = fade;\n\twindow.fade_summary = fade_summary;\n\twindow.relax = relax;\n\twindow.slac = slac;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n\n/***/ 5:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n\n/***/ 14:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n\n/***/ 22:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n\n/***/ 24:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n\n/***/ 39:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function($, d3, jQuery) {'use strict';\n\t\n\tvar root = undefined;\n\tvar datamonkey = function datamonkey() {};\n\t\n\tif (true) {\n\t  if (typeof module !== 'undefined' && module.exports) {\n\t    exports = module.exports = datamonkey;\n\t  }\n\t  exports.datamonkey = datamonkey;\n\t} else {\n\t  root.datamonkey = datamonkey;\n\t}\n\t\n\tdatamonkey.errorModal = function (msg) {\n\t  $('#modal-error-msg').text(msg);\n\t  $('#errorModal').modal();\n\t};\n\t\n\tfunction b64toBlob(b64, onsuccess, onerror) {\n\t  var img = new Image();\n\t\n\t  img.onerror = onerror;\n\t\n\t  img.onload = function onload() {\n\t    var canvas = document.getElementById(\"hyphy-chart-canvas\");\n\t    canvas.width = img.width;\n\t    canvas.height = img.height;\n\t\n\t    var ctx = canvas.getContext('2d');\n\t    ctx.fillStyle = \"#FFFFFF\";\n\t    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\t    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\t\n\t    canvas.toBlob(onsuccess);\n\t  };\n\t\n\t  img.src = b64;\n\t}\n\t\n\tdatamonkey.export_csv_button = function (data) {\n\t  data = d3.csv.format(data);\n\t  if (data !== null) {\n\t    var pom = document.createElement('a');\n\t    pom.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(data));\n\t    pom.setAttribute('download', 'export.csv');\n\t    pom.className = 'btn btn-default btn-sm';\n\t    pom.innerHTML = '<span class=\"glyphicon glyphicon-floppy-save\"></span> Download CSV';\n\t    $(\"body\").append(pom);\n\t    pom.click();\n\t    pom.remove();\n\t  }\n\t};\n\t\n\tdatamonkey.save_image = function (type, container) {\n\t\n\t  var prefix = {\n\t    xmlns: \"http://www.w3.org/2000/xmlns/\",\n\t    xlink: \"http://www.w3.org/1999/xlink\",\n\t    svg: \"http://www.w3.org/2000/svg\"\n\t  };\n\t\n\t  function get_styles(doc) {\n\t\n\t    function process_stylesheet(ss) {\n\t      try {\n\t        if (ss.cssRules) {\n\t          for (var i = 0; i < ss.cssRules.length; i++) {\n\t            var rule = ss.cssRules[i];\n\t            if (rule.type === 3) {\n\t              // Import Rule\n\t              process_stylesheet(rule.styleSheet);\n\t            } else {\n\t              // hack for illustrator crashing on descendent selectors\n\t              if (rule.selectorText) {\n\t                if (rule.selectorText.indexOf(\">\") === -1) {\n\t                  styles += \"\\n\" + rule.cssText;\n\t                }\n\t              }\n\t            }\n\t          }\n\t        }\n\t      } catch (e) {\n\t        console.log('Could not process stylesheet : ' + ss);\n\t      }\n\t    }\n\t\n\t    var styles = \"\",\n\t        styleSheets = doc.styleSheets;\n\t\n\t    if (styleSheets) {\n\t      for (var i = 0; i < styleSheets.length; i++) {\n\t        process_stylesheet(styleSheets[i]);\n\t      }\n\t    }\n\t\n\t    return styles;\n\t  }\n\t\n\t  var convert_svg_to_png = function convert_svg_to_png(image_string) {\n\t\n\t    var image = document.getElementById(\"hyphy-chart-image\");\n\t\n\t    image.onload = function () {\n\t\n\t      var canvas = document.getElementById(\"hyphy-chart-canvas\");\n\t      canvas.width = image.width;\n\t      canvas.height = image.height;\n\t      var context = canvas.getContext(\"2d\");\n\t      context.fillStyle = \"#FFFFFF\";\n\t      context.fillRect(0, 0, image.width, image.height);\n\t      context.drawImage(image, 0, 0);\n\t      var img = canvas.toDataURL(\"image/png\");\n\t      var pom = document.createElement('a');\n\t      pom.setAttribute('download', 'image.png');\n\t      pom.href = canvas.toDataURL(\"image/png\");\n\t      $(\"body\").append(pom);\n\t      pom.click();\n\t      pom.remove();\n\t    };\n\t\n\t    image.src = image_string;\n\t  };\n\t\n\t  var svg = $(container).find(\"svg\")[0];\n\t  if (!svg) {\n\t    svg = $(container)[0];\n\t  }\n\t\n\t  var styles = get_styles(window.document);\n\t\n\t  svg.setAttribute(\"version\", \"1.1\");\n\t\n\t  var defsEl = document.createElement(\"defs\");\n\t  svg.insertBefore(defsEl, svg.firstChild);\n\t\n\t  var styleEl = document.createElement(\"style\");\n\t  defsEl.appendChild(styleEl);\n\t  styleEl.setAttribute(\"type\", \"text/css\");\n\t\n\t  // removing attributes so they aren't doubled up\n\t  svg.removeAttribute(\"xmlns\");\n\t  svg.removeAttribute(\"xlink\");\n\t\n\t  // These are needed for the svg\n\t  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n\t    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n\t  }\n\t\n\t  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n\t    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n\t  }\n\t\n\t  var source = new XMLSerializer().serializeToString(svg).replace('</style>', '<![CDATA[' + styles + ']]></style>');\n\t  var rect = svg.getBoundingClientRect();\n\t  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n\t  var to_download = [doctype + source];\n\t  var image_string = 'data:image/svg+xml;base66,' + encodeURIComponent(to_download);\n\t\n\t  if (type == \"png\") {\n\t    b64toBlob(image_string, function (blob) {\n\t\n\t      var url = window.URL.createObjectURL(blob);\n\t      var pom = document.createElement('a');\n\t      pom.setAttribute('download', 'image.png');\n\t      pom.setAttribute('href', url);\n\t      $(\"body\").append(pom);\n\t      pom.click();\n\t      pom.remove();\n\t    }, function (error) {\n\t      // handle error\n\t    });\n\t  } else {\n\t    var pom = document.createElement('a');\n\t    pom.setAttribute('download', 'image.svg');\n\t    pom.setAttribute('href', image_string);\n\t    $(\"body\").append(pom);\n\t    pom.click();\n\t    pom.remove();\n\t  }\n\t};\n\t\n\tdatamonkey.validate_date = function () {\n\t\n\t  // Check that it is not empty\n\t  if ($(this).val().length === 0) {\n\t    $(this).next('.help-block').remove();\n\t    $(this).parent().removeClass('has-success');\n\t    $(this).parent().addClass('has-error');\n\t\n\t    jQuery('<span/>', {\n\t      class: 'help-block',\n\t      text: 'Field is empty'\n\t    }).insertAfter($(this));\n\t  } else if (isNaN(Date.parse($(this).val()))) {\n\t    $(this).next('.help-block').remove();\n\t    $(this).parent().removeClass('has-success');\n\t    $(this).parent().addClass('has-error');\n\t\n\t    jQuery('<span/>', {\n\t      class: 'help-block',\n\t      text: 'Date format should be in the format YYYY-mm-dd'\n\t    }).insertAfter($(this));\n\t  } else {\n\t    $(this).parent().removeClass('has-error');\n\t    $(this).parent().addClass('has-success');\n\t    $(this).next('.help-block').remove();\n\t  }\n\t};\n\t\n\t$(document).ready(function () {\n\t  $(function () {\n\t    $('[data-toggle=\"tooltip\"]').tooltip();\n\t  });\n\t  $('#datamonkey-header').collapse();\n\t\n\t  var initial_padding = $(\"body\").css(\"padding-top\");\n\t\n\t  $(\"#collapse_nav_bar\").on(\"click\", function (e) {\n\t    $('#datamonkey-header').collapse('toggle');\n\t    $(this).find(\"i\").toggleClass(\"fa-times-circle fa-eye\");\n\t    var new_padding = $(\"body\").css(\"padding-top\") == initial_padding ? \"5px\" : initial_padding;\n\t    d3.select(\"body\").transition().style(\"padding-top\", new_padding);\n\t  });\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(40), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 44:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, $) {'use strict';\n\t\n\tvar _absrel_summary = __webpack_require__(45);\n\t\n\tvar _model_fits = __webpack_require__(203);\n\t\n\tvar _tree_summary = __webpack_require__(204);\n\t\n\tvar _tree = __webpack_require__(205);\n\t\n\tvar _branch_table = __webpack_require__(207);\n\t\n\tvar React = __webpack_require__(46),\n\t    ReactDOM = __webpack_require__(209);\n\t\n\tvar datamonkey = __webpack_require__(39),\n\t    _ = __webpack_require__(43),\n\t    busted = __webpack_require__(210);\n\t\n\t__webpack_require__(206);\n\t__webpack_require__(217);\n\t\n\t\n\tvar React = __webpack_require__(46);\n\t\n\tvar BSREL = React.createClass({\n\t  displayName: 'BSREL',\n\t\n\t\n\t  float_format: d3.format(\".2f\"),\n\t\n\t  loadFromServer: function loadFromServer() {\n\t\n\t    var self = this;\n\t    d3.json(this.props.url, function (data) {\n\t\n\t      data[\"fits\"][\"MG94\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"MG94\");\n\t      data[\"fits\"][\"Full model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Full model\");\n\t\n\t      // GH-#18 Add omega annotation tag\n\t      data[\"fits\"][\"MG94\"][\"annotation-tag\"] = \"ω\";\n\t      data[\"fits\"][\"Full model\"][\"annotation-tag\"] = \"ω\";\n\t\n\t      var annotations = data[\"fits\"][\"Full model\"][\"branch-annotations\"],\n\t          json = data,\n\t          pmid = data[\"PMID\"],\n\t          test_results = data[\"test results\"];\n\t\n\t      self.setState({\n\t        annotations: annotations,\n\t        json: json,\n\t        pmid: pmid,\n\t        test_results: test_results\n\t      });\n\t    });\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t\n\t    var edgeColorizer = function edgeColorizer(element, data) {\n\t\n\t      var self = this;\n\t\n\t      var svg = d3.select(\"#tree_container svg\"),\n\t          svg_defs = d3.select(\".phylotree-definitions\");\n\t\n\t      if (svg_defs.empty()) {\n\t        svg_defs = svg.append(\"defs\").attr(\"class\", \"phylotree-definitions\");\n\t      }\n\t\n\t      // clear existing linearGradients\n\t\n\t      var scaling_exponent = 1.0 / 3,\n\t          omega_format = d3.format(\".3r\"),\n\t          prop_format = d3.format(\".2p\"),\n\t          fit_format = d3.format(\".2f\"),\n\t          p_value_format = d3.format(\".4f\");\n\t\n\t      self.omega_color = d3.scale.pow().exponent(scaling_exponent).domain([0, 0.25, 1, 5, 10]).range(self.options()[\"color-fill\"] ? [\"#DDDDDD\", \"#AAAAAA\", \"#888888\", \"#444444\", \"#000000\"] : [\"#6e4fa2\", \"#3288bd\", \"#e6f598\", \"#f46d43\", \"#9e0142\"]).clamp(true);\n\t\n\t      var createBranchGradient = function createBranchGradient(node) {\n\t\n\t        function generateGradient(svg_defs, grad_id, annotations, already_cumulative) {\n\t\n\t          var current_weight = 0;\n\t          var this_grad = svg_defs.append(\"linearGradient\").attr(\"id\", grad_id);\n\t\n\t          annotations.forEach(function (d, i) {\n\t\n\t            if (d.prop) {\n\t              var new_weight = current_weight + d.prop;\n\t              this_grad.append(\"stop\").attr(\"offset\", \"\" + current_weight * 100 + \"%\").style(\"stop-color\", self.omega_color(d.omega));\n\t              this_grad.append(\"stop\").attr(\"offset\", \"\" + new_weight * 100 + \"%\").style(\"stop-color\", self.omega_color(d.omega));\n\t              current_weight = new_weight;\n\t            }\n\t          });\n\t        }\n\t\n\t        // Create svg definitions\n\t        if (self.gradient_count == undefined) {\n\t          self.gradient_count = 0;\n\t        }\n\t\n\t        if (node.annotations) {\n\t\n\t          if (node.annotations.length == 1) {\n\t            node['color'] = self.omega_color(node.annotations[0][\"omega\"]);\n\t          } else {\n\t            self.gradient_count++;\n\t            var grad_id = \"branch_gradient_\" + self.gradient_count;\n\t            generateGradient(svg_defs, grad_id, node.annotations.omegas);\n\t            node['grad'] = grad_id;\n\t          }\n\t        }\n\t      };\n\t\n\t      var annotations = data.target.annotations,\n\t          alpha_level = 0.05,\n\t          tooltip = \"<b>\" + data.target.name + \"</b>\",\n\t          reference_omega_weight = prop_format(0),\n\t          distro = '';\n\t\n\t      if (annotations) {\n\t\n\t        reference_omega_weight = annotations.omegas[0].prop;\n\t\n\t        annotations.omegas.forEach(function (d, i) {\n\t\n\t          var omega_value = d.omega > 1e20 ? \"&infin;\" : omega_format(d.omega),\n\t              omega_weight = prop_format(d.prop);\n\t\n\t          tooltip += \"<br/>&omega;<sub>\" + (i + 1) + \"</sub> = \" + omega_value + \" (\" + omega_weight + \")\";\n\t\n\t          if (i) {\n\t            distro += \"<br/>\";\n\t          }\n\t\n\t          distro += \"&omega;<sub>\" + (i + 1) + \"</sub> = \" + omega_value + \" (\" + omega_weight + \")\";\n\t        });\n\t\n\t        tooltip += \"<br/><i>p = \" + omega_format(annotations[\"p\"]) + \"</i>\";\n\t\n\t        $(element[0][0]).tooltip({\n\t          'title': tooltip,\n\t          'html': true,\n\t          'trigger': 'hover',\n\t          'container': 'body',\n\t          'placement': 'auto'\n\t        });\n\t\n\t        createBranchGradient(data.target);\n\t\n\t        if (data.target.grad) {\n\t          element.style('stroke', 'url(#' + data.target.grad + ')');\n\t        } else {\n\t          element.style('stroke', data.target.color);\n\t        }\n\t\n\t        element.style('stroke-width', annotations[\"p\"] <= alpha_level ? '12' : '5').style('stroke-linejoin', 'round').style('stroke-linecap', 'round');\n\t      }\n\t    };\n\t\n\t    return {\n\t      edgeColorizer: edgeColorizer\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t\n\t    var tree_settings = {\n\t      'omegaPlot': {},\n\t      'tree-options': {\n\t        /* value arrays have the following meaning\n\t            [0] - the value of the attribute\n\t            [1] - does the change in attribute value trigger tree re-layout?\n\t        */\n\t        'hyphy-tree-model': ['Full model', true],\n\t        'hyphy-tree-highlight': [null, false],\n\t        'hyphy-tree-branch-lengths': [true, true],\n\t        'hyphy-tree-hide-legend': [false, true],\n\t        'hyphy-tree-fill-color': [false, true]\n\t      },\n\t      'suppress-tree-render': false,\n\t      'chart-append-html': true,\n\t      'edgeColorizer': this.props.edgeColorizer\n\t    };\n\t\n\t    return {\n\t      annotations: null,\n\t      json: null,\n\t      pmid: null,\n\t      settings: tree_settings,\n\t      test_results: null,\n\t      tree: null\n\t    };\n\t  },\n\t\n\t  componentWillMount: function componentWillMount() {\n\t    this.loadFromServer();\n\t    this.setEvents();\n\t  },\n\t\n\t  setEvents: function setEvents() {\n\t\n\t    var self = this;\n\t\n\t    $(\"#datamonkey-absrel-json-file\").on(\"change\", function (e) {\n\t      var files = e.target.files; // FileList object\n\t\n\t      if (files.length == 1) {\n\t        var f = files[0];\n\t        var reader = new FileReader();\n\t\n\t        reader.onload = function (theFile) {\n\t          return function (e) {\n\t            var data = JSON.parse(this.result);\n\t            data[\"fits\"][\"MG94\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"MG94\");\n\t            data[\"fits\"][\"Full model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Full model\");\n\t\n\t            var annotations = data[\"fits\"][\"Full model\"][\"branch-annotations\"],\n\t                json = data,\n\t                pmid = data[\"PMID\"],\n\t                test_results = data[\"test results\"];\n\t\n\t            self.setState({\n\t              annotations: annotations,\n\t              json: json,\n\t              pmid: pmid,\n\t              test_results: test_results\n\t            });\n\t          };\n\t        }(f);\n\t        reader.readAsText(f);\n\t      }\n\t\n\t      $(\"#datamonkey-absrel-toggle-here\").dropdown(\"toggle\");\n\t      e.preventDefault();\n\t    });\n\t  },\n\t\n\t  formatBranchAnnotations: function formatBranchAnnotations(json, key) {\n\t\n\t    var initial_branch_annotations = json[\"fits\"][key][\"branch-annotations\"];\n\t\n\t    if (!initial_branch_annotations) {\n\t      initial_branch_annotations = json[\"fits\"][key][\"rate distributions\"];\n\t    }\n\t\n\t    // Iterate over objects\n\t    var branch_annotations = _.mapObject(initial_branch_annotations, function (val, key) {\n\t\n\t      var vals = [];\n\t      try {\n\t        vals = JSON.parse(val);\n\t      } catch (e) {\n\t        vals = val;\n\t      }\n\t\n\t      var omegas = { \"omegas\": _.map(vals, function (d) {\n\t          return _.object([\"omega\", \"prop\"], d);\n\t        }) };\n\t      var test_results = _.clone(json[\"test results\"][key]);\n\t      _.extend(test_results, omegas);\n\t      return test_results;\n\t    });\n\t\n\t    return branch_annotations;\n\t  },\n\t\n\t  initialize: function initialize() {\n\t\n\t    var model_fits_id = \"#hyphy-model-fits\",\n\t        omega_plots_id = \"#hyphy-omega-plots\",\n\t        summary_id = \"#hyphy-relax-summary\",\n\t        tree_id = \"#tree-tab\";\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    var self = this;\n\t\n\t    return React.createElement(\n\t      'div',\n\t      { className: 'tab-content' },\n\t      React.createElement(\n\t        'div',\n\t        { className: 'tab-pane active', id: 'summary-tab' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { id: 'summary-div', className: 'col-md-12' },\n\t            React.createElement(_absrel_summary.BSRELSummary, { test_results: self.state.test_results,\n\t              pmid: self.state.pmid })\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { id: 'hyphy-tree-summary', className: 'col-md-6' },\n\t            React.createElement(_tree_summary.TreeSummary, { json: self.state.json })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { id: 'hyphy-model-fits', className: 'col-md-6' },\n\t            React.createElement(_model_fits.ModelFits, { json: self.state.json })\n\t          )\n\t        )\n\t      ),\n\t      React.createElement(\n\t        'div',\n\t        { className: 'tab-pane', id: 'tree-tab' },\n\t        React.createElement(_tree.Tree, { json: self.state.json,\n\t          settings: self.state.settings })\n\t      ),\n\t      React.createElement(\n\t        'div',\n\t        { className: 'tab-pane', id: 'table_tab' },\n\t        React.createElement(_branch_table.BranchTable, { tree: self.state.tree,\n\t          test_results: self.state.test_results,\n\t          annotations: self.state.annotations })\n\t      )\n\t    );\n\t  }\n\t\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_absrel(url, element) {\n\t  React.render(React.createElement(BSREL, { url: url }), document.getElementById(element));\n\t}\n\t\n\tmodule.exports = render_absrel;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 45:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, _) {'use strict';\n\t\n\tvar React = __webpack_require__(46);\n\t\n\tvar BSRELSummary = React.createClass({\n\t  displayName: 'BSRELSummary',\n\t\n\t\n\t  float_format: d3.format(\".2f\"),\n\t\n\t  countBranchesTested: function countBranchesTested(branches_tested) {\n\t\n\t    if (branches_tested) {\n\t      return branches_tested.split(';').length;\n\t    } else {\n\t      return 0;\n\t    }\n\t  },\n\t\n\t  getBranchesWithEvidence: function getBranchesWithEvidence(test_results) {\n\t\n\t    var self = this;\n\t    return _.filter(test_results, function (d) {\n\t      return d.p <= 0.05;\n\t    }).length;\n\t  },\n\t\n\t  getTestBranches: function getTestBranches(test_results) {\n\t\n\t    var self = this;\n\t    return _.filter(test_results, function (d) {\n\t      return d.tested > 0;\n\t    }).length;\n\t  },\n\t\n\t  getTotalBranches: function getTotalBranches(test_results) {\n\t\n\t    var self = this;\n\t    return _.keys(test_results).length;\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t\n\t    var self = this;\n\t\n\t    return {\n\t      branches_with_evidence: this.getBranchesWithEvidence(self.props.test_results),\n\t      test_branches: this.getTestBranches(self.props.test_results),\n\t      total_branches: this.getTotalBranches(self.props.test_results)\n\t    };\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t    this.setState({\n\t      branches_with_evidence: this.getBranchesWithEvidence(nextProps.test_results),\n\t      test_branches: this.getTestBranches(nextProps.test_results),\n\t      total_branches: this.getTotalBranches(nextProps.test_results)\n\t    });\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    var self = this;\n\t\n\t    return React.createElement(\n\t      'ul',\n\t      { className: 'list-group' },\n\t      React.createElement(\n\t        'li',\n\t        { className: 'list-group-item list-group-item-info' },\n\t        React.createElement(\n\t          'h3',\n\t          { className: 'list-group-item-heading' },\n\t          React.createElement('i', { className: 'fa fa-list' }),\n\t          React.createElement(\n\t            'span',\n\t            { id: 'summary-method-name' },\n\t            'Adaptive branch site REL'\n\t          ),\n\t          ' summary'\n\t        ),\n\t        React.createElement(\n\t          'p',\n\t          { className: 'list-group-item-text lead' },\n\t          'Evidence',\n\t          React.createElement(\n\t            'sup',\n\t            null,\n\t            '\\u2020'\n\t          ),\n\t          ' of episodic diversifying selection was found on',\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            ' ',\n\t            self.state.branches_with_evidence\n\t          ),\n\t          ' out of',\n\t          React.createElement(\n\t            'span',\n\t            null,\n\t            ' ',\n\t            self.state.test_branches\n\t          ),\n\t          ' tested branches (',\n\t          React.createElement(\n\t            'span',\n\t            null,\n\t            self.state.total_branches\n\t          ),\n\t          ' total branches).'\n\t        ),\n\t        React.createElement(\n\t          'p',\n\t          null,\n\t          React.createElement(\n\t            'small',\n\t            null,\n\t            React.createElement(\n\t              'sup',\n\t              null,\n\t              '\\u2020'\n\t            ),\n\t            React.createElement(\n\t              'abbr',\n\t              { title: 'Likelihood Ratio Test' },\n\t              'LRT'\n\t            ),\n\t            ' p \\u2264 0.05, corrected for multiple testing.'\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'p',\n\t          null,\n\t          React.createElement(\n\t            'small',\n\t            null,\n\t            'Please cite ',\n\t            React.createElement(\n\t              'a',\n\t              { href: 'http://www.ncbi.nlm.nih.gov/pubmed/25697341', id: 'summary-pmid', target: '_blank' },\n\t              'PMID 25697341'\n\t            ),\n\t            ' if you use this result in a publication, presentation, or other scientific work.'\n\t          )\n\t        )\n\t      )\n\t    );\n\t  }\n\t\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_absrel_summary(test_results, pmid, element) {\n\t  React.render(React.createElement(BSRELSummary, { test_results: test_results, pmid: pmid }), document.getElementById(element));\n\t}\n\t\n\tmodule.exports.BSRELSummary = BSRELSummary;\n\tmodule.exports.render_absrel_summary = render_absrel_summary;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40), __webpack_require__(43)))\n\n/***/ },\n\n/***/ 203:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, _, $) {\"use strict\";\n\t\n\tvar React = __webpack_require__(46);\n\t\n\tvar ModelFits = React.createClass({\n\t  displayName: \"ModelFits\",\n\t\n\t\n\t  getInitialState: function getInitialState() {\n\t    var table_row_data = this.getModelRows(this.props.json),\n\t        table_columns = this.getModelColumns(table_row_data);\n\t\n\t    return {\n\t      table_row_data: table_row_data,\n\t      table_columns: table_columns\n\t    };\n\t  },\n\t\n\t  formatRuntime: function formatRuntime(seconds) {\n\t    var duration_string = \"\",\n\t        seconds = parseFloat(seconds);\n\t\n\t    var split_array = [Math.floor(seconds / (24 * 3600)), Math.floor(seconds / 3600) % 24, Math.floor(seconds / 60) % 60, seconds % 60],\n\t        quals = [\"d.\", \"hrs.\", \"min.\", \"sec.\"];\n\t\n\t    split_array.forEach(function (d, i) {\n\t      if (d) {\n\t        duration_string += \" \" + d + \" \" + quals[i];\n\t      }\n\t    });\n\t\n\t    return duration_string;\n\t  },\n\t\n\t  getLogLikelihood: function getLogLikelihood(this_model) {\n\t    return d3.format(\".2f\")(this_model['log-likelihood']);\n\t  },\n\t\n\t  getAIC: function getAIC(this_model) {\n\t    return d3.format(\".2f\")(this_model['AIC-c']);\n\t  },\n\t\n\t  getNumParameters: function getNumParameters(this_model) {\n\t    return this_model['parameters'];\n\t  },\n\t\n\t  getBranchLengths: function getBranchLengths(this_model) {\n\t\n\t    if (this_model[\"tree length\"]) {\n\t      return d3.format(\".2f\")(this_model[\"tree length\"]);\n\t    } else {\n\t      return d3.format(\".2f\")(d3.values(this_model[\"branch-lengths\"]).reduce(function (p, c) {\n\t        return p + c;\n\t      }, 0));\n\t    }\n\t  },\n\t\n\t  getRuntime: function getRuntime(this_model) {\n\t    //return this.formatRuntime(this_model['runtime']);\n\t    return this.formatRuntime(this_model['runtime']);\n\t  },\n\t\n\t  getDistributions: function getDistributions(m, this_model) {\n\t\n\t    var omega_distributions = {};\n\t    omega_distributions[m] = {};\n\t\n\t    var omega_format = d3.format(\".3r\"),\n\t        prop_format = d3.format(\".2p\"),\n\t        p_value_format = d3.format(\".4f\");\n\t\n\t    var distributions = [];\n\t\n\t    for (var d in this_model[\"rate-distributions\"]) {\n\t\n\t      var this_distro = this_model[\"rate-distributions\"][d];\n\t      var this_distro_entry = [d, \"\", \"\", \"\"];\n\t\n\t      omega_distributions[m][d] = this_distro.map(function (d) {\n\t        return {\n\t          'omega': d[0],\n\t          'weight': d[1]\n\t        };\n\t      });\n\t\n\t      for (var k = 0; k < this_distro.length; k++) {\n\t        this_distro_entry[k + 1] = omega_format(this_distro[k][0]) + \" (\" + prop_format(this_distro[k][1]) + \")\";\n\t      }\n\t\n\t      distributions.push(this_distro_entry);\n\t    }\n\t\n\t    distributions.sort(function (a, b) {\n\t      return a[0] < b[0] ? -1 : a[0] == b[0] ? 0 : 1;\n\t    });\n\t\n\t    return distributions;\n\t  },\n\t\n\t  getModelRows: function getModelRows(json) {\n\t\n\t    if (!json) {\n\t      return [];\n\t    }\n\t\n\t    var table_row_data = [];\n\t    var omega_format = d3.format(\".3r\");\n\t    var prop_format = d3.format(\".2p\");\n\t    var p_value_format = d3.format(\".4f\");\n\t\n\t    for (var m in json[\"fits\"]) {\n\t\n\t      var this_model_row = [],\n\t          this_model = json[\"fits\"][m];\n\t\n\t      this_model_row = [this_model['display-order'], \"\", m, this.getLogLikelihood(this_model), this.getNumParameters(this_model), this.getAIC(this_model), this.getRuntime(this_model), this.getBranchLengths(this_model)];\n\t\n\t      var distributions = this.getDistributions(m, this_model);\n\t\n\t      if (distributions.length) {\n\t\n\t        this_model_row = this_model_row.concat(distributions[0]);\n\t        this_model_row[1] = distributions[0][0];\n\t\n\t        table_row_data.push(this_model_row);\n\t\n\t        for (var d = 1; d < distributions.length; d++) {\n\t\n\t          var this_distro_entry = this_model_row.map(function (d, i) {\n\t            if (i) return \"\";\n\t            return d;\n\t          });\n\t\n\t          this_distro_entry[1] = distributions[d][0];\n\t\n\t          for (var k = this_distro_entry.length - 4; k < this_distro_entry.length; k++) {\n\t            this_distro_entry[k] = distributions[d][k - this_distro_entry.length + 4];\n\t          }\n\t\n\t          table_row_data.push(this_distro_entry);\n\t        }\n\t      } else {\n\t        table_row_data.push(this_model_row);\n\t      }\n\t    }\n\t\n\t    table_row_data.sort(function (a, b) {\n\t      if (a[0] == b[0]) {\n\t        return a[1] < b[1] ? -1 : a[1] == b[1] ? 0 : 1;\n\t      }\n\t      return a[0] - b[0];\n\t    });\n\t\n\t    table_row_data = table_row_data.map(function (r) {\n\t      return r.slice(2);\n\t    });\n\t\n\t    return table_row_data;\n\t  },\n\t\n\t  getModelColumns: function getModelColumns(table_row_data) {\n\t\n\t    var model_header = '<th>Model</th>',\n\t        logl_header = '<th><em> log </em>L</th>',\n\t        num_params_header = '<th><abbr title=\"Number of estimated model parameters\"># par.</abbr></th>',\n\t        aic_header = '<th><abbr title=\"Small Sample AIC\">AIC<sub>c</sub></abbr></th>',\n\t        runtime_header = '<th>Time to fit</th>',\n\t        branch_lengths_header = '<th><abbr title=\"Total tree length, expected substitutions/site\">L<sub>tree</sub></abbr></th>',\n\t        branch_set_header = '<th>Branch set</th>',\n\t        omega_1_header = '<th>&omega;<sub>1</sub></th>',\n\t        omega_2_header = '<th>&omega;<sub>2</sub></th>',\n\t        omega_3_header = '<th>&omega;<sub>3</sub></th>';\n\t\n\t    // inspect table_row_data and return header\n\t    var all_columns = [model_header, logl_header, num_params_header, aic_header, runtime_header, branch_lengths_header, branch_set_header, omega_1_header, omega_2_header, omega_3_header];\n\t\n\t    // validate each table row with its associated header\n\t    if (table_row_data.length == 0) {\n\t      return [];\n\t    }\n\t\n\t    // trim columns to length of table_row_data\n\t    var column_headers = _.take(all_columns, table_row_data[0].length);\n\t\n\t    // remove all columns that have 0, null, or undefined rows\n\t    var items = d3.transpose(table_row_data);\n\t\n\t    return column_headers;\n\t  },\n\t\n\t  componentDidUpdate: function componentDidUpdate() {\n\t\n\t    var model_columns = d3.select('#summary-model-header1');\n\t    model_columns = model_columns.selectAll(\"th\").data(this.state.table_columns);\n\t    model_columns.enter().append(\"th\");\n\t    model_columns.html(function (d) {\n\t      return d;\n\t    });\n\t\n\t    var model_rows = d3.select('#summary-model-table').selectAll(\"tr\").data(this.state.table_row_data);\n\t    model_rows.enter().append('tr');\n\t    model_rows.exit().remove();\n\t    model_rows = model_rows.selectAll(\"td\").data(function (d) {\n\t      return d;\n\t    });\n\t    model_rows.enter().append(\"td\");\n\t    model_rows.html(function (d) {\n\t      return d;\n\t    });\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t    var table_row_data = this.getModelRows(nextProps.json),\n\t        table_columns = this.getModelColumns(table_row_data);\n\t\n\t    this.setState({\n\t      table_row_data: table_row_data,\n\t      table_columns: table_columns\n\t    });\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    return React.createElement(\n\t      \"div\",\n\t      { className: \"col-lg-12\" },\n\t      React.createElement(\n\t        \"ul\",\n\t        { className: \"list-group\" },\n\t        React.createElement(\n\t          \"li\",\n\t          { className: \"list-group-item\" },\n\t          React.createElement(\n\t            \"h4\",\n\t            { className: \"list-group-item-heading\" },\n\t            React.createElement(\"i\", { className: \"fa fa-cubes\", styleFormat: \"margin-right: 10px\" }),\n\t            \"Model fits\"\n\t          ),\n\t          React.createElement(\n\t            \"table\",\n\t            { className: \"table table-hover table-condensed list-group-item-text\", styleFormat: \"margin-top:0.5em;\" },\n\t            React.createElement(\"thead\", { id: \"summary-model-header1\" }),\n\t            React.createElement(\"tbody\", { id: \"summary-model-table\" })\n\t          )\n\t        )\n\t      )\n\t    );\n\t  }\n\t\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_model_fits(json, element) {\n\t  React.render(React.createElement(ModelFits, { json: json }), $(element)[0]);\n\t}\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction rerender_model_fits(json, element) {\n\t  $(element).empty();\n\t  render_model_fits(json, element);\n\t}\n\t\n\tmodule.exports.ModelFits = ModelFits;\n\tmodule.exports.render_model_fits = render_model_fits;\n\tmodule.exports.rerender_model_fits = rerender_model_fits;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40), __webpack_require__(43), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 204:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, $) {'use strict';\n\t\n\tvar React = __webpack_require__(46),\n\t    _ = __webpack_require__(43);\n\t\n\tvar TreeSummary = React.createClass({\n\t  displayName: 'TreeSummary',\n\t\n\t\n\t  getInitialState: function getInitialState() {\n\t\n\t    var table_row_data = this.getSummaryRows(this.props.json),\n\t        table_columns = this.getTreeSummaryColumns(table_row_data);\n\t\n\t    return {\n\t      table_row_data: table_row_data,\n\t      table_columns: table_columns\n\t    };\n\t  },\n\t\n\t  getRateClasses: function getRateClasses(branch_annotations) {\n\t\n\t    // Get count of all rate classes\n\t    var all_branches = _.values(branch_annotations);\n\t\n\t    return _.countBy(all_branches, function (branch) {\n\t      return branch.omegas.length;\n\t    });\n\t  },\n\t\n\t  getBranchProportion: function getBranchProportion(rate_classes) {\n\t    var sum = _.reduce(_.values(rate_classes), function (memo, num) {\n\t      return memo + num;\n\t    });\n\t    return _.mapObject(rate_classes, function (val, key) {\n\t      return d3.format(\".2p\")(val / sum);\n\t    });\n\t  },\n\t\n\t  getBranchLengthProportion: function getBranchLengthProportion(rate_classes, branch_annotations, total_branch_length) {\n\t\n\t    var self = this;\n\t\n\t    // get branch lengths of each rate distribution\n\t    //return prop_format(d[2] / total_tree_length\n\t\n\t    // Get count of all rate classes\n\t    var branch_lengths = _.mapObject(rate_classes, function (d) {\n\t      return 0;\n\t    });\n\t\n\t    for (var key in branch_annotations) {\n\t      var node = self.tree.get_node_by_name(key);\n\t      branch_lengths[branch_annotations[key].omegas.length] += self.tree.branch_length()(node);\n\t    };\n\t\n\t    return _.mapObject(branch_lengths, function (val, key) {\n\t      return d3.format(\".2p\")(val / total_branch_length);\n\t    });\n\t  },\n\t\n\t  getNumUnderSelection: function getNumUnderSelection(rate_classes, branch_annotations, test_results) {\n\t\n\t    var num_under_selection = _.mapObject(rate_classes, function (d) {\n\t      return 0;\n\t    });\n\t\n\t    for (var key in branch_annotations) {\n\t      num_under_selection[branch_annotations[key].omegas.length] += test_results[key][\"p\"] <= 0.05;\n\t    };\n\t\n\t    return num_under_selection;\n\t  },\n\t\n\t  getSummaryRows: function getSummaryRows(json) {\n\t\n\t    var self = this;\n\t\n\t    // Will need to create a tree for each fits\n\t    var analysis_data = json;\n\t\n\t    if (!analysis_data) {\n\t      return [];\n\t    }\n\t\n\t    // Create an array of phylotrees from fits\n\t    var trees = _.map(analysis_data[\"fits\"], function (d) {\n\t      return d3.layout.phylotree(\"body\")(d[\"tree string\"]);\n\t    });\n\t    var tree = trees[0];\n\t\n\t    self.tree = tree;\n\t\n\t    //TODO : Do not hard code model here\n\t    var tree_length = analysis_data[\"fits\"][\"Full model\"][\"tree length\"];\n\t    var branch_annotations = analysis_data[\"fits\"][\"Full model\"][\"branch-annotations\"];\n\t    var test_results = analysis_data[\"test results\"];\n\t\n\t    var rate_classes = this.getRateClasses(branch_annotations),\n\t        proportions = this.getBranchProportion(rate_classes),\n\t        length_proportions = this.getBranchLengthProportion(rate_classes, branch_annotations, tree_length),\n\t        num_under_selection = this.getNumUnderSelection(rate_classes, branch_annotations, test_results);\n\t\n\t    // zip objects into matrix\n\t    var keys = _.keys(rate_classes);\n\t\n\t    var summary_rows = _.zip(keys, _.values(rate_classes), _.values(proportions), _.values(length_proportions), _.values(num_under_selection));\n\t\n\t    summary_rows.sort(function (a, b) {\n\t      if (a[0] == b[0]) {\n\t        return a[1] < b[1] ? -1 : a[1] == b[1] ? 0 : 1;\n\t      }\n\t      return a[0] - b[0];\n\t    });\n\t\n\t    return summary_rows;\n\t  },\n\t\n\t  getTreeSummaryColumns: function getTreeSummaryColumns(table_row_data) {\n\t\n\t    var omega_header = '<th>ω rate<br>classes</th>',\n\t        branch_num_header = '<th># of <br>branches</th>',\n\t        branch_prop_header = '<th>% of <br>branches</th>',\n\t        branch_prop_length_header = '<th>% of tree <br>length</th>',\n\t        under_selection_header = '<th># under <br>selection</th>';\n\t\n\t    // inspect table_row_data and return header\n\t    var all_columns = [omega_header, branch_num_header, branch_prop_header, branch_prop_length_header, under_selection_header];\n\t\n\t    // validate each table row with its associated header\n\t    if (table_row_data.length == 0) {\n\t      return [];\n\t    }\n\t\n\t    // trim columns to length of table_row_data\n\t    var column_headers = _.take(all_columns, table_row_data[0].length);\n\t\n\t    return column_headers;\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t    var table_row_data = this.getSummaryRows(nextProps.json),\n\t        table_columns = this.getTreeSummaryColumns(table_row_data);\n\t\n\t    this.setState({\n\t      table_row_data: table_row_data,\n\t      table_columns: table_columns\n\t    });\n\t  },\n\t\n\t  componentDidUpdate: function componentDidUpdate() {\n\t\n\t    d3.select('#summary-tree-header').empty();\n\t\n\t    var tree_summary_columns = d3.select('#summary-tree-header');\n\t\n\t    tree_summary_columns = tree_summary_columns.selectAll(\"th\").data(this.state.table_columns);\n\t    tree_summary_columns.enter().append(\"th\");\n\t    tree_summary_columns.html(function (d) {\n\t      return d;\n\t    });\n\t\n\t    var tree_summary_rows = d3.select('#summary-tree-table').selectAll(\"tr\").data(this.state.table_row_data);\n\t    tree_summary_rows.enter().append('tr');\n\t    tree_summary_rows.exit().remove();\n\t    tree_summary_rows = tree_summary_rows.selectAll(\"td\").data(function (d) {\n\t      return d;\n\t    });\n\t\n\t    tree_summary_rows.enter().append(\"td\");\n\t    tree_summary_rows.html(function (d) {\n\t      return d;\n\t    });\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    return React.createElement(\n\t      'ul',\n\t      { className: 'list-group' },\n\t      React.createElement(\n\t        'li',\n\t        { className: 'list-group-item' },\n\t        React.createElement(\n\t          'h4',\n\t          { className: 'list-group-item-heading' },\n\t          React.createElement('i', { className: 'fa fa-tree' }),\n\t          'Tree'\n\t        ),\n\t        React.createElement(\n\t          'table',\n\t          { className: 'table table-hover table-condensed list-group-item-text' },\n\t          React.createElement('thead', { id: 'summary-tree-header' }),\n\t          React.createElement('tbody', { id: 'summary-tree-table' })\n\t        )\n\t      )\n\t    );\n\t  }\n\t\n\t});\n\t\n\t//TODO\n\t//<caption>\n\t//<p className=\"list-group-item-text text-muted\">\n\t//    Total tree length under the branch-site model is <strong id=\"summary-tree-length\">2.30</strong> expected substitutions per nucleotide site, and <strong id=\"summary-tree-length-mg94\">1.74</strong> under the MG94 model.\n\t//</p>\n\t//</caption>\n\t\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_tree_summary(json, element) {\n\t  React.render(React.createElement(TreeSummary, { json: json }), $(element)[0]);\n\t}\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction rerender_tree_summary(tree, element) {\n\t  $(element).empty();\n\t  render_tree_summary(tree, element);\n\t}\n\t\n\tmodule.exports.TreeSummary = TreeSummary;\n\tmodule.exports.render_tree_summary = render_tree_summary;\n\tmodule.exports.rerender_tree_summary = rerender_tree_summary;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 205:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, _, $) {'use strict';\n\t\n\tvar React = __webpack_require__(46);\n\tvar datamonkey = __webpack_require__(39);\n\t__webpack_require__(206);\n\t\n\tvar Tree = React.createClass({\n\t    displayName: 'Tree',\n\t\n\t\n\t    getInitialState: function getInitialState() {\n\t        return {\n\t            json: this.props.json,\n\t            settings: this.props.settings\n\t        };\n\t    },\n\t\n\t    sortNodes: function sortNodes(asc) {\n\t\n\t        var self = this;\n\t\n\t        self.tree.traverse_and_compute(function (n) {\n\t            var d = 1;\n\t            if (n.children && n.children.length) {\n\t                d += d3.max(n.children, function (d) {\n\t                    return d[\"count_depth\"];\n\t                });\n\t            }\n\t            n[\"count_depth\"] = d;\n\t        });\n\t\n\t        self.tree.resort_children(function (a, b) {\n\t            return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\n\t        });\n\t    },\n\t\n\t    getBranchLengths: function getBranchLengths() {\n\t\n\t        var self = this;\n\t\n\t        if (!this.state.json) {\n\t            return [];\n\t        }\n\t\n\t        var branch_lengths = self.settings[\"tree-options\"][\"hyphy-tree-branch-lengths\"][0] ? this.state.json[\"fits\"][this.which_model][\"branch-lengths\"] : null;\n\t\n\t        if (!branch_lengths) {\n\t\n\t            var nodes = _.filter(self.tree.get_nodes(), function (d) {\n\t                return d.parent;\n\t            });\n\t\n\t            branch_lengths = _.object(_.map(nodes, function (d) {\n\t                return d.name;\n\t            }), _.map(nodes, function (d) {\n\t                return parseFloat(d.attribute);\n\t            }));\n\t        }\n\t\n\t        return branch_lengths;\n\t    },\n\t\n\t    assignBranchAnnotations: function assignBranchAnnotations() {\n\t        if (this.state.json && this.state.json[\"fits\"][this.which_model]) {\n\t            this.tree.assign_attributes(this.state.json[\"fits\"][this.which_model][\"branch-annotations\"]);\n\t        }\n\t    },\n\t\n\t    renderDiscreteLegendColorScheme: function renderDiscreteLegendColorScheme(svg_container) {\n\t\n\t        var self = this,\n\t            svg = self.svg;\n\t\n\t        var color_fill = self.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0] ? \"black\" : \"red\";\n\t\n\t        var margins = {\n\t            'bottom': 30,\n\t            'top': 15,\n\t            'left': 40,\n\t            'right': 2\n\t        };\n\t\n\t        d3.selectAll(\"#color-legend\").remove();\n\t\n\t        var dc_legend = svg.append(\"g\").attr(\"id\", \"color-legend\").attr(\"class\", \"dc-legend\").attr(\"transform\", \"translate(\" + margins[\"left\"] + \",\" + margins[\"top\"] + \")\");\n\t\n\t        var fg_item = dc_legend.append(\"g\").attr(\"class\", \"dc-legend-item\").attr(\"transform\", \"translate(0,0)\");\n\t\n\t        fg_item.append(\"rect\").attr(\"width\", \"13\").attr(\"height\", \"13\").attr(\"fill\", color_fill);\n\t\n\t        fg_item.append(\"text\").attr(\"x\", \"15\").attr(\"y\", \"11\").text(\"Foreground\");\n\t\n\t        var bg_item = dc_legend.append(\"g\").attr(\"class\", \"dc-legend-item\").attr(\"transform\", \"translate(0,18)\");\n\t\n\t        bg_item.append(\"rect\").attr(\"width\", \"13\").attr(\"height\", \"13\").attr(\"fill\", \"gray\");\n\t\n\t        bg_item.append(\"text\").attr(\"x\", \"15\").attr(\"y\", \"11\").text(\"Background\");\n\t    },\n\t\n\t    renderLegendColorScheme: function renderLegendColorScheme(svg_container, attr_name, do_not_render) {\n\t\n\t        var self = this;\n\t\n\t        var branch_annotations = this.state.json[\"fits\"][this.which_model][\"branch-annotations\"];\n\t\n\t        var svg = self.svg;\n\t\n\t        // clear existing linearGradients\n\t        d3.selectAll(\".legend-definitions\").selectAll(\"linearGradient\").remove();\n\t        d3.selectAll(\"#color-legend\").remove();\n\t\n\t        if (branch_annotations && !do_not_render) {\n\t            var bar_width = 70,\n\t                bar_height = 300,\n\t                margins = {\n\t                'bottom': 30,\n\t                'top': 15,\n\t                'left': 40,\n\t                'right': 2\n\t            };\n\t\n\t            var this_grad = svg.append(\"defs\").attr(\"class\", \"legend-definitions\").append(\"linearGradient\").attr(\"id\", \"_omega_bar\").attr(\"x1\", \"0%\").attr(\"y1\", \"0%\").attr(\"x2\", \"0%\").attr(\"y2\", \"100%\");\n\t\n\t            var omega_scale = d3.scale.pow().exponent(this.scaling_exponent).domain(d3.extent(self.omega_color.domain())).range([0, 1]),\n\t                axis_scale = d3.scale.pow().exponent(this.scaling_exponent).domain(d3.extent(self.omega_color.domain())).range([0, bar_height - margins['top'] - margins['bottom']]);\n\t\n\t            self.omega_color.domain().forEach(function (d) {\n\t                this_grad.append(\"stop\").attr(\"offset\", \"\" + omega_scale(d) * 100 + \"%\").style(\"stop-color\", self.omega_color(d));\n\t            });\n\t\n\t            var g_container = svg.append(\"g\").attr(\"id\", \"color-legend\").attr(\"transform\", \"translate(\" + margins[\"left\"] + \",\" + margins[\"top\"] + \")\");\n\t\n\t            g_container.append(\"rect\").attr(\"x\", 0).attr(\"width\", bar_width - margins['left'] - margins['right']).attr(\"y\", 0).attr(\"height\", bar_height - margins['top'] - margins['bottom']).style(\"fill\", \"url(#_omega_bar)\");\n\t\n\t            var draw_omega_bar = d3.svg.axis().scale(axis_scale).orient(\"left\").tickFormat(d3.format(\".1r\")).tickValues([0, 0.01, 0.1, 0.5, 1, 2, 5, 10]);\n\t\n\t            var scale_bar = g_container.append(\"g\");\n\t\n\t            scale_bar.style(\"font-size\", \"14\").attr(\"class\", \"hyphy-omega-bar\").call(draw_omega_bar);\n\t\n\t            scale_bar.selectAll(\"text\").style(\"text-anchor\", \"right\");\n\t\n\t            var _label = '';\n\t            var x_label = _label = scale_bar.append(\"g\").attr(\"class\", \"hyphy-omega-bar\");\n\t            x_label = x_label.selectAll(\"text\").data([attr_name]);\n\t            x_label.enter().append(\"text\");\n\t            x_label.text(function (d) {\n\t                return $('<textarea />').html(d).text();\n\t            }).attr(\"transform\", \"translate(\" + (bar_width - margins['left'] - margins['right']) * 0.5 + \",\" + (bar_height - margins['bottom']) + \")\").style(\"text-anchor\", \"middle\").style(\"font-size\", \"18\").attr(\"dx\", \"0.0em\").attr(\"dy\", \"0.1em\");\n\t        }\n\t    },\n\t\n\t    setHandlers: function setHandlers() {\n\t\n\t        var self = this;\n\t\n\t        $(\"#hyphy-error-hide\").on(\"click\", function (e) {\n\t            d3.select(\"#hyphy-error\").style(\"display\", \"none\");\n\t            e.preventDefault();\n\t        });\n\t\n\t        $(\".hyphy-tree-trigger\").on(\"click\", function (e) {\n\t\n\t            self.renderTree();\n\t        });\n\t\n\t        $(\".tree-tab-btn\").on('click', function (e) {\n\t            self.tree.placenodes().update();\n\t        });\n\t\n\t        $(\"#export-phylo-svg\").on('click', function (e) {\n\t            datamonkey.save_image(\"svg\", \"#tree_container\");\n\t        });\n\t\n\t        $(\"#export-phylo-png\").on('click', function (e) {\n\t            datamonkey.save_image(\"png\", \"#tree_container\");\n\t        });\n\t\n\t        $(\"#export-phylo-nwk\").on('click', function (e) {\n\t            var nwk = self.tree.get_newick(function () {});\n\t            var pom = document.createElement('a');\n\t            pom.setAttribute('href', 'data:text/octet-stream;charset=utf-8,' + encodeURIComponent(nwk));\n\t            pom.setAttribute('download', 'nwk.txt');\n\t            $(\"body\").append(pom);\n\t            pom.click();\n\t            pom.remove();\n\t        });\n\t    },\n\t\n\t    setTreeHandlers: function setTreeHandlers() {\n\t\n\t        var self = this;\n\t        var tree_object = self.tree;\n\t\n\t        $(\"[data-direction]\").on(\"click\", function (e) {\n\t            var which_function = $(this).data(\"direction\") == 'vertical' ? tree_object.spacing_x : tree_object.spacing_y;\n\t            which_function(which_function() + +$(this).data(\"amount\")).update();\n\t        });\n\t\n\t        $(\".phylotree-layout-mode\").on(\"change\", function (e) {\n\t            if ($(this).is(':checked')) {\n\t                if (tree_object.radial() != ($(this).data(\"mode\") == \"radial\")) {\n\t                    tree_object.radial(!tree_object.radial()).placenodes().update();\n\t                }\n\t            }\n\t        });\n\t\n\t        $(\".phylotree-align-toggler\").on(\"change\", function (e) {\n\t            if ($(this).is(':checked')) {\n\t                if (tree_object.align_tips($(this).data(\"align\") == \"right\")) {\n\t                    tree_object.placenodes().update();\n\t                }\n\t            }\n\t        });\n\t\n\t        $(\"#sort_original\").on(\"click\", function (e) {\n\t            tree_object.resort_children(function (a, b) {\n\t                return a[\"original_child_order\"] - b[\"original_child_order\"];\n\t            });\n\t\n\t            e.preventDefault();\n\t        });\n\t\n\t        $(\"#sort_ascending\").on(\"click\", function (e) {\n\t            self.sortNodes(true);\n\t            e.preventDefault();\n\t        });\n\t\n\t        $(\"#sort_descending\").on(\"click\", function (e) {\n\t            self.sortNodes(false);\n\t            e.preventDefault();\n\t        });\n\t    },\n\t\n\t    setPartitionList: function setPartitionList() {\n\t\n\t        var self = this;\n\t\n\t        // Check if partition list exists\n\t        if (!self.props.json[\"partition\"]) {\n\t            d3.select(\"#hyphy-tree-highlight-div\").style(\"display\", \"none\");\n\t            d3.select(\"#hyphy-tree-highlight\").style(\"display\", \"none\");\n\t            return;\n\t        }\n\t\n\t        // set tree partitions\n\t        self.tree.set_partitions(self.props.json[\"partition\"]);\n\t\n\t        var partition_list = d3.select(\"#hyphy-tree-highlight-branches\").selectAll(\"li\").data([['None']].concat(d3.keys(self.props.json[\"partition\"]).map(function (d) {\n\t            return [d];\n\t        }).sort()));\n\t\n\t        partition_list.enter().append(\"li\");\n\t        partition_list.exit().remove();\n\t        partition_list = partition_list.selectAll(\"a\").data(function (d) {\n\t            return d;\n\t        });\n\t\n\t        partition_list.enter().append(\"a\");\n\t        partition_list.attr(\"href\", \"#\").on(\"click\", function (d, i) {\n\t            d3.select(\"#hyphy-tree-highlight\").attr(\"value\", d);\n\t            self.renderTree();\n\t        });\n\t\n\t        // set default to passed setting\n\t        partition_list.text(function (d) {\n\t            if (d == \"RELAX.test\") {\n\t                this.click();\n\t            }\n\t            return d;\n\t        });\n\t    },\n\t\n\t    setModelList: function setModelList() {\n\t\n\t        var self = this;\n\t\n\t        if (!this.state.json) {\n\t            return [];\n\t        }\n\t\n\t        this.state.settings['suppress-tree-render'] = true;\n\t\n\t        var def_displayed = false;\n\t\n\t        var model_list = d3.select(\"#hyphy-tree-model-list\").selectAll(\"li\").data(d3.keys(this.state.json[\"fits\"]).map(function (d) {\n\t            return [d];\n\t        }).sort());\n\t\n\t        model_list.enter().append(\"li\");\n\t        model_list.exit().remove();\n\t        model_list = model_list.selectAll(\"a\").data(function (d) {\n\t            return d;\n\t        });\n\t\n\t        model_list.enter().append(\"a\");\n\t\n\t        model_list.attr(\"href\", \"#\").on(\"click\", function (d, i) {\n\t            d3.select(\"#hyphy-tree-model\").attr(\"value\", d);\n\t            self.renderTree();\n\t        });\n\t\n\t        model_list.text(function (d) {\n\t\n\t            if (d == \"General Descriptive\") {\n\t                def_displayed = true;\n\t                this.click();\n\t            }\n\t\n\t            if (!def_displayed && d == \"Alternative\") {\n\t                def_displayed = true;\n\t                this.click();\n\t            }\n\t\n\t            if (!def_displayed && d == \"Partitioned MG94xREV\") {\n\t                def_displayed = true;\n\t                this.click();\n\t            }\n\t\n\t            if (!def_displayed && d == \"MG94\") {\n\t                def_displayed = true;\n\t                this.click();\n\t            }\n\t\n\t            if (!def_displayed && d == \"Full model\") {\n\t                def_displayed = true;\n\t                this.click();\n\t            }\n\t\n\t            return d;\n\t        });\n\t\n\t        this.settings['suppress-tree-render'] = false;\n\t    },\n\t\n\t    initialize: function initialize() {\n\t\n\t        var self = this;\n\t\n\t        this.settings = this.state.settings;\n\t\n\t        if (!this.settings) {\n\t            return null;\n\t        }\n\t\n\t        if (!this.state.json) {\n\t            return null;\n\t        }\n\t\n\t        $(\"#hyphy-tree-branch-lengths\").click();\n\t\n\t        this.scaling_exponent = 0.33;\n\t        this.omega_format = d3.format(\".3r\");\n\t        this.prop_format = d3.format(\".2p\");\n\t        this.fit_format = d3.format(\".2f\");\n\t        this.p_value_format = d3.format(\".4f\");\n\t\n\t        var json = this.state.json;\n\t        var analysis_data = json;\n\t\n\t        this.width = 800;\n\t        this.height = 600;\n\t\n\t        this.which_model = this.settings[\"tree-options\"][\"hyphy-tree-model\"][0];\n\t        this.legend_type = this.settings[\"hyphy-tree-legend-type\"];\n\t\n\t        this.setHandlers();\n\t        this.setModelList();\n\t        this.initializeTree();\n\t        this.setPartitionList();\n\t    },\n\t\n\t    initializeTree: function initializeTree() {\n\t\n\t        var self = this;\n\t\n\t        var analysis_data = self.state.json;\n\t\n\t        var width = this.width,\n\t            height = this.height,\n\t            alpha_level = 0.05,\n\t            branch_lengths = [];\n\t\n\t        if (!this.tree) {\n\t            this.tree = d3.layout.phylotree(\"body\").size([height, width]).separation(function (a, b) {\n\t                return 0;\n\t            });\n\t        }\n\t\n\t        this.setTreeHandlers();\n\t\n\t        // clear any existing svg\n\t        d3.select(\"#tree_container\").html(\"\");\n\t\n\t        this.svg = d3.select(\"#tree_container\").append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n\t\n\t        this.tree.branch_name(null);\n\t        this.tree.node_span('equal');\n\t        this.tree.options({\n\t            'draw-size-bubbles': false,\n\t            'selectable': false,\n\t            'left-right-spacing': 'fit-to-size',\n\t            'left-offset': 100,\n\t            'color-fill': this.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0]\n\t        }, false);\n\t\n\t        this.assignBranchAnnotations();\n\t\n\t        self.omega_color = d3.scale.pow().exponent(this.scaling_exponent).domain([0, 0.25, 1, 5, 10]).range(this.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0] ? [\"#DDDDDD\", \"#AAAAAA\", \"#888888\", \"#444444\", \"#000000\"] : [\"#5e4fa2\", \"#3288bd\", \"#e6f598\", \"#f46d43\", \"#9e0142\"]).clamp(true);\n\t\n\t        self.renderTree();\n\t\n\t        if (self.legend_type == 'discrete') {\n\t            self.renderDiscreteLegendColorScheme(\"tree_container\");\n\t        } else {\n\t            self.renderLegendColorScheme(\"tree_container\", analysis_data[\"fits\"][this.which_model][\"annotation-tag\"]);\n\t        }\n\t\n\t        if (this.settings.edgeColorizer) {\n\t            this.edgeColorizer = this.settings.edgeColorizer;\n\t        }\n\t\n\t        this.tree.style_edges(this.edgeColorizer);\n\t        this.tree.style_nodes(this.nodeColorizer);\n\t\n\t        this.tree.spacing_x(30, true);\n\t        this.tree.layout();\n\t        this.tree.placenodes().update();\n\t        this.tree.layout();\n\t    },\n\t\n\t    renderTree: function renderTree(skip_render) {\n\t\n\t        var self = this;\n\t        var analysis_data = this.state.json;\n\t        var svg = self.svg;\n\t\n\t        if (!this.settings['suppress-tree-render']) {\n\t\n\t            var do_layout = false;\n\t\n\t            for (var k in this.settings[\"tree-options\"]) {\n\t\n\t                //TODO : Check to make sure settings has a matching field\n\t                if (k == 'hyphy-tree-model') {\n\t\n\t                    var controller = d3.select(\"#\" + k),\n\t                        controller_value = controller.attr(\"value\") || controller.property(\"checked\");\n\t\n\t                    if (controller_value != this.settings[\"tree-options\"][k][0] && controller_value != false) {\n\t                        this.settings[\"tree-options\"][k][0] = controller_value;\n\t                        do_layout = do_layout || this.settings[\"tree-options\"][k][1];\n\t                    }\n\t                } else {\n\t                    var controller = d3.select(\"#\" + k),\n\t                        controller_value = controller.attr(\"value\") || controller.property(\"checked\");\n\t\n\t                    if (controller_value != this.settings[\"tree-options\"][k][0]) {\n\t                        this.settings[\"tree-options\"][k][0] = controller_value;\n\t                        do_layout = do_layout || this.settings[\"tree-options\"][k][1];\n\t                    }\n\t                }\n\t            }\n\t\n\t            // Update which_model\n\t            if (self.which_model != this.settings[\"tree-options\"][\"hyphy-tree-model\"][0]) {\n\t                self.which_model = this.settings[\"tree-options\"][\"hyphy-tree-model\"][0];\n\t                self.initializeTree();\n\t                return;\n\t            }\n\t\n\t            if (_.indexOf(_.keys(analysis_data), \"tree\") > -1) {\n\t                this.tree(analysis_data[\"tree\"]).svg(svg);\n\t            } else {\n\t                this.tree(analysis_data[\"fits\"][self.which_model][\"tree string\"]).svg(svg);\n\t            }\n\t\n\t            this.branch_lengths = this.getBranchLengths();\n\t\n\t            this.tree.font_size(18);\n\t            this.tree.scale_bar_font_size(14);\n\t            this.tree.node_circle_size(0);\n\t\n\t            this.tree.branch_length(function (n) {\n\t                if (self.branch_lengths) {\n\t                    return self.branch_lengths[n.name] || 0;\n\t                }\n\t                return undefined;\n\t            });\n\t\n\t            this.assignBranchAnnotations();\n\t\n\t            if (_.findKey(analysis_data, \"partition\")) {\n\t                this.partition = (this.settings[\"tree-options\"][\"hyphy-tree-highlight\"] ? analysis_data[\"partition\"][this.settings[\"tree-options\"][\"hyphy-tree-highlight\"][0]] : null) || null;\n\t            } else {\n\t                this.partition = null;\n\t            }\n\t\n\t            self.omega_color = d3.scale.pow().exponent(self.scaling_exponent).domain([0, 0.25, 1, 5, 10]).range(self.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0] ? [\"#DDDDDD\", \"#AAAAAA\", \"#888888\", \"#444444\", \"#000000\"] : [\"#5e4fa2\", \"#3288bd\", \"#e6f598\", \"#f46d43\", \"#9e0142\"]).clamp(true);\n\t\n\t            self.tree.options({\n\t                'color-fill': self.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0]\n\t            }, false);\n\t\n\t            d3.select(\".phylotree-definitions\").selectAll(\"linearGradient\").remove();\n\t\n\t            // TODO: Should be a prop. Hide or show legend.\n\t            if (!this.settings[\"tree-options\"][\"hyphy-tree-hide-legend\"][0]) {\n\t                d3.select(\"#color-legend\").style(\"visibility\", \"visible\");\n\t\n\t                if (self.legend_type) {\n\t                    self.renderDiscreteLegendColorScheme(\"tree_container\");\n\t                } else {\n\t                    self.renderLegendColorScheme(\"tree_container\", self.state.json[\"fits\"][self.which_model][\"annotation-tag\"]);\n\t                }\n\t            } else {\n\t                d3.select(\"#color-legend\").style(\"visibility\", \"hidden\");\n\t            }\n\t\n\t            if (!skip_render) {\n\t                if (do_layout) {\n\t                    this.tree.update_layout();\n\t                }\n\t                //d3_phylotree_trigger_refresh(this.tree);\n\t                //this.tree.trigger_refresh();\n\t            }\n\t        }\n\t    },\n\t\n\t    componentDidMount: function componentDidMount() {\n\t        this.initialize();\n\t    },\n\t\n\t    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t        this.setState({\n\t            json: nextProps.json,\n\t            settings: nextProps.settings\n\t        });\n\t    },\n\t\n\t    componentDidUpdate: function componentDidUpdate() {\n\t        this.initialize();\n\t    },\n\t\n\t    render: function render() {\n\t\n\t        return React.createElement(\n\t            'div',\n\t            null,\n\t            React.createElement(\n\t                'div',\n\t                { className: 'row' },\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'cold-md-12' },\n\t                    React.createElement(\n\t                        'div',\n\t                        { className: 'input-group input-group-sm' },\n\t                        React.createElement(\n\t                            'div',\n\t                            { className: 'input-group-btn' },\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default dropdown-toggle', 'data-toggle': 'dropdown' },\n\t                                'Export',\n\t                                React.createElement('span', { className: 'caret' })\n\t                            ),\n\t                            React.createElement(\n\t                                'ul',\n\t                                { className: 'dropdown-menu' },\n\t                                React.createElement(\n\t                                    'li',\n\t                                    { id: 'export-phylo-png' },\n\t                                    React.createElement(\n\t                                        'a',\n\t                                        { href: '#' },\n\t                                        React.createElement('i', { className: 'fa fa-image' }),\n\t                                        ' Image'\n\t                                    )\n\t                                ),\n\t                                React.createElement(\n\t                                    'li',\n\t                                    { id: 'export-phylo-nwk' },\n\t                                    React.createElement(\n\t                                        'a',\n\t                                        { href: '#' },\n\t                                        React.createElement('i', { className: 'fa fa-file-o' }),\n\t                                        ' Newick File'\n\t                                    )\n\t                                )\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', 'data-direction': 'vertical', 'data-amount': '1', title: 'Expand vertical spacing' },\n\t                                React.createElement('i', { className: 'fa fa-arrows-v' })\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', 'data-direction': 'vertical', 'data-amount': '-1', title: 'Compress vertical spacing' },\n\t                                React.createElement('i', { className: 'fa  fa-compress fa-rotate-135' })\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', 'data-direction': 'horizontal', 'data-amount': '1', title: 'Expand horizonal spacing' },\n\t                                React.createElement('i', { className: 'fa fa-arrows-h' })\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', 'data-direction': 'horizontal', 'data-amount': '-1', title: 'Compress horizonal spacing' },\n\t                                React.createElement('i', { className: 'fa  fa-compress fa-rotate-45' })\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', id: 'sort_ascending', title: 'Sort deepest clades to the bototm' },\n\t                                React.createElement('i', { className: 'fa fa-sort-amount-asc' })\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', id: 'sort_descending', title: 'Sort deepsest clades to the top' },\n\t                                React.createElement('i', { className: 'fa fa-sort-amount-desc' })\n\t                            ),\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default btn-sm', id: 'sort_original', title: 'Restore original order' },\n\t                                React.createElement('i', { className: 'fa fa-sort' })\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            'div',\n\t                            { className: 'input-group-btn', 'data-toggle': 'buttons' },\n\t                            React.createElement(\n\t                                'label',\n\t                                { className: 'btn btn-default active btn-sm' },\n\t                                React.createElement('input', { type: 'radio', name: 'options', className: 'phylotree-layout-mode', 'data-mode': 'linear', autoComplete: 'off', checked: '', title: 'Layout left-to-right' }),\n\t                                'Linear'\n\t                            ),\n\t                            React.createElement(\n\t                                'label',\n\t                                { className: 'btn btn-default  btn-sm' },\n\t                                React.createElement('input', { type: 'radio', name: 'options', className: 'phylotree-layout-mode', 'data-mode': 'radial', autoComplete: 'off', title: 'Layout radially' }),\n\t                                ' Radial'\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            'div',\n\t                            { className: 'input-group-btn', 'data-toggle': 'buttons' },\n\t                            React.createElement(\n\t                                'label',\n\t                                { className: 'btn btn-default active btn-sm' },\n\t                                React.createElement('input', { type: 'radio', className: 'phylotree-align-toggler', 'data-align': 'left', name: 'options-align', autoComplete: 'off', checked: '', title: 'Align tips labels to branches' }),\n\t                                React.createElement('i', { className: 'fa fa-align-left' })\n\t                            ),\n\t                            React.createElement(\n\t                                'label',\n\t                                { className: 'btn btn-default btn-sm' },\n\t                                React.createElement('input', { type: 'radio', className: 'phylotree-align-toggler', 'data-align': 'right', name: 'options-align', autoComplete: 'off', title: 'Align tips labels to the edge of the plot' }),\n\t                                React.createElement('i', { className: 'fa fa-align-right' })\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            'div',\n\t                            { className: 'input-group-btn' },\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default dropdown-toggle', 'data-toggle': 'dropdown' },\n\t                                'Model',\n\t                                React.createElement('span', { className: 'caret' })\n\t                            ),\n\t                            React.createElement('ul', { className: 'dropdown-menu', id: 'hyphy-tree-model-list' })\n\t                        ),\n\t                        React.createElement('input', { type: 'text', className: 'form-control disabled', id: 'hyphy-tree-model', disabled: true }),\n\t                        React.createElement(\n\t                            'div',\n\t                            { id: 'hyphy-tree-highlight-div', className: 'input-group-btn' },\n\t                            React.createElement(\n\t                                'button',\n\t                                { type: 'button', className: 'btn btn-default dropdown-toggle', 'data-toggle': 'dropdown' },\n\t                                'Highlight branch set',\n\t                                React.createElement('span', { className: 'caret' })\n\t                            ),\n\t                            React.createElement('ul', { className: 'dropdown-menu', id: 'hyphy-tree-highlight-branches' })\n\t                        ),\n\t                        React.createElement('input', { type: 'text', className: 'form-control disabled', id: 'hyphy-tree-highlight', disabled: true }),\n\t                        React.createElement(\n\t                            'span',\n\t                            { className: 'input-group-addon' },\n\t                            'Use model branch lengths',\n\t                            React.createElement('input', { type: 'checkbox', id: 'hyphy-tree-branch-lengths', className: 'hyphy-tree-trigger' })\n\t                        ),\n\t                        React.createElement(\n\t                            'span',\n\t                            { className: 'input-group-addon' },\n\t                            'Hide legend',\n\t                            React.createElement('input', { type: 'checkbox', id: 'hyphy-tree-hide-legend', className: 'hyphy-tree-trigger' })\n\t                        ),\n\t                        React.createElement(\n\t                            'span',\n\t                            { className: 'input-group-addon' },\n\t                            'Grayscale',\n\t                            React.createElement('input', { type: 'checkbox', id: 'hyphy-tree-fill-color', className: 'hyphy-tree-trigger' })\n\t                        )\n\t                    )\n\t                )\n\t            ),\n\t            React.createElement(\n\t                'div',\n\t                { className: 'row' },\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'col-md-12' },\n\t                    React.createElement(\n\t                        'div',\n\t                        { className: 'row' },\n\t                        React.createElement('div', { id: 'tree_container', className: 'tree-widget' })\n\t                    )\n\t                )\n\t            )\n\t        );\n\t    }\n\t\n\t});\n\t\n\tfunction render_tree(json, element, settings) {\n\t    return React.render(React.createElement(Tree, { json: json, settings: settings }), $(element)[0]);\n\t}\n\t\n\tfunction rerender_tree(json, element, settings) {\n\t    $(element).empty();\n\t    return render_tree(json, settings);\n\t}\n\t\n\tmodule.exports.Tree = Tree;\n\tmodule.exports.render_tree = render_tree;\n\tmodule.exports.rerender_tree = rerender_tree;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40), __webpack_require__(43), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 207:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(_, d3, $) {'use strict';\n\t\n\tvar _prop_chart = __webpack_require__(208);\n\t\n\tvar React = __webpack_require__(46);\n\t\n\t\n\tvar BranchTable = React.createClass({\n\t  displayName: 'BranchTable',\n\t\n\t\n\t  getInitialState: function getInitialState() {\n\t\n\t    // add the following\n\t    var table_row_data = this.getBranchRows(this.props.tree, this.props.test_results, this.props.annotations),\n\t        table_columns = this.getBranchColumns(table_row_data),\n\t        initial_model_name = _.take(_.keys(this.props.annotations)),\n\t        initial_omegas = this.props.annotations ? this.props.annotations[initial_model_name][\"omegas\"] : null;\n\t\n\t    var distro_settings = {\n\t      dimensions: { width: 600, height: 400 },\n\t      margins: { 'left': 50, 'right': 15, 'bottom': 15, 'top': 35 },\n\t      legend: false,\n\t      domain: [0.00001, 10000],\n\t      do_log_plot: true,\n\t      k_p: null,\n\t      plot: null,\n\t      svg_id: \"prop-chart\"\n\t    };\n\t\n\t    return {\n\t      tree: this.props.tree,\n\t      test_results: this.props.test_results,\n\t      annotations: this.props.annotations,\n\t      table_row_data: table_row_data,\n\t      table_columns: table_columns,\n\t      current_model_name: initial_model_name,\n\t      current_omegas: initial_omegas,\n\t      distro_settings: distro_settings\n\t    };\n\t  },\n\t\n\t  getBranchLength: function getBranchLength(m) {\n\t\n\t    if (!this.state.tree) {\n\t      return '';\n\t    }\n\t\n\t    return d3.format(\".4f\")(this.state.tree.get_node_by_name(m).attribute);\n\t  },\n\t\n\t  getLRT: function getLRT(branch) {\n\t    var formatted = d3.format(\".4f\")(branch[\"LRT\"]);\n\t    if (formatted == \"NaN\") {\n\t      return branch[\"LRT\"];\n\t    } else {\n\t      return formatted;\n\t    }\n\t  },\n\t\n\t  getPVal: function getPVal(branch) {\n\t    return d3.format(\".4f\")(branch[\"p\"]);\n\t  },\n\t\n\t  getUncorrectedPVal: function getUncorrectedPVal(branch) {\n\t    return d3.format(\".4f\")(branch[\"uncorrected p\"]);\n\t  },\n\t\n\t  getOmegaDistribution: function getOmegaDistribution(m, annotations) {\n\t\n\t    if (!annotations) {\n\t      return '';\n\t    }\n\t\n\t    var omega_string = \"\";\n\t\n\t    for (var i in annotations[m][\"omegas\"]) {\n\t      var omega = parseFloat(annotations[m][\"omegas\"][i][\"omega\"]);\n\t      var formatted_omega = \"∞\";\n\t      if (omega < 1e+20) {\n\t        formatted_omega = d3.format(\".3r\")(omega);\n\t      }\n\t      omega_string += \"&omega;<sub>\" + (parseInt(i) + 1) + \"</sub> = \" + formatted_omega + \" (\" + d3.format(\".2p\")(annotations[m][\"omegas\"][i][\"prop\"]) + \")<br/>\";\n\t    }\n\t\n\t    return omega_string;\n\t  },\n\t\n\t  getBranchRows: function getBranchRows(tree, test_results, annotations) {\n\t\n\t    var self = this;\n\t\n\t    var table_row_data = [],\n\t        omega_format = d3.format(\".3r\"),\n\t        prop_format = d3.format(\".2p\");\n\t\n\t    for (var m in test_results) {\n\t\n\t      var branch_row = [];\n\t      var branch = test_results[m];\n\t\n\t      branch_row = [m, this.getBranchLength(m), this.getLRT(branch), this.getPVal(branch), this.getUncorrectedPVal(branch), this.getOmegaDistribution(m, annotations)];\n\t\n\t      table_row_data.push(branch_row);\n\t    }\n\t\n\t    table_row_data.sort(function (a, b) {\n\t\n\t      if (a[0] == b[0]) {\n\t        return a[1] < b[1] ? -1 : a[1] == b[1] ? 0 : 1;\n\t      }\n\t\n\t      return a[3] - b[3];\n\t    });\n\t\n\t    return table_row_data;\n\t  },\n\t\n\t  setEvents: function setEvents() {\n\t\n\t    var self = this;\n\t\n\t    if (self.state.annotations) {\n\t      var branch_table = d3.select('#table-branch-table').selectAll(\"tr\");\n\t\n\t      branch_table.on(\"click\", function (d) {\n\t        var label = d[0];\n\t        self.setState({\n\t          current_model_name: label,\n\t          current_omegas: self.state.annotations[label][\"omegas\"]\n\t        });\n\t      });\n\t    }\n\t  },\n\t\n\t  createDistroChart: function createDistroChart() {\n\t\n\t    var self = this;\n\t\n\t    this.settings = {\n\t      dimensions: { width: 600, height: 400 },\n\t      margins: { 'left': 50, 'right': 15, 'bottom': 15, 'top': 15 },\n\t      has_zeros: true,\n\t      legend_id: null,\n\t      do_log_plot: true,\n\t      k_p: null,\n\t      plot: null,\n\t      svg_id: \"prop-chart\"\n\t    };\n\t  },\n\t\n\t  getBranchColumns: function getBranchColumns(table_row_data) {\n\t\n\t    if (table_row_data.length <= 0) {\n\t      return null;\n\t    }\n\t\n\t    var name_header = '<th>Name</th>',\n\t        length_header = '<th><abbr title=\"Branch Length\">B</abbr></th>',\n\t        lrt_header = '<th><abbr title=\"Likelihood ratio test statistic\">LRT</abbr></th>',\n\t        pvalue_header = '<th>Test p-value</th>',\n\t        uncorrected_pvalue_header = '<th>Uncorrected p-value</th>',\n\t        omega_header = '<th>ω distribution over sites</th>';\n\t\n\t    // inspect table_row_data and return header\n\t    var all_columns = [name_header, length_header, lrt_header, pvalue_header, uncorrected_pvalue_header, omega_header];\n\t\n\t    // validate each table row with its associated header\n\t\n\t    // trim columns to length of table_row_data\n\t    var column_headers = _.take(all_columns, table_row_data[0].length);\n\t\n\t    // remove all columns that have 0, null, or undefined rows\n\t    var items = d3.transpose(table_row_data);\n\t\n\t    return column_headers;\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t    var table_row_data = this.getBranchRows(nextProps.tree, nextProps.test_results, nextProps.annotations),\n\t        table_columns = this.getBranchColumns(table_row_data),\n\t        initial_model_name = _.take(_.keys(nextProps.annotations)),\n\t        initial_omegas = nextProps.annotations ? nextProps.annotations[initial_model_name][\"omegas\"] : null;\n\t\n\t    var distro_settings = {\n\t      dimensions: { width: 600, height: 400 },\n\t      margins: { 'left': 50, 'right': 15, 'bottom': 15, 'top': 15 },\n\t      legend: false,\n\t      domain: [0.00001, 10000],\n\t      do_log_plot: true,\n\t      k_p: null,\n\t      plot: null,\n\t      svg_id: \"prop-chart\"\n\t    };\n\t\n\t    if (nextProps.test_results && nextProps.annotations) {\n\t      this.setState({\n\t        tree: nextProps.tree,\n\t        test_results: nextProps.test_results,\n\t        annotations: nextProps.annotations,\n\t        table_row_data: table_row_data,\n\t        table_columns: table_columns,\n\t        current_model_name: initial_model_name,\n\t        current_omegas: initial_omegas,\n\t        distro_settings: distro_settings\n\t      });\n\t    }\n\t  },\n\t\n\t  componentDidUpdate: function componentDidUpdate() {\n\t\n\t    var branch_columns = d3.select('#table-branch-header');\n\t    branch_columns = branch_columns.selectAll(\"th\").data(this.state.table_columns);\n\t    branch_columns.enter().append(\"th\");\n\t\n\t    branch_columns.html(function (d) {\n\t      return d;\n\t    });\n\t\n\t    var branch_rows = d3.select('#table-branch-table').selectAll(\"tr\").data(this.state.table_row_data);\n\t\n\t    branch_rows.enter().append('tr');\n\t    branch_rows.exit().remove();\n\t    branch_rows.style('font-weight', function (d) {\n\t      return d[3] <= 0.05 ? 'bold' : 'normal';\n\t    });\n\t\n\t    branch_rows = branch_rows.selectAll(\"td\").data(function (d) {\n\t      return d;\n\t    });\n\t\n\t    branch_rows.enter().append(\"td\");\n\t    branch_rows.html(function (d) {\n\t      return d;\n\t    });\n\t\n\t    this.createDistroChart();\n\t    this.setEvents();\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    var self = this;\n\t\n\t    return React.createElement(\n\t      'div',\n\t      { className: 'row' },\n\t      React.createElement(\n\t        'div',\n\t        { id: 'hyphy-branch-table', className: 'col-md-7' },\n\t        React.createElement(\n\t          'table',\n\t          { className: 'table table-hover table-condensed' },\n\t          React.createElement('thead', { id: 'table-branch-header' }),\n\t          React.createElement('tbody', { id: 'table-branch-table' })\n\t        )\n\t      ),\n\t      React.createElement(\n\t        'div',\n\t        { id: 'primary-omega-tag', className: 'col-md-5' },\n\t        React.createElement(_prop_chart.PropChart, { name: self.state.current_model_name, omegas: self.state.current_omegas,\n\t          settings: self.state.distro_settings })\n\t      )\n\t    );\n\t  }\n\t\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_branch_table(tree, test_results, annotations, element) {\n\t  React.render(React.createElement(BranchTable, { tree: tree, test_results: test_results, annotations: annotations }), $(element)[0]);\n\t}\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction rerender_branch_table(tree, test_results, annotations, element) {\n\t  $(element).empty();\n\t  render_branch_table(tree, test_results, annotations, element);\n\t}\n\t\n\tmodule.exports.BranchTable = BranchTable;\n\tmodule.exports.render_branch_table = render_branch_table;\n\tmodule.exports.rerender_branch_table = rerender_branch_table;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(43), __webpack_require__(40), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 208:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, _, $) {'use strict';\n\t\n\tvar React = __webpack_require__(46);\n\tvar datamonkey = __webpack_require__(39);\n\t\n\tvar PropChart = React.createClass({\n\t    displayName: 'PropChart',\n\t\n\t\n\t    getDefaultProps: function getDefaultProps() {\n\t        return {\n\t            svg_id: null,\n\t            dimensions: { width: 600, height: 400 },\n\t            margins: { 'left': 50, 'right': 15, 'bottom': 25, 'top': 35 },\n\t            has_zeros: false,\n\t            legend_id: null,\n\t            do_log_plot: true,\n\t            k_p: null,\n\t            plot: null\n\t        };\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t        return {\n\t            model_name: this.props.name,\n\t            omegas: this.props.omegas,\n\t            settings: this.props.settings\n\t        };\n\t    },\n\t\n\t    setEvents: function setEvents() {\n\t        var self = this;\n\t\n\t        d3.select(\"#\" + this.save_svg_id).on('click', function (e) {\n\t            datamonkey.save_image(\"svg\", \"#\" + self.svg_id);\n\t        });\n\t\n\t        d3.select(\"#\" + this.save_png_id).on('click', function (e) {\n\t            datamonkey.save_image(\"png\", \"#\" + self.svg_id);\n\t        });\n\t    },\n\t\n\t    initialize: function initialize() {\n\t\n\t        // clear svg\n\t        d3.select(\"#prop-chart\").html(\"\");\n\t\n\t        this.data_to_plot = this.state.omegas;\n\t\n\t        // Set props from settings\n\t        this.svg_id = this.props.settings.svg_id;\n\t        this.dimensions = this.props.settings.dimensions || this.props.dimensions;\n\t        this.margins = this.props.settings.margins || this.props.margins;\n\t        this.legend_id = this.props.settings.legend || this.props.legend_id;\n\t        this.do_log_plot = this.props.settings.log || this.props.do_log_plot;\n\t        this.k_p = this.props.settings.k || this.props.k_p;\n\t\n\t        var dimensions = this.props.dimensions;\n\t        var margins = this.props.margins;\n\t\n\t        if (this.props.do_log_plot) {\n\t            this.has_zeros = this.data_to_plot.some(function (d) {\n\t                return d.omega <= 0;\n\t            });\n\t        }\n\t\n\t        this.plot_width = dimensions[\"width\"] - margins['left'] - margins['right'], this.plot_height = dimensions[\"height\"] - margins['top'] - margins['bottom'];\n\t\n\t        var domain = this.state.settings[\"domain\"];\n\t\n\t        this.omega_scale = (this.do_log_plot ? this.has_zeros ? d3.scale.pow().exponent(0.2) : d3.scale.log() : d3.scale.linear()).range([0, this.plot_width]).domain(domain).nice();\n\t\n\t        this.proportion_scale = d3.scale.linear().range([this.plot_height, 0]).domain([-0.05, 1]).clamp(true);\n\t\n\t        // compute margins -- circle AREA is proportional to the relative weight\n\t        // maximum diameter is (height - text margin)\n\t        this.svg = d3.select(\"#\" + this.svg_id).attr(\"width\", dimensions.width + margins['left'] + margins['right']).attr(\"height\", dimensions.height + margins['top'] + margins['bottom']);\n\t\n\t        this.plot = this.svg.selectAll(\".container\");\n\t\n\t        this.svg.selectAll(\"defs\").remove();\n\t\n\t        this.svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"refX\", 10) /*must be smarter way to calculate shift*/\n\t        .attr(\"refY\", 4).attr(\"markerWidth\", 10).attr(\"markerHeight\", 8).attr(\"orient\", \"auto\").attr(\"stroke\", \"#000\").attr(\"fill\", \"#000\").append(\"path\").attr(\"d\", \"M 0,0 V8 L10,4 Z\");\n\t\n\t        if (this.plot.empty()) {\n\t            this.plot = this.svg.append(\"g\").attr(\"class\", \"container\");\n\t        }\n\t\n\t        this.plot.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \" , \" + this.margins[\"top\"] + \")\");\n\t        this.reference_omega_lines = this.plot.selectAll(\".hyphy-omega-line-reference\"), this.displacement_lines = this.plot.selectAll(\".hyphy-displacement-line\");\n\t\n\t        this.createNeutralLine();\n\t        this.createXAxis();\n\t        this.createYAxis();\n\t        this.setEvents();\n\t        this.createOmegaLine(this.state.omegas);\n\t        console.log('initialized everything');\n\t        //_.map(this.props.omegas, function(d) { return this.createOmegaLine(d[\"omega\"],d[\"prop\"]); });\n\t\n\t        console.log(this.svg);\n\t    },\n\t\n\t    createOmegaLine: function createOmegaLine(omegas) {\n\t\n\t        var self = this;\n\t        var data_to_plot = this.data_to_plot;\n\t\n\t        // generate color wheel from omegas\n\t        self.colores_g = _.shuffle([\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\", \"#e377c2\", \"#7f7f7f\", \"#bcbd22\", \"#17becf\"]);\n\t\n\t        // ** Omega Line (Red) ** //\n\t        var omega_lines = this.plot.selectAll(\".hyphy-omega-line\").data(omegas);\n\t        omega_lines.enter().append(\"line\");\n\t        omega_lines.exit().remove();\n\t\n\t        omega_lines.transition().attr(\"x1\", function (d) {\n\t            return self.omega_scale(d.omega);\n\t        }).attr(\"x2\", function (d) {\n\t            return self.omega_scale(d.omega);\n\t        }).attr(\"y1\", function (d) {\n\t            return self.proportion_scale(-0.05);\n\t        }).attr(\"y2\", function (d) {\n\t            return self.proportion_scale(d.prop);\n\t        }).style(\"stroke\", function (d) {\n\t            var color = _.take(self.colores_g);\n\t            self.colores_g = _.rest(self.colores_g);\n\t            return color;\n\t        }).attr(\"class\", \"hyphy-omega-line\");\n\t    },\n\t\n\t    createNeutralLine: function createNeutralLine() {\n\t        var self = this;\n\t\n\t        // ** Neutral Line (Blue) ** //\n\t        var neutral_line = this.plot.selectAll(\".hyphy-neutral-line\").data([1]);\n\t        neutral_line.enter().append(\"line\").attr(\"class\", \"hyphy-neutral-line\");\n\t        neutral_line.exit().remove();\n\t        neutral_line.transition().attr(\"x1\", function (d) {\n\t            return self.omega_scale(d);\n\t        }).attr(\"x2\", function (d) {\n\t            return self.omega_scale(d);\n\t        }).attr(\"y1\", 0).attr(\"y2\", this.plot_height);\n\t    },\n\t    createXAxis: function createXAxis() {\n\t\n\t        // *** X-AXIS *** //\n\t        var xAxis = d3.svg.axis().scale(this.omega_scale).orient(\"bottom\");\n\t\n\t        if (this.do_log_plot) {\n\t            xAxis.ticks(10, this.has_zeros ? \".2r\" : \".1r\");\n\t        }\n\t\n\t        var x_axis = this.svg.selectAll(\".x.axis\");\n\t        var x_label;\n\t\n\t        if (x_axis.empty()) {\n\t            x_axis = this.svg.append(\"g\").attr(\"class\", \"x hyphy-axis\");\n\t\n\t            x_label = x_axis.append(\"g\").attr(\"class\", \"hyphy-axis-label x-label\");\n\t        } else {\n\t            x_label = x_axis.select(\".axis-label.x-label\");\n\t        }\n\t\n\t        x_axis.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \",\" + (this.plot_height + this.margins[\"top\"]) + \")\").call(xAxis);\n\t        x_label = x_label.attr(\"transform\", \"translate(\" + this.plot_width + \",\" + this.margins[\"bottom\"] + \")\").selectAll(\"text\").data(['\\u03C9']);\n\t        x_label.enter().append(\"text\");\n\t        x_label.text(function (d) {\n\t            return d;\n\t        }).style(\"text-anchor\", \"end\").attr(\"dy\", \"0.0em\");\n\t    },\n\t    createYAxis: function createYAxis() {\n\t\n\t        // *** Y-AXIS *** //\n\t        var yAxis = d3.svg.axis().scale(this.proportion_scale).orient(\"left\").ticks(10, \".1p\");\n\t\n\t        var y_axis = this.svg.selectAll(\".y.hyphy-axis\");\n\t        var y_label;\n\t\n\t        if (y_axis.empty()) {\n\t            y_axis = this.svg.append(\"g\").attr(\"class\", \"y hyphy-axis\");\n\t            y_label = y_axis.append(\"g\").attr(\"class\", \"hyphy-axis-label y-label\");\n\t        } else {\n\t            y_label = y_axis.select(\".hyphy-axis-label.y-label\");\n\t        }\n\t        y_axis.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \",\" + this.margins[\"top\"] + \")\").call(yAxis);\n\t        y_label = y_label.attr(\"transform\", \"translate(\" + -this.margins[\"left\"] + \",\" + 0 + \")\").selectAll(\"text\").data([\"Proportion of sites\"]);\n\t        y_label.enter().append(\"text\");\n\t        y_label.text(function (d) {\n\t            return d;\n\t        }).style(\"text-anchor\", \"start\").attr(\"dy\", \"-1em\");\n\t    },\n\t\n\t    componentDidMount: function componentDidMount() {\n\t        try {\n\t            this.initialize();\n\t        } catch (e) {};\n\t    },\n\t\n\t    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t        this.setState({\n\t            model_name: nextProps.name,\n\t            omegas: nextProps.omegas\n\t        });\n\t    },\n\t\n\t    componentDidUpdate: function componentDidUpdate() {\n\t        try {\n\t            this.initialize();\n\t        } catch (e) {};\n\t    },\n\t\n\t    render: function render() {\n\t\n\t        this.save_svg_id = \"export-\" + this.svg_id + \"-svg\";\n\t        this.save_png_id = \"export-\" + this.svg_id + \"-png\";\n\t\n\t        return React.createElement(\n\t            'div',\n\t            { className: 'panel panel-default', id: this.state.model_name },\n\t            React.createElement(\n\t                'div',\n\t                { className: 'panel-heading' },\n\t                React.createElement(\n\t                    'h3',\n\t                    { className: 'panel-title' },\n\t                    React.createElement(\n\t                        'strong',\n\t                        null,\n\t                        this.state.model_name\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    'p',\n\t                    null,\n\t                    '\\u03C9 distribution'\n\t                ),\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'btn-group' },\n\t                    React.createElement(\n\t                        'button',\n\t                        { id: this.save_svg_id, type: 'button', className: 'btn btn-default btn-sm' },\n\t                        React.createElement('span', { className: 'glyphicon glyphicon-floppy-save' }),\n\t                        ' SVG'\n\t                    ),\n\t                    React.createElement(\n\t                        'button',\n\t                        { id: this.save_png_id, type: 'button', className: 'btn btn-default btn-sm' },\n\t                        React.createElement('span', { className: 'glyphicon glyphicon-floppy-save' }),\n\t                        ' PNG'\n\t                    )\n\t                )\n\t            ),\n\t            React.createElement(\n\t                'div',\n\t                { className: 'panel-body' },\n\t                React.createElement('svg', { id: this.svg_id })\n\t            )\n\t        );\n\t    }\n\t});\n\t\n\tfunction render_prop_chart(model_name, omegas, settings) {\n\t    return React.render(React.createElement(PropChart, { name: model_name, omegas: omegas, settings: settings }), document.getElementById(\"primary-omega-tag\"));\n\t}\n\t\n\tfunction rerender_prop_chart(model_name, omeags, settings) {\n\t\n\t    $(\"#primary-omega-tag\").empty();\n\t    return render_prop_chart(model_name, omeags, settings);\n\t}\n\t\n\tmodule.exports.render_prop_chart = render_prop_chart;\n\tmodule.exports.rerender_prop_chart = rerender_prop_chart;\n\tmodule.exports.PropChart = PropChart;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40), __webpack_require__(43), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 209:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(48);\n\n\n/***/ },\n\n/***/ 210:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, $) {'use strict';\n\t\n\t__webpack_require__(211);\n\t\n\tvar crossfilter = __webpack_require__(213),\n\t    dc = __webpack_require__(216),\n\t    datamonkey = __webpack_require__(39);\n\t\n\tfunction busted_render_summary(json) {\n\t\n\t    var fit_format = d3.format(\".2f\"),\n\t        prop_format = d3.format(\".2p\"),\n\t        omega_format = d3.format(\".3r\");\n\t\n\t    var format_run_time = function format_run_time(seconds) {\n\t\n\t        var duration_string = \"\";\n\t        seconds = parseFloat(seconds);\n\t        var split_array = [Math.floor(seconds / (24 * 3600)), Math.floor(seconds / 3600) % 24, Math.floor(seconds / 60) % 60, seconds % 60],\n\t            quals = [\"d.\", \"hrs.\", \"min.\", \"sec.\"];\n\t\n\t        split_array.forEach(function (d, i) {\n\t            if (d) {\n\t                duration_string += \" \" + d + \" \" + quals[i];\n\t            }\n\t        });\n\t\n\t        return duration_string;\n\t    };\n\t\n\t    var branch_p_values = {};\n\t\n\t    var rate_distro_by_branch = {},\n\t        branch_count = 1,\n\t        selected_count = 0,\n\t        tested_count = 0;\n\t\n\t    var for_branch_table = [];\n\t\n\t    //var tree_info = render_bs_rel_tree (json, \"Unconstrained model\");\n\t\n\t    //var branch_lengths   = tree_info[0],\n\t    //    tested_branches  = {};\n\t\n\t    for (var p in json[\"test results\"]) {\n\t        branch_p_values[p] = json[\"test results\"][\"p\"];\n\t        if (branch_p_values[p] <= 0.05) {\n\t            selected_count++;\n\t        }\n\t    }\n\t\n\t    var fitted_distributions = json[\"fits\"][\"Unconstrained model\"][\"rate distributions\"];\n\t\n\t    for (var b in fitted_distributions) {\n\t        //for_branch_table.push ([b + (tested_branches[b] ? \"\" : \"\"),branch_lengths[b],0,0,0]);\n\t        try {\n\t            for_branch_table[branch_count][2] = json[\"test results\"][b][\"LRT\"];\n\t            for_branch_table[branch_count][3] = json[\"test results\"][b][\"p\"];\n\t            for_branch_table[branch_count][4] = json[\"test results\"][b][\"uncorrected p\"];\n\t        } catch (e) {}\n\t\n\t        var rateD = fitted_distributions[b];\n\t        rate_distro_by_branch[b] = rateD;\n\t        //for_branch_table[branch_count].push (branch_omegas[b]['distro']);\n\t        branch_count += 1;\n\t    }\n\t\n\t    // render summary data\n\t    var total_tree_length = d3.format(\"g\")(json[\"fits\"][\"Unconstrained model\"][\"tree length\"]);\n\t\n\t    for_branch_table = for_branch_table.sort(function (a, b) {\n\t        return a[4] - b[4];\n\t    });\n\t\n\t    d3.select('#summary-test-result').text(json['test results']['p'] <= 0.05 ? \"evidence\" : \"no evidence\");\n\t    d3.select('#summary-test-pvalue').text(d3.format(\".3f\")(json['test results']['p']));\n\t    d3.select('#summary-pmid').text(\"PubMed ID \" + json['PMID']).attr(\"href\", \"http://www.ncbi.nlm.nih.gov/pubmed/\" + json['PMID']);\n\t    d3.select('#summary-total-runtime').text(format_run_time(json['timers']['overall']));\n\t    d3.select('#summary-total-branches').text(branch_count);\n\t    d3.select('#summary-tested-branches').text(tested_count);\n\t    d3.select('#summary-selected-branches').text(selected_count);\n\t\n\t    has_background = json['background'];\n\t\n\t    var model_rows = [[], []];\n\t\n\t    if (has_background) {\n\t        model_rows.push([]);\n\t    }\n\t\n\t    for (k = 0; k < 2 + has_background; k++) {\n\t\n\t        var access_key,\n\t            secondary_key,\n\t            only_distro = 0;\n\t\n\t        if (k === 0) {\n\t\n\t            access_key = 'Unconstrained model';\n\t            secondary_key = 'FG';\n\t            model_rows[k].push('Unconstrained Model');\n\t            only_distro = 0;\n\t        } else {\n\t\n\t            if (has_background && k == 1) {\n\t                model_rows[k].push('(background branches)');\n\t                secondary_key = 'BG';\n\t                only_distro = 1;\n\t            } else {\n\t                access_key = 'Constrained model';\n\t                if (!(access_key in json['fits'])) {\n\t                    break;\n\t                }\n\t                model_rows[k].push('Constrained Model');\n\t                secondary_key = 'FG';\n\t                only_distro = 0;\n\t            }\n\t        }\n\t\n\t        try {\n\t            model_rows[k].push(only_distro ? '' : fit_format(json['fits'][access_key]['log-likelihood']));\n\t            model_rows[k].push(only_distro ? '' : json['fits'][access_key]['parameters']);\n\t            model_rows[k].push(only_distro ? '' : fit_format(json['fits'][access_key]['AIC-c']));\n\t            model_rows[k].push(only_distro ? '' : format_run_time(json['fits'][access_key]['runtime']));\n\t            model_rows[k].push(only_distro ? '' : fit_format(json['fits'][access_key]['tree length']));\n\t\n\t            for (j = 0; j < 3; j++) {\n\t                model_rows[k].push(omega_format(json['fits'][access_key]['rate distributions'][secondary_key][j][0]) + \" (\" + prop_format(json['fits'][access_key]['rate distributions'][secondary_key][j][1]) + \")\");\n\t            }\n\t        } catch (e) {\n\t            datamonkey.errorModal(e);\n\t        }\n\t    }\n\t\n\t    model_rows = d3.select('#summary-model-table').selectAll(\"tr\").data(model_rows);\n\t    model_rows.enter().append('tr');\n\t    model_rows.exit().remove();\n\t    model_rows = model_rows.selectAll(\"td\").data(function (d) {\n\t        return d;\n\t    });\n\t    model_rows.enter().append(\"td\");\n\t    model_rows.html(function (d) {\n\t        return d;\n\t    });\n\t}\n\t\n\tfunction busted_render_histogram(c, json) {\n\t\n\t    var self = this;\n\t\n\t    // Massage data for use with crossfilter\n\t    if (d3.keys(json[\"evidence ratios\"]).length === 0) {\n\t        // no evidence ratios computed\n\t        d3.selectAll(c).style(\"display\", \"none\");\n\t        d3.selectAll(\".dc-data-table\").style(\"display\", \"none\");\n\t        //d3.selectAll ('[id^=\"export\"]').style (\"display\", \"none\");\n\t        d3.selectAll(\"#er-thresholds\").style(\"display\", \"none\");\n\t        d3.selectAll(\"#apply-thresholds\").style(\"display\", \"none\");\n\t        return;\n\t    } else {\n\t        d3.selectAll(c).style(\"display\", \"block\");\n\t        d3.selectAll(\".dc-data-table\").style(\"display\", \"table\");\n\t        //d3.selectAll ('[id^=\"export\"]').style (\"display\", \"block\");\n\t        d3.selectAll(\"#er-thresholds\").style(\"display\", \"block\");\n\t        d3.selectAll(\"#apply-thresholds\").style(\"display\", \"block\");\n\t    }\n\t\n\t    var erc = json[\"evidence ratios\"][\"constrained\"][0];\n\t    erc = erc.map(function (d) {\n\t        return Math.log(d);\n\t    });\n\t\n\t    var test_set = json[\"test set\"].split(\",\");\n\t    var model_results = [];\n\t\n\t    erc.forEach(function (elem, i) {\n\t        model_results.push({\n\t            \"site_index\": i + 1,\n\t            \"unconstrained\": json[\"profiles\"][\"unconstrained\"][0][i],\n\t            \"constrained\": json[\"profiles\"][\"constrained\"][0][i],\n\t            \"optimized_null\": json[\"profiles\"][\"optimized null\"][0][i],\n\t            \"er_constrained\": Math.log(json[\"evidence ratios\"][\"constrained\"][0][i]),\n\t            \"er_optimized_null\": Math.log(json[\"evidence ratios\"][\"optimized null\"][0][i])\n\t        });\n\t    });\n\t\n\t    var data = crossfilter(model_results);\n\t    var site_index = data.dimension(function (d) {\n\t        return d[\"site_index\"];\n\t    });\n\t\n\t    var sitesByConstrained = site_index.group().reduce(function (p, v) {\n\t        p.constrained_evidence += +v[\"er_constrained\"];\n\t        p.optimized_null_evidence += +v[\"er_optimized_null\"];\n\t        return p;\n\t    }, function (p, v) {\n\t        p.constrained_evidence -= +v[\"er_constrained\"];\n\t        p.optimized_null_evidence -= +v[\"er_optimized_null\"];\n\t        return p;\n\t    }, function () {\n\t        return { constrained_evidence: 0, optimized_null_evidence: 0 };\n\t    });\n\t\n\t    var sitesByON = site_index.group().reduce(function (p, v) {\n\t        p.optimized_null_evidence += +v[\"er_optimized_null\"];\n\t        return p;\n\t    }, function (p, v) {\n\t        p.optimized_null_evidence -= +v[\"er_optimized_null\"];\n\t        return p;\n\t    }, function () {\n\t        return { optimized_null_evidence: 0 };\n\t    });\n\t\n\t    // Set up new crossfilter dimensions to slice the table by constrained or ON evidence ratio.\n\t    var er_constrained = data.dimension(function (d) {\n\t        return d[\"er_constrained\"];\n\t    });\n\t    var er_optimized_null = data.dimension(function (d) {\n\t        return d[\"er_optimized_null\"];\n\t    });\n\t    self.er_constrained = er_constrained;\n\t    self.er_optimized_null = er_optimized_null;\n\t\n\t    var composite = dc.compositeChart(c);\n\t\n\t    composite.width($(window).width()).height(300).dimension(site_index).x(d3.scale.linear().domain([1, erc.length])).yAxisLabel(\"2 * Ln Evidence Ratio\").xAxisLabel(\"Site Location\").legend(dc.legend().x($(window).width() - 150).y(20).itemHeight(13).gap(5)).renderHorizontalGridLines(true).compose([dc.lineChart(composite).group(sitesByConstrained, \"Constrained\").colors(d3.scale.ordinal().range(['green'])).valueAccessor(function (d) {\n\t        return 2 * d.value.constrained_evidence;\n\t    }).keyAccessor(function (d) {\n\t        return d.key;\n\t    }), dc.lineChart(composite).group(sitesByON, \"Optimized Null\").valueAccessor(function (d) {\n\t        return 2 * d.value.optimized_null_evidence;\n\t    }).keyAccessor(function (d) {\n\t        return d.key;\n\t    }).colors(d3.scale.ordinal().range(['red']))]);\n\t\n\t    composite.xAxis().ticks(50);\n\t\n\t    var numberFormat = d3.format(\".4f\");\n\t\n\t    // Render the table\n\t    dc.dataTable(\".dc-data-table\").dimension(site_index)\n\t    // data table does not use crossfilter group but rather a closure\n\t    // as a grouping function\n\t    .group(function (d) {\n\t        return site_index.bottom(1)[0].site_index + \" - \" + site_index.top(1)[0].site_index;\n\t    }).size(site_index.groupAll().reduceCount().value()) // (optional) max number of records to be shown, :default = 25\n\t    // dynamic columns creation using an array of closures\n\t    .columns([function (d) {\n\t        return d.site_index;\n\t    }, function (d) {\n\t        return numberFormat(d[\"unconstrained\"]);\n\t    }, function (d) {\n\t        return numberFormat(d[\"constrained\"]);\n\t    }, function (d) {\n\t        return numberFormat(d[\"optimized_null\"]);\n\t    }, function (d) {\n\t        return numberFormat(d[\"er_constrained\"]);\n\t    }, function (d) {\n\t        return numberFormat(d[\"er_optimized_null\"]);\n\t    }])\n\t\n\t    // (optional) sort using the given field, :default = function(d){return d;}\n\t    .sortBy(function (d) {\n\t        return d.site_index;\n\t    })\n\t\n\t    // (optional) sort order, :default ascending\n\t    .order(d3.ascending)\n\t\n\t    // (optional) custom renderlet to post-process chart using D3\n\t    .renderlet(function (table) {\n\t        table.selectAll(\".dc-table-group\").classed(\"info\", true);\n\t    });\n\t\n\t    $(\"#export-csv\").on('click', function (e) {\n\t        datamonkey.export_csv_button(site_index.top(Infinity));\n\t    });\n\t\n\t    $(\"#export-chart-svg\").on('click', function (e) {\n\t        // class manipulation for the image to display correctly\n\t        $(\"#chart-id\").find(\"svg\")[0].setAttribute(\"class\", \"dc-chart\");\n\t        datamonkey.save_image(\"svg\", \"#chart-id\");\n\t        $(\"#chart-id\").find(\"svg\")[0].setAttribute(\"class\", \"\");\n\t    });\n\t\n\t    $(\"#export-chart-png\").on('click', function (e) {\n\t        // class manipulation for the image to display correctly\n\t        $(\"#chart-id\").find(\"svg\")[0].setAttribute(\"class\", \"dc-chart\");\n\t        datamonkey.save_image(\"png\", \"#chart-id\");\n\t        $(\"#chart-id\").find(\"svg\")[0].setAttribute(\"class\", \"\");\n\t    });\n\t    $(\"#apply-thresholds\").on('click', function (e) {\n\t        var erConstrainedThreshold = document.getElementById(\"er-constrained-threshold\").value;\n\t        var erOptimizedNullThreshold = document.getElementById(\"er-optimized-null-threshold\").value;\n\t        self.er_constrained.filter(function (d) {\n\t            return d >= erConstrainedThreshold;\n\t        });\n\t        self.er_optimized_null.filter(function (d) {\n\t            return d >= erOptimizedNullThreshold;\n\t        });\n\t        dc.renderAll();\n\t    });\n\t\n\t    dc.renderAll();\n\t}\n\t\n\tmodule.exports.render_summary = busted_render_summary;\n\tmodule.exports.render_histogram = busted_render_histogram;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 211:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n\n/***/ 217:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n\n/***/ 219:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, _, $) {\"use strict\";\n\t\n\tvar _tree = __webpack_require__(205);\n\t\n\tvar _model_fits = __webpack_require__(203);\n\t\n\tvar _tree_summary = __webpack_require__(204);\n\t\n\tvar _prop_chart = __webpack_require__(208);\n\t\n\t__webpack_require__(206);\n\t__webpack_require__(217);\n\t\n\tvar React = __webpack_require__(46),\n\t    ReactDOM = __webpack_require__(209);\n\t\n\tvar datamonkey = __webpack_require__(39),\n\t    busted = __webpack_require__(210);\n\t\n\tvar BUSTED = React.createClass({\n\t  displayName: \"BUSTED\",\n\t\n\t\n\t  float_format: d3.format(\".2f\"),\n\t  p_value_format: d3.format(\".4f\"),\n\t  fit_format: d3.format(\".2f\"),\n\t\n\t  loadFromServer: function loadFromServer() {\n\t\n\t    var self = this;\n\t\n\t    d3.json(this.props.url, function (data) {\n\t\n\t      data[\"fits\"][\"Unconstrained model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Unconstrained model\");\n\t      data[\"fits\"][\"Constrained model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Constrained model\");\n\t\n\t      // rename rate distributions\n\t      data[\"fits\"][\"Unconstrained model\"][\"rate-distributions\"] = data[\"fits\"][\"Unconstrained model\"][\"rate distributions\"];\n\t      data[\"fits\"][\"Constrained model\"][\"rate-distributions\"] = data[\"fits\"][\"Constrained model\"][\"rate distributions\"];\n\t\n\t      // set display order\n\t      data[\"fits\"][\"Unconstrained model\"][\"display-order\"] = 0;\n\t      data[\"fits\"][\"Constrained model\"][\"display-order\"] = 1;\n\t\n\t      var json = data,\n\t          pmid = \"25701167\",\n\t          pmid_text = \"PubMed ID \" + pmid,\n\t          pmid_href = \"http://www.ncbi.nlm.nih.gov/pubmed/\" + pmid,\n\t          p = json[\"test results\"][\"p\"],\n\t          test_result = p <= 0.05 ? \"evidence\" : \"no evidence\";\n\t\n\t      var fg_rate = json[\"fits\"][\"Unconstrained model\"][\"rate distributions\"][\"FG\"];\n\t      var mapped_omegas = { \"omegas\": _.map(fg_rate, function (d) {\n\t          return _.object([\"omega\", \"prop\"], d);\n\t        }) };\n\t\n\t      self.setState({\n\t        p: p,\n\t        test_result: test_result,\n\t        json: json,\n\t        omegas: mapped_omegas[\"omegas\"],\n\t        pmid_text: pmid_text,\n\t        pmid_href: pmid_href\n\t      });\n\t    });\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t\n\t    var edgeColorizer = function edgeColorizer(element, data) {\n\t\n\t      var is_foreground = data.target.annotations.is_foreground,\n\t          color_fill = this.options()[\"color-fill\"] ? \"black\" : \"red\";\n\t\n\t      element.style('stroke', is_foreground ? color_fill : 'gray').style('stroke-linejoin', 'round').style('stroke-linejoin', 'round').style('stroke-linecap', 'round');\n\t    };\n\t\n\t    var tree_settings = {\n\t      'omegaPlot': {},\n\t      'tree-options': {\n\t        /* value arrays have the following meaning\n\t            [0] - the value of the attribute\n\t            [1] - does the change in attribute value trigger tree re-layout?\n\t        */\n\t        'hyphy-tree-model': [\"Unconstrained model\", true],\n\t        'hyphy-tree-highlight': [\"RELAX.test\", false],\n\t        'hyphy-tree-branch-lengths': [true, true],\n\t        'hyphy-tree-hide-legend': [true, false],\n\t        'hyphy-tree-fill-color': [true, false]\n\t      },\n\t      'hyphy-tree-legend-type': 'discrete',\n\t      'suppress-tree-render': false,\n\t      'chart-append-html': true,\n\t      'edgeColorizer': edgeColorizer\n\t    };\n\t\n\t    var distro_settings = {\n\t      dimensions: { width: 600, height: 400 },\n\t      margins: { 'left': 50, 'right': 15, 'bottom': 35, 'top': 35 },\n\t      legend: false,\n\t      domain: [0.00001, 100],\n\t      do_log_plot: true,\n\t      k_p: null,\n\t      plot: null,\n\t      svg_id: \"prop-chart\"\n\t    };\n\t\n\t    return {\n\t      distro_settings: distro_settings,\n\t      tree_settings: tree_settings,\n\t      constrained_threshold: \"Infinity\",\n\t      null_threshold: \"-Infinity\",\n\t      model_name: \"FG\"\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      p: null,\n\t      test_result: null,\n\t      json: null,\n\t      omegas: null,\n\t      pmid_text: null,\n\t      pmid_href: null\n\t    };\n\t  },\n\t\n\t  setEvents: function setEvents() {\n\t\n\t    var self = this;\n\t\n\t    $(\"#json_file\").on(\"change\", function (e) {\n\t      var files = e.target.files; // FileList object\n\t      if (files.length == 1) {\n\t        var f = files[0];\n\t        var reader = new FileReader();\n\t        reader.onload = function (theFile) {\n\t          return function (e) {\n\t\n\t            var data = JSON.parse(this.result);\n\t            data[\"fits\"][\"Unconstrained model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Unconstrained model\");\n\t            data[\"fits\"][\"Constrained model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Constrained model\");\n\t\n\t            // rename rate distributions\n\t            data[\"fits\"][\"Unconstrained model\"][\"rate-distributions\"] = data[\"fits\"][\"Unconstrained model\"][\"rate distributions\"];\n\t            data[\"fits\"][\"Constrained model\"][\"rate-distributions\"] = data[\"fits\"][\"Constrained model\"][\"rate distributions\"];\n\t\n\t            var json = data,\n\t                pmid = \"25701167\",\n\t                pmid_text = \"PubMed ID \" + pmid,\n\t                pmid_href = \"http://www.ncbi.nlm.nih.gov/pubmed/\" + pmid,\n\t                p = json[\"test results\"][\"p\"],\n\t                test_result = p <= 0.05 ? \"evidence\" : \"no evidence\";\n\t\n\t            var fg_rate = json[\"fits\"][\"Unconstrained model\"][\"rate distributions\"][\"FG\"];\n\t            var mapped_omegas = { \"omegas\": _.map(fg_rate, function (d) {\n\t                return _.object([\"omega\", \"prop\"], d);\n\t              }) };\n\t\n\t            self.setState({\n\t              p: p,\n\t              test_result: test_result,\n\t              json: json,\n\t              omegas: mapped_omegas[\"omegas\"],\n\t              pmid_text: pmid_text,\n\t              pmid_href: pmid_href\n\t            });\n\t          };\n\t        }(f);\n\t        reader.readAsText(f);\n\t      }\n\t      $(\"#datamonkey-absrel-toggle-here\").dropdown(\"toggle\");\n\t      e.preventDefault();\n\t    });\n\t  },\n\t\n\t  formatBranchAnnotations: function formatBranchAnnotations(json, key) {\n\t\n\t    // attach is_foreground to branch annotations\n\t    var foreground = json[\"test set\"].split(\",\");\n\t\n\t    var tree = d3.layout.phylotree(),\n\t        nodes = tree(json[\"fits\"][key][\"tree string\"]).get_nodes(),\n\t        node_names = _.map(nodes, function (d) {\n\t      return d.name;\n\t    });\n\t\n\t    // Iterate over objects\n\t    var branch_annotations = _.object(node_names, _.map(node_names, function (d) {\n\t      return { is_foreground: _.indexOf(foreground, d) > -1 };\n\t    }));\n\t\n\t    return branch_annotations;\n\t  },\n\t\n\t  initialize: function initialize() {\n\t\n\t    var json = this.state.json;\n\t\n\t    if (!json) {\n\t      return;\n\t    }\n\t\n\t    busted.render_histogram(\"#chart-id\", json);\n\t\n\t    // delete existing tree\n\t    d3.select('#tree_container').select(\"svg\").remove();\n\t\n\t    var fg_rate = json[\"fits\"][\"Unconstrained model\"][\"rate distributions\"][\"FG\"],\n\t        omegas = fg_rate.map(function (r) {\n\t      return r[0];\n\t    }),\n\t        weights = fg_rate.map(function (r) {\n\t      return r[1];\n\t    });\n\t\n\t    var dsettings = {\n\t      'log': true,\n\t      'legend': false,\n\t      'domain': [0.00001, 20],\n\t      'dimensions': { 'width': 325, 'height': 300 }\n\t    };\n\t\n\t    $(\"#export-dist-svg\").on('click', function (e) {\n\t      datamonkey.save_image(\"svg\", \"#primary-omega-dist\");\n\t    });\n\t\n\t    $(\"#export-dist-png\").on('click', function (e) {\n\t      datamonkey.save_image(\"png\", \"#primary-omega-dist\");\n\t    });\n\t  },\n\t\n\t  componentWillMount: function componentWillMount() {\n\t    this.loadFromServer();\n\t    this.setEvents();\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    var self = this;\n\t    self.initialize();\n\t\n\t    return React.createElement(\n\t      \"div\",\n\t      { className: \"tab-content\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"tab-pane active\", id: \"summary_tab\" },\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\", styleName: \"margin-top: 5px\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-md-12\" },\n\t            React.createElement(\n\t              \"ul\",\n\t              { className: \"list-group\" },\n\t              React.createElement(\n\t                \"li\",\n\t                { className: \"list-group-item list-group-item-info\" },\n\t                React.createElement(\n\t                  \"h3\",\n\t                  { className: \"list-group-item-heading\" },\n\t                  React.createElement(\"i\", { className: \"fa fa-list\", styleName: \"margin-right: 10px\" }),\n\t                  React.createElement(\n\t                    \"span\",\n\t                    { id: \"summary-method-name\" },\n\t                    \"BUSTED\"\n\t                  ),\n\t                  \" summary\"\n\t                ),\n\t                \"There is \",\n\t                React.createElement(\n\t                  \"strong\",\n\t                  null,\n\t                  this.state.test_result\n\t                ),\n\t                \" of episodic diversifying selection, with LRT p-value of \",\n\t                this.state.p,\n\t                \".\",\n\t                React.createElement(\n\t                  \"p\",\n\t                  null,\n\t                  React.createElement(\n\t                    \"small\",\n\t                    null,\n\t                    \"Please cite \",\n\t                    React.createElement(\n\t                      \"a\",\n\t                      { href: this.state.pmid_href, id: \"summary-pmid\" },\n\t                      this.state.pmid_text\n\t                    ),\n\t                    \" if you use this result in a publication, presentation, or other scientific work.\"\n\t                  )\n\t                )\n\t              )\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { id: \"hyphy-model-fits\", className: \"col-lg-12\" },\n\t            React.createElement(_model_fits.ModelFits, { json: self.state.json })\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"button\",\n\t          { id: \"export-chart-svg\", type: \"button\", className: \"btn btn-default btn-sm pull-right btn-export\" },\n\t          React.createElement(\"span\", { className: \"glyphicon glyphicon-floppy-save\" }),\n\t          \" Export Chart to SVG\"\n\t        ),\n\t        React.createElement(\n\t          \"button\",\n\t          { id: \"export-chart-png\", type: \"button\", className: \"btn btn-default btn-sm pull-right btn-export\" },\n\t          React.createElement(\"span\", { className: \"glyphicon glyphicon-floppy-save\" }),\n\t          \" Export Chart to PNG\"\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row hyphy-busted-site-table\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { id: \"chart-id\", className: \"col-lg-8\" },\n\t            React.createElement(\n\t              \"strong\",\n\t              null,\n\t              \"Model Evidence Ratios Per Site\"\n\t            ),\n\t            React.createElement(\"div\", { className: \"clearfix\" })\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row site-table\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-lg-12\" },\n\t            React.createElement(\n\t              \"form\",\n\t              { id: \"er-thresholds\" },\n\t              React.createElement(\n\t                \"div\",\n\t                { className: \"form-group\" },\n\t                React.createElement(\n\t                  \"label\",\n\t                  { \"for\": \"er-constrained-threshold\" },\n\t                  \"Constrained Evidence Ratio Threshold:\"\n\t                ),\n\t                React.createElement(\"input\", { type: \"text\", className: \"form-control\", id: \"er-constrained-threshold\", defaultValue: this.props.constrained_threshold })\n\t              ),\n\t              React.createElement(\n\t                \"div\",\n\t                { className: \"form-group\" },\n\t                React.createElement(\n\t                  \"label\",\n\t                  { \"for\": \"er-optimized-null-threshold\" },\n\t                  \"Optimized Null Evidence Ratio Threshold:\"\n\t                ),\n\t                React.createElement(\"input\", { type: \"text\", className: \"form-control\", id: \"er-optimized-null-threshold\", defaultValue: this.props.null_threshold })\n\t              )\n\t            ),\n\t            React.createElement(\n\t              \"button\",\n\t              { id: \"export-csv\", type: \"button\", className: \"btn btn-default btn-sm pull-right hyphy-busted-btn-export\" },\n\t              React.createElement(\"span\", { className: \"glyphicon glyphicon-floppy-save\" }),\n\t              \" Export Table to CSV\"\n\t            ),\n\t            React.createElement(\n\t              \"button\",\n\t              { id: \"apply-thresholds\", type: \"button\", className: \"btn btn-default btn-sm pull-right hyphy-busted-btn-export\" },\n\t              \"Apply Thresholds\"\n\t            ),\n\t            React.createElement(\n\t              \"table\",\n\t              { id: \"sites\", className: \"table sites dc-data-table\" },\n\t              React.createElement(\n\t                \"thead\",\n\t                null,\n\t                React.createElement(\n\t                  \"tr\",\n\t                  { className: \"header\" },\n\t                  React.createElement(\n\t                    \"th\",\n\t                    null,\n\t                    \"Site Index\"\n\t                  ),\n\t                  React.createElement(\n\t                    \"th\",\n\t                    null,\n\t                    \"Unconstrained Likelihood\"\n\t                  ),\n\t                  React.createElement(\n\t                    \"th\",\n\t                    null,\n\t                    \"Constrained Likelihood\"\n\t                  ),\n\t                  React.createElement(\n\t                    \"th\",\n\t                    null,\n\t                    \"Optimized Null Likelihood\"\n\t                  ),\n\t                  React.createElement(\n\t                    \"th\",\n\t                    null,\n\t                    \"Constrained Evidence Ratio\"\n\t                  ),\n\t                  React.createElement(\n\t                    \"th\",\n\t                    null,\n\t                    \"Optimized Null Evidence Ratio\"\n\t                  )\n\t                )\n\t              )\n\t            )\n\t          )\n\t        )\n\t      ),\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"tab-pane\", id: \"tree_tab\" },\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"col-md-12\" },\n\t          React.createElement(_tree.Tree, { json: self.state.json,\n\t            settings: self.props.tree_settings })\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"col-md-12\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { id: \"primary-omega-dist\", className: \"panel-body\" },\n\t            React.createElement(_prop_chart.PropChart, { name: self.props.model_name, omegas: self.state.omegas,\n\t              settings: self.props.distro_settings })\n\t          )\n\t        )\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tvar render_busted = function render_busted(url, element) {\n\t  ReactDOM.render(React.createElement(BUSTED, { url: url }), document.getElementById(element));\n\t};\n\t\n\tmodule.exports = render_busted;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40), __webpack_require__(43), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 220:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, $) {'use strict';\n\t\n\tvar datamonkey_fade = function datamonkey_fade(json) {\n\t\n\t    var _colorizerB = d3.interpolateRgb(d3.rgb(0, 0, 255), d3.rgb(255, 255, 255));\n\t    var _colorizerR = d3.interpolateRgb(d3.rgb(255, 255, 255), d3.rgb(255, 0, 0));\n\t    var _use_BF = false;\n\t\n\t    var fade_headers = [['Site', 'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y'], ['Site', 'Alanine', 'Cysteine', 'Aspartic acid', 'Glutamic acid', 'Phenylalanine', 'Glycine', 'Histidine', 'Isoleucine', 'Lysine', 'Leucine', 'Methionine', 'Asparagine', 'Proline', 'Glutamine', 'Arginine', 'Serine', 'Threonine', 'Valine', 'Tryptophan', 'Tyrosin']];\n\t\n\t    var fade_results = json['results'][\"FADE\"];\n\t\n\t    var dict_to_array = function dict_to_array(dict) {\n\t        ar = [];\n\t        for (var k in dict) {\n\t            ar.push(dict[k]);\n\t        }\n\t        return ar;\n\t    };\n\t\n\t    var keys_in_dict = function keys_in_dict(dict) {\n\t        ar = [];\n\t        for (var k in dict) {\n\t            ar.push(k);\n\t        }\n\t        return ar;\n\t    };\n\t\n\t    //For displaying table with Posteriors\n\t    var display_column_map = function display_column_map(row) {\n\t        var result = [parseInt(row[0])];\n\t\n\t        for (var k = 4; k < row.length; k += 5) {\n\t            result.push(row[k]);\n\t        }\n\t        return result;\n\t    };\n\t\n\t    //For displaying table with BFs\n\t    var display_column_map_bf = function display_column_map_bf(row) {\n\t        //result = [parseInt(row[0]),row[3]];\n\t        var result = [parseInt(row[0])];\n\t\n\t        for (var k = 5; k < row.length; k += 5) {\n\t            result.push(row[k]);\n\t        }\n\t        return result;\n\t    };\n\t\n\t    var row_display_filter = function row_display_filter(d) {\n\t\n\t        //Any row, with at least one val > thres must get displayed. Any elements greater must be in red. \n\t        // if (d.slice(2).reduce (function (a,b) {return a+b;}) == 0.0) {return false;} \n\t        //console.log (d, this);\n\t        for (var k = 1; k < 21; k++) {\n\t            if (d[k] > this) return true;\n\t        }\n\t        return false;\n\t    };\n\t\n\t    var initial_display = function initial_display() {\n\t        //load_data_summary (\"summary_div\", data_summary);\n\t        $('#filter_on_pvalue').trigger('submit');\n\t        plot_property_graphs(\"property_plot_svg\", fade_results); //Using a matrix from html\n\t    };\n\t\n\t    var set_handlers = function set_handlers(file_id) {\n\t\n\t        var fade_headers = [['Site', 'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y'], ['Site', 'Alanine', 'Cysteine', 'Aspartic acid', 'Glutamic acid', 'Phenylalanine', 'Glycine', 'Histidine', 'Isoleucine', 'Lysine', 'Leucine', 'Methionine', 'Asparagine', 'Proline', 'Glutamine', 'Arginine', 'Serine', 'Threonine', 'Valine', 'Tryptophan', 'Tyrosin']];\n\t\n\t        var found = '';\n\t\n\t        $('body').attr('data-job-id', file_id);\n\t        $('#filter_on_pvalue').submit(function (e) {\n\t            cutoff = parseFloat($('#pvalue')[0].value);\n\t            if (_use_BF) {\n\t                found = load_analysis_results('prime_table', fade_headers, fade_results, display_column_map_bf, row_display_filter);\n\t            } else {\n\t                found = load_analysis_results('prime_table', fade_headers, fade_results, display_column_map, row_display_filter);\n\t            }\n\t            d3.select(\"#total_sites_found\").selectAll(\"span\").data(found).html(function (d) {\n\t                return d;\n\t            });\n\t            return false;\n\t        });\n\t\n\t        $('#site_rate_display').on('show', function (e) {\n\t            //alert (\"Show\");\n\t            //console.log (this);\n\t            return true;\n\t        });\n\t\n\t        $('body').on('click', '[data-toggle=\"modal\"]', function (event) {\n\t            display_site_properties($(this).attr(\"data-codon-id\"));\n\t        });\n\t\n\t        $('#set-p-value').click(function (event) {\n\t            d3.select(\"#pq_selector\").html(\"Posterior <span class='caret'></span>\");\n\t            _use_BF = false;\n\t            event.preventDefault();\n\t        });\n\t\n\t        $('#set-q-value').click(function (event) {\n\t            d3.select(\"#pq_selector\").html(\"BF <span class='caret'></span>\");\n\t            _use_BF = true;\n\t            event.preventDefault();\n\t        });\n\t\n\t        $('body').on('click', '#property_selector .btn', function (event) {\n\t            event.stopPropagation(); // prevent default bootstrap behavior\n\t            if ($(this).attr('data-toggle') != 'button') {\n\t                // don't toggle if data-toggle=\"button\"\n\t                $(this).toggleClass('active');\n\t            }\n\t            toggle_view(\"property_plot_svg\", parseInt($(this).attr('data-property-id')), $(this).hasClass('active')); // button state AFTER the click\n\t        });\n\t    };\n\t\n\t    var property_plot_done = false;\n\t\n\t    var display_site_properties = function display_site_properties(site_id) {\n\t        job_id = $('body').attr('data-job-id');\n\t        url = \"/cgi-bin/datamonkey/wrapHyPhyBF.pl?file=fade_site&mode=1&arguments=\" + job_id + \"-\" + site_id;\n\t        d3.json(url, function (json) {\n\t            site_info(json, site_id);\n\t        });\n\t    };\n\t\n\t    var toggle_view = function toggle_view(property_plot, group, show_hide) {\n\t        if (show_hide) {\n\t            prop = 'visible';\n\t        } else {\n\t            prop = 'hidden';\n\t        }\n\t        d3.select(\"#\" + property_plot).selectAll(\".dot\" + group).style(\"visibility\", prop);\n\t    };\n\t\n\t    var site_info = function site_info(values, site_id) {\n\t        d3.select(\"#site_rate_display_header\").html(\"Detailed information about site \" + site_id);\n\t        elements = dict_to_array(values);\n\t        headers = keys_in_dict(elements[0]).sort();\n\t        var header_element = d3.select('#site_info_table').select(\"thead\");\n\t        header_element.selectAll(\"th\").remove();\n\t        header_element.selectAll(\"th\").data(headers).enter().append(\"th\").html(function (d, i) //Get header of table\n\t        {\n\t            return d;\n\t        });\n\t    };\n\t\n\t    var plot_property_graphs = function plot_property_graphs(property_plot, property_info) {\n\t        if (!property_plot_done) {\n\t            property_info = property_info.map(display_column_map);\n\t            property_plot_done = true;\n\t            var site_count = property_info.length;\n\t\n\t            //console.log (d3.extent (property_info.map(function (d){return d[0];})));\n\t\n\t            var margin = { top: 20, right: 40, bottom: 30, left: 40 },\n\t                width = 800 - margin.left - margin.right,\n\t                height = 500 - margin.top - margin.bottom;\n\t\n\t            var x = d3.scale.linear().range([0, width]);\n\t\n\t            var y = d3.scale.linear().range([height, 0]);\n\t\n\t            var color = d3.scale.category10();\n\t\n\t            var xAxis = d3.svg.axis().scale(x).orient(\"bottom\");\n\t\n\t            var yAxis = d3.svg.axis().scale(y).orient(\"left\");\n\t\n\t            var yAxis2 = d3.svg.axis().scale(y).orient(\"right\");\n\t\n\t            var make_x_axis = function make_x_axis() {\n\t                return d3.svg.axis().scale(x).orient(\"bottom\").ticks(20);\n\t            };\n\t\n\t            var make_y_axis = function make_y_axis() {\n\t                return d3.svg.axis().scale(y).orient(\"left\").ticks(20);\n\t            };\n\t\n\t            var svg = d3.select(\"#\" + property_plot).attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\t\n\t            x.domain([1, site_count]);\n\t            y.domain([0, 1]);\n\t\n\t            svg.append(\"g\").attr(\"class\", \"x hyphy-axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(xAxis).append(\"text\")\n\t            //.attr(\"class\", \"label\")\n\t            .attr(\"x\", width).attr(\"y\", 30).style(\"text-anchor\", \"end\").text(\"Site index\");\n\t\n\t            svg.append(\"g\").attr(\"class\", \"grid\").call(make_y_axis().tickSize(-width, 0, 0).tickFormat(\"\"));\n\t\n\t            svg.append(\"g\").attr(\"class\", \"grid\").attr(\"transform\", \"translate(0,\" + height + \")\").call(make_x_axis().tickSize(-height, 0, 0).tickFormat(\"\"));\n\t\n\t            svg.append(\"g\").attr(\"class\", \"y hyphy-axis\").call(yAxis).append(\"text\")\n\t            //.attr(\"class\", \"label\")\n\t            .attr(\"transform\", \"rotate(-90)\").attr(\"y\", -37).attr(\"dy\", \".71em\").style(\"text-anchor\", \"end\").text(\"P(Bias>1)\");\n\t\n\t            var y2 = svg.append(\"g\").attr(\"class\", \"y hyphy-axis\").attr(\"transform\", \"translate(\" + width + \",0)\").call(yAxis2.tickFormat(\"\"));\n\t\n\t            y2.append(\"text\")\n\t            //.attr(\"class\", \"label\")\n\t            .attr(\"transform\", \"rotate(-90)\").attr(\"y\", 10).attr(\"dy\", \".71em\").style(\"text-anchor\", \"end\").text(\"High Posteriors\");\n\t\n\t            y2.append(\"text\")\n\t            //.attr(\"class\", \"label\")\n\t            .attr(\"transform\", \"rotate(-90)\").attr(\"y\", 10).attr(\"x\", -height).attr(\"dy\", \".71em\").style(\"text-anchor\", \"start\").text(\"Low Posteriors\");\n\t\n\t            var legend = svg.selectAll(\".legend\").data(color.domain()).enter().append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", function (d, i) {\n\t                return \"translate(0,\" + i * 20 + \")\";\n\t            });\n\t\n\t            var h = {}; //Hash of numbers -> AA names for labels\n\t            h[1] = \"Alanine\";\n\t            h[2] = \"Cysteine\";\n\t            h[3] = \"Aspartic acid\";\n\t            h[4] = \"Glutamic acid\";\n\t            h[5] = \"Phenylalanine\";\n\t            h[6] = \"Glycine\";\n\t            h[7] = \"Histidine\";\n\t            h[8] = \"Isoleucine\";\n\t            h[9] = \"Lysine\";\n\t            h[10] = \"Leucine\";\n\t            h[11] = \"Methionine\";\n\t            h[12] = \"Asparagine\";\n\t            h[13] = \"Proline\";\n\t            h[14] = \"Glutamine\";\n\t            h[15] = \"Arginine\";\n\t            h[16] = \"Serine\";\n\t            h[17] = \"Threonine\";\n\t            h[18] = \"Valine\";\n\t            h[19] = \"Tryptophan\";\n\t            h[20] = \"Tyrosine\";\n\t\n\t            var vis = 'visible';\n\t            for (var series = 1; series <= 20; series++) {\n\t                if (series > 1) {\n\t                    vis = 'hidden';\n\t                }\n\t                svg.selectAll(\".dot\" + series).data(property_info).enter().append(\"circle\").attr(\"class\", \"dot\" + series).attr(\"r\", function (d) {\n\t                    if (d[series] == 0) return 1;return 3.5;\n\t                }).attr(\"cx\", function (d) {\n\t                    return x(d[0]);\n\t                }).attr(\"cy\", function (d) {\n\t                    return y(d[series]);\n\t                }).style(\"fill\", function (d) {\n\t                    return color(series);\n\t                }).style(\"opacity\", 0.5).style('visibility', vis).append(\"title\").text(function (d) {\n\t                    return \"Site \" + d[0] + \", \" + h[series] + \" P(Beta>1) =\" + d[series];\n\t                });\n\t                d3.select(\"#show_property\" + series).style(\"color\", function (d) {\n\t                    return color(series);\n\t                }); //Colour buttons on HTML\n\t            }\n\t        }\n\t    };\n\t\n\t    var load_data_summary = function load_data_summary(id, json_object) {\n\t        //if (error) return console.warn(error);\n\t        reportable_entries = [];\n\t        warnings = [];\n\t        for (var k in json_object) {\n\t            if (k == 'Warnings') {\n\t                warnings = json_object[k];\n\t            } else {\n\t                reportable_entries.push({ \"Phase\": k, \"Information\": json_object[k] });\n\t            }\n\t        }\n\t        info_container = d3.select(\"#\" + id);\n\t        items = info_container.selectAll(\"dt\").data(reportable_entries);\n\t        items.enter().append(\"dt\").text(function (d) {\n\t            return d[\"Phase\"];\n\t        });\n\t        item_count = items[0].length;\n\t        current_child = 2;\n\t        for (z = 1; z <= item_count; z++) {\n\t            info = dict_to_array(reportable_entries[z - 1][\"Information\"]);\n\t            for (y = 0; y < info.length; y++) {\n\t                info_container.insert(\"dd\", \":nth-child(\" + current_child + \")\").data([info[y]]).text(function (d) {\n\t                    return d;\n\t                });\n\t            }\n\t            key = reportable_entries[z - 1][\"Phase\"];\n\t            if (key in warnings) {\n\t                current_child++;\n\t                info_container.insert(\"dd\", \":nth-child(\" + current_child + \")\").selectAll(\"div\").data([warnings[key]]).enter().append(\"div\").classed(\"alert\", true).html(function (d) {\n\t                    return d;\n\t                });\n\t            }\n\t            current_child += info.length + 1;\n\t        }\n\t        return 0;\n\t    };\n\t\n\t    var load_analysis_results = function load_analysis_results(id, headers, matrix, column_selector, condition) {\n\t        var header_element = d3.select('#' + id).select(\"thead\");\n\t        header_element.selectAll(\"th\").remove();\n\t        header_element.selectAll(\"th\").data(headers[0]).enter().append(\"th\").html(function (d, i) //Get header of table\n\t        {\n\t            return \"<a href='#' data-toggle='tooltip' data-placement = 'right' data-html = true title data-original-title='\" + headers[1][i] + \"'>\" + d + \"</a>\";\n\t        });\n\t\n\t        var parent_element = d3.select('#' + id).select(\"tbody\");\n\t        parent_element.selectAll(\"tr\").remove();\n\t        var filtered_matrix = matrix.map(column_selector).filter(condition, cutoff); //Get the columns to display in table\n\t        var rows = parent_element.selectAll(\"tr\").data(function (d) {\n\t            return filtered_matrix;\n\t        });\n\t        var conserved = 0;\n\t        rows.enter().append(\"tr\").selectAll(\"td\").data(function (d) {\n\t            return d;\n\t        }).enter().append(\"td\").html(function (d, i) {\n\t            d = parseFloat(d);\n\t            if (i) {\n\t                if (_use_BF == false) {\n\t                    if (d > 0.99) return \"1.00\";\n\t                    return d.toFixed(2);\n\t                } else {\n\t                    if (d > 100) return \"100+\";\n\t                    return d.toFixed(1);\n\t                }\n\t            }\n\t            return \"<b>\" + d + \"</b> <a href='#site_rate_display' data-toggle='modal' data-codon-id = '\" + d + \"' data-placement = 'bottom'><i class='icon-list'></i></a>\";\n\t        }).classed(\"btn-danger\", function (d, i, j) {\n\t            if (d >= cutoff && i >= 1) {\n\t                conserved++;return true;\n\t            }return false;\n\t        });\n\t\n\t        d3.select('#' + id).classed(\"table-striped table-hover\", true);\n\t        $('a').tooltip();\n\t        return [filtered_matrix.length, conserved];\n\t    };\n\t\n\t    var numberToColor = function numberToColor(value) {\n\t        if (typeof value == \"string\") {\n\t            return \"rgba (1,0,0,1)\";\n\t        }\n\t        rate_value = Math.min(20, Math.max(-20, Math.log(value) / Math.LN20));\n\t        if (rate_value < 0) {\n\t            return _colorizerB((20 + rate_value) / 20.0);\n\t        }\n\t        return _colorizerR(rate_value / 20.0);\n\t    };\n\t\n\t    var fgColor = function fgColor(value, normalizer) {\n\t        if (typeof value == \"string\") {\n\t            return \"rgba (1,1,1,1)\";\n\t        }\n\t\n\t        var score = 1 - Math.exp(-20 * value / normalizer);\n\t\n\t        if (score > 0.45) {\n\t            return \"white\";\n\t        }\n\t        return \"black\";\n\t    };\n\t\n\t    set_handlers('test');\n\t    initial_display();\n\t};\n\t\n\tmodule.exports = datamonkey_fade;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 221:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3) {'use strict';\n\t\n\tvar React = __webpack_require__(46);\n\t\n\tvar FadeSummary = React.createClass({\n\t  displayName: 'FadeSummary',\n\t\n\t\n\t  float_format: d3.format(\".2f\"),\n\t\n\t  countBranchesTested: function countBranchesTested(branches_tested) {\n\t    if (branches_tested) {\n\t      return branches_tested.split(';').length;\n\t    } else {\n\t      return 0;\n\t    }\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      subs: []\n\t    };\n\t  },\n\t\n\t  componentDidMount: function componentDidMount() {\n\t\n\t    this.setProps({\n\t      alpha_level: 0.05,\n\t      sequences: this.props.msa.sequences,\n\t      subs: this.props.fade_results[\"TREE_LENGTHS\"][0],\n\t      sites: this.props.msa.sites,\n\t      model: this.props.fade_results[\"MODEL_INFO\"],\n\t      grid_desc: this.props.fade_results[\"GRID_DESCRIPTION\"],\n\t      branches_tested: this.props.fade_results[\"BRANCHES_TESTED\"]\n\t    });\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    var self = this;\n\t\n\t    return React.createElement(\n\t      'dl',\n\t      { className: 'dl-horizontal' },\n\t      React.createElement(\n\t        'dt',\n\t        null,\n\t        'Data summary'\n\t      ),\n\t      React.createElement(\n\t        'dd',\n\t        null,\n\t        this.props.sequences,\n\t        ' sequences with ',\n\t        this.props.partitions,\n\t        ' partitions.'\n\t      ),\n\t      React.createElement(\n\t        'dd',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'alert' },\n\t          'These sequences have not been screened for recombination. Selection analyses of alignments with recombinants in them using a single tree may generate ',\n\t          React.createElement(\n\t            'u',\n\t            null,\n\t            'misleading'\n\t          ),\n\t          ' results.'\n\t        )\n\t      ),\n\t      this.props.msa.partition_info.map(function (partition, index) {\n\t        return React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(\n\t            'dt',\n\t            null,\n\t            'Partition ',\n\t            partition[\"partition\"]\n\t          ),\n\t          React.createElement(\n\t            'dd',\n\t            null,\n\t            ' ',\n\t            self.float_format(self.props.subs[index]),\n\t            ' subs/ aminoacid  site'\n\t          ),\n\t          React.createElement(\n\t            'dd',\n\t            null,\n\t            partition[\"endcodon\"] - partition[\"startcodon\"],\n\t            ' aminoacids'\n\t          )\n\t        );\n\t      }),\n\t      React.createElement(\n\t        'dt',\n\t        null,\n\t        'Settings'\n\t      ),\n\t      React.createElement(\n\t        'dd',\n\t        null,\n\t        this.props.model\n\t      ),\n\t      React.createElement(\n\t        'dd',\n\t        null,\n\t        this.props.grid_desc\n\t      ),\n\t      React.createElement(\n\t        'dd',\n\t        null,\n\t        'Directional model applied to ',\n\t        self.countBranchesTested(this.props.branches_tested),\n\t        ' branches'\n\t      )\n\t    );\n\t  }\n\t\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_fade_summary(json, msa) {\n\t  React.render(React.createElement(FadeSummary, { fade_results: json, msa: msa }), document.getElementById(\"summary-div\"));\n\t}\n\t\n\tmodule.exports = render_fade_summary;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40)))\n\n/***/ },\n\n/***/ 222:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, $) {\"use strict\";\n\t\n\tvar _model_fits = __webpack_require__(203);\n\t\n\tvar _tree_summary = __webpack_require__(204);\n\t\n\tvar _tree = __webpack_require__(205);\n\t\n\tvar _omega_plots = __webpack_require__(223);\n\t\n\tvar React = __webpack_require__(46),\n\t    ReactDOM = __webpack_require__(209),\n\t    _ = __webpack_require__(43);\n\t\n\tvar RELAX = React.createClass({\n\t  displayName: \"RELAX\",\n\t\n\t\n\t  float_format: d3.format(\".2f\"),\n\t  p_value_format: d3.format(\".4f\"),\n\t  fit_format: d3.format(\".2f\"),\n\t\n\t  loadFromServer: function loadFromServer() {\n\t\n\t    var self = this;\n\t\n\t    d3.json(this.props.url, function (data) {\n\t\n\t      data[\"fits\"][\"Partitioned MG94xREV\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Partitioned MG94xREV\");\n\t      data[\"fits\"][\"General Descriptive\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"General Descriptive\");\n\t      data[\"fits\"][\"Null\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Null\");\n\t      data[\"fits\"][\"Alternative\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Alternative\");\n\t      data[\"fits\"][\"Partitioned Exploratory\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Partitioned Exploratory\");\n\t\n\t      var annotations = data[\"fits\"][\"Partitioned MG94xREV\"][\"branch-annotations\"],\n\t          json = data,\n\t          pmid = data[\"PMID\"],\n\t          test_results = data[\"relaxation_test\"];\n\t\n\t      var p = data[\"relaxation-test\"][\"p\"],\n\t          direction = data[\"fits\"][\"Alternative\"][\"K\"] > 1 ? 'intensification' : 'relaxation',\n\t          evidence = p <= self.props.alpha_level ? 'significant' : 'not significant',\n\t          pvalue = self.p_value_format(p),\n\t          lrt = self.fit_format(data[\"relaxation-test\"][\"LR\"]),\n\t          summary_k = self.fit_format(data[\"fits\"][\"Alternative\"][\"K\"]),\n\t          pmid_text = \"PubMed ID \" + pmid,\n\t          pmid_href = \"http://www.ncbi.nlm.nih.gov/pubmed/\" + pmid;\n\t\n\t      self.setState({\n\t        annotations: annotations,\n\t        json: json,\n\t        pmid: pmid,\n\t        test_results: test_results,\n\t        p: p,\n\t        direction: direction,\n\t        evidence: evidence,\n\t        pvalue: pvalue,\n\t        lrt: lrt,\n\t        summary_k: summary_k,\n\t        pmid_text: pmid_text,\n\t        pmid_href: pmid_href\n\t      });\n\t    });\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t\n\t    var edgeColorizer = function edgeColorizer(element, data) {\n\t\n\t      var self = this,\n\t          scaling_exponent = 0.33,\n\t          omega_format = d3.format(\".3r\");\n\t\n\t      var omega_color = d3.scale.pow().exponent(scaling_exponent).domain([0, 0.25, 1, 5, 10]).range(self.options()[\"color-fill\"] ? [\"#DDDDDD\", \"#AAAAAA\", \"#888888\", \"#444444\", \"#000000\"] : [\"#6e4fa2\", \"#3288bd\", \"#e6f598\", \"#f46d43\", \"#9e0142\"]).clamp(true);\n\t\n\t      if (data.target.annotations) {\n\t        element.style('stroke', omega_color(data.target.annotations.length) || null);\n\t        $(element[0][0]).tooltip('destroy');\n\t        $(element[0][0]).tooltip({\n\t          'title': omega_format(data.target.annotations.length),\n\t          'html': true,\n\t          'trigger': 'hover',\n\t          'container': 'body',\n\t          'placement': 'auto'\n\t        });\n\t      } else {\n\t        element.style('stroke', null);\n\t        $(element[0][0]).tooltip('destroy');\n\t      }\n\t\n\t      var selected_partition = $(\"#hyphy-tree-highlight\").attr(\"value\");\n\t\n\t      if (selected_partition && this.get_partitions()) {\n\t        var partitions = this.get_partitions()[selected_partition];\n\t\n\t        element.style('stroke-width', partitions && partitions[data.target.name] ? '8' : '4').style('stroke-linejoin', 'round').style('stroke-linecap', 'round');\n\t      }\n\t    };\n\t\n\t    return {\n\t      edgeColorizer: edgeColorizer,\n\t      alpha_level: 0.05\n\t    };\n\t  },\n\t\n\t  getInitialState: function getInitialState() {\n\t\n\t    var model_fits_id = \"#hyphy-model-fits\",\n\t        omega_plots_id = \"#hyphy-omega-plots\",\n\t        summary_id = \"#hyphy-relax-summary\",\n\t        tree_id = \"#tree-tab\";\n\t\n\t    var tree_settings = {\n\t      'omegaPlot': {},\n\t      'tree-options': {\n\t        /* value arrays have the following meaning\n\t            [0] - the value of the attribute\n\t            [1] - does the change in attribute value trigger tree re-layout?\n\t        */\n\t        'hyphy-tree-model': [\"Partitioned MG94xREV\", true],\n\t        'hyphy-tree-highlight': [\"RELAX.test\", false],\n\t        'hyphy-tree-branch-lengths': [true, true],\n\t        'hyphy-tree-hide-legend': [true, false],\n\t        'hyphy-tree-fill-color': [true, false]\n\t      },\n\t      'suppress-tree-render': false,\n\t      'chart-append-html': true,\n\t      'edgeColorizer': this.props.edgeColorizer\n\t    };\n\t\n\t    return {\n\t      annotations: null,\n\t      json: null,\n\t      pmid: null,\n\t      settings: tree_settings,\n\t      test_results: null,\n\t      tree: null,\n\t      p: null,\n\t      direction: 'unknown',\n\t      evidence: 'unknown',\n\t      pvalue: null,\n\t      lrt: null,\n\t      summary_k: 'unknown',\n\t      pmid_text: \"PubMed ID : Unknown\",\n\t      pmid_href: \"#\",\n\t      relaxation_K: \"unknown\"\n\t    };\n\t  },\n\t\n\t  componentWillMount: function componentWillMount() {\n\t    this.loadFromServer();\n\t    this.setEvents();\n\t  },\n\t\n\t  setEvents: function setEvents() {\n\t\n\t    var self = this;\n\t\n\t    $(\"#datamonkey-relax-load-json\").on(\"change\", function (e) {\n\t      var files = e.target.files; // FileList object\n\t\n\t      if (files.length == 1) {\n\t        var f = files[0];\n\t        var reader = new FileReader();\n\t\n\t        reader.onload = function (theFile) {\n\t          return function (e) {\n\t\n\t            var data = JSON.parse(this.result);\n\t            data[\"fits\"][\"Partitioned MG94xREV\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Partitioned MG94xREV\");\n\t            data[\"fits\"][\"General Descriptive\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"General Descriptive\");\n\t            data[\"fits\"][\"Null\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Null\");\n\t            data[\"fits\"][\"Alternative\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Alternative\");\n\t            data[\"fits\"][\"Partitioned Exploratory\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Partitioned Exploratory\");\n\t\n\t            var annotations = data[\"fits\"][\"Partitioned MG94xREV\"][\"branch-annotations\"],\n\t                json = data,\n\t                pmid = data[\"PMID\"],\n\t                test_results = data[\"relaxation_test\"];\n\t\n\t            var p = data[\"relaxation-test\"][\"p\"],\n\t                direction = data[\"fits\"][\"Alternative\"][\"K\"] > 1 ? 'intensification' : 'relaxation',\n\t                evidence = p <= self.props.alpha_level ? 'significant' : 'not significant',\n\t                pvalue = self.p_value_format(p),\n\t                lrt = self.fit_format(data[\"relaxation-test\"][\"LR\"]),\n\t                summary_k = self.fit_format(data[\"fits\"][\"Alternative\"][\"K\"]),\n\t                pmid_text = \"PubMed ID \" + pmid,\n\t                pmid_href = \"http://www.ncbi.nlm.nih.gov/pubmed/\" + pmid;\n\t\n\t            self.setState({\n\t              annotations: annotations,\n\t              json: json,\n\t              pmid: pmid,\n\t              test_results: test_results,\n\t              p: p,\n\t              direction: direction,\n\t              evidence: evidence,\n\t              pvalue: pvalue,\n\t              lrt: lrt,\n\t              summary_k: summary_k,\n\t              pmid_text: pmid_text,\n\t              pmid_href: pmid_href\n\t            });\n\t          };\n\t        }(f);\n\t        reader.readAsText(f);\n\t      }\n\t\n\t      $(\"#datamonkey-absrel-toggle-here\").dropdown(\"toggle\");\n\t      e.preventDefault();\n\t    });\n\t  },\n\t\n\t  formatBranchAnnotations: function formatBranchAnnotations(json, key) {\n\t\n\t    var initial_branch_annotations = json[\"fits\"][key][\"branch-annotations\"];\n\t\n\t    if (!initial_branch_annotations) {\n\t      initial_branch_annotations = json[\"fits\"][key][\"rate distributions\"];\n\t    }\n\t\n\t    // Iterate over objects\n\t    var branch_annotations = _.mapObject(initial_branch_annotations, function (val, key) {\n\t      return { \"length\": val };\n\t    });\n\t\n\t    return branch_annotations;\n\t  },\n\t\n\t  initialize: function initialize() {},\n\t\n\t  render: function render() {\n\t\n\t    var self = this;\n\t\n\t    return React.createElement(\n\t      \"div\",\n\t      { className: \"tab-content\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"tab-pane active\", id: \"datamonkey-relax-summary-tab\" },\n\t        React.createElement(\n\t          \"div\",\n\t          { id: \"hyphy-relax-summary\", className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-md-12\" },\n\t            React.createElement(\n\t              \"ul\",\n\t              { className: \"list-group\" },\n\t              React.createElement(\n\t                \"li\",\n\t                { className: \"list-group-item list-group-item-info\" },\n\t                React.createElement(\n\t                  \"h3\",\n\t                  { className: \"list-group-item-heading\" },\n\t                  React.createElement(\"i\", { className: \"fa fa-list\", styleFormat: \"margin-right: 10px\" }),\n\t                  React.createElement(\n\t                    \"span\",\n\t                    { id: \"summary-method-name\" },\n\t                    \"RELAX(ed selection test)\"\n\t                  ),\n\t                  \" summary\"\n\t                ),\n\t                React.createElement(\n\t                  \"p\",\n\t                  { className: \"list-group-item-text lead\", styleFormat: \"margin-top:0.5em; \" },\n\t                  \"Test for selection \",\n\t                  React.createElement(\n\t                    \"strong\",\n\t                    { id: \"summary-direction\" },\n\t                    this.state.direction\n\t                  ),\n\t                  \"(\",\n\t                  React.createElement(\n\t                    \"abbr\",\n\t                    { title: \"Relaxation coefficient\" },\n\t                    \"K\"\n\t                  ),\n\t                  \" = \",\n\t                  React.createElement(\n\t                    \"strong\",\n\t                    { id: \"summary-K\" },\n\t                    this.state.summary_k\n\t                  ),\n\t                  \") was \",\n\t                  React.createElement(\n\t                    \"strong\",\n\t                    { id: \"summary-evidence\" },\n\t                    this.state.evidence\n\t                  ),\n\t                  \"(p = \",\n\t                  React.createElement(\n\t                    \"strong\",\n\t                    { id: \"summary-pvalue\" },\n\t                    this.state.p\n\t                  ),\n\t                  \", \",\n\t                  React.createElement(\n\t                    \"abbr\",\n\t                    { title: \"Likelihood ratio statistic\" },\n\t                    \"LR\"\n\t                  ),\n\t                  \" = \",\n\t                  React.createElement(\n\t                    \"strong\",\n\t                    { id: \"summary-LRT\" },\n\t                    this.state.lrt\n\t                  ),\n\t                  \")\"\n\t                ),\n\t                React.createElement(\n\t                  \"p\",\n\t                  null,\n\t                  React.createElement(\n\t                    \"small\",\n\t                    null,\n\t                    \"Please cite \",\n\t                    React.createElement(\n\t                      \"a\",\n\t                      { href: this.state.pmid_href, id: \"summary-pmid\" },\n\t                      this.state.pmid_text\n\t                    ),\n\t                    \" if you use this result in a publication, presentation, or other scientific work.\"\n\t                  )\n\t                )\n\t              )\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { id: \"hyphy-model-fits\", className: \"row\" },\n\t          React.createElement(_model_fits.ModelFits, { json: self.state.json })\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { id: \"hyphy-omega-plots\", className: \"row\" },\n\t          React.createElement(_omega_plots.OmegaPlotGrid, { json: self.state.json })\n\t        )\n\t      ),\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"tab-pane\", id: \"tree-tab\" },\n\t        React.createElement(_tree.Tree, { json: self.state.json,\n\t          settings: self.state.settings })\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_relax(url, element) {\n\t  ReactDOM.render(React.createElement(RELAX, { url: url }), document.getElementById(element));\n\t}\n\t\n\tmodule.exports = render_relax;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 223:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3) {'use strict';\n\t\n\tvar React = __webpack_require__(46);\n\tvar datamonkey = __webpack_require__(39);\n\tvar _ = __webpack_require__(43);\n\t\n\tvar OmegaPlot = React.createClass({\n\t    displayName: 'OmegaPlot',\n\t\n\t\n\t    getDefaultProps: function getDefaultProps() {\n\t        return {\n\t            svg_id: null,\n\t            dimensions: { width: 600, height: 400 },\n\t            margins: { 'left': 50, 'right': 15, 'bottom': 35, 'top': 35 },\n\t            has_zeros: false,\n\t            legend_id: null,\n\t            do_log_plot: true,\n\t            k_p: null,\n\t            plot: null\n\t        };\n\t    },\n\t\n\t    setEvents: function setEvents() {\n\t        var self = this;\n\t\n\t        d3.select(\"#\" + this.save_svg_id).on('click', function (e) {\n\t            datamonkey.save_image(\"svg\", \"#\" + self.svg_id);\n\t        });\n\t\n\t        d3.select(\"#\" + this.save_png_id).on('click', function (e) {\n\t            datamonkey.save_image(\"png\", \"#\" + self.svg_id);\n\t        });\n\t    },\n\t\n\t    initialize: function initialize() {\n\t\n\t        if (!this.state.omegas || !this.state.omegas[\"Reference\"]) {\n\t            return;\n\t        }\n\t\n\t        var data_to_plot = this.state.omegas[\"Reference\"];\n\t        var secondary_data = this.state.omegas[\"Test\"];\n\t\n\t        // Set props from settings\n\t        this.svg_id = this.props.settings.svg_id;\n\t        this.dimensions = this.props.settings.dimensions || this.props.dimensions;\n\t        this.legend_id = this.props.settings.legend || this.props.legend_id;\n\t        this.do_log_plot = this.props.settings.log || this.props.do_log_plot;\n\t        this.k_p = this.props.settings.k || this.props.k_p;\n\t\n\t        var dimensions = this.props.dimensions;\n\t        var margins = this.props.margins;\n\t\n\t        this.margins = margins;\n\t\n\t        if (this.do_log_plot) {\n\t            this.has_zeros = data_to_plot.some(function (d) {\n\t                return d.omega <= 0;\n\t            });\n\t            if (secondary_data) {\n\t                this.has_zeros = this.has_zeros || data_to_plot.some(function (d) {\n\t                    return d.omega <= 0;\n\t                });\n\t            }\n\t        }\n\t\n\t        this.plot_width = dimensions[\"width\"] - margins['left'] - margins['right'], this.plot_height = dimensions[\"height\"] - margins['top'] - margins['bottom'];\n\t\n\t        var domain = this.state.settings[\"domain\"] || d3.extent(secondary_data ? secondary_data.map(function (d) {\n\t            return d.omega;\n\t        }).concat(data_to_plot.map(function (d) {\n\t            return d.omega;\n\t        })) : data_to_plot.map(function (d) {\n\t            return d.omega;\n\t        }));\n\t\n\t        domain[0] *= 0.5;\n\t\n\t        this.omega_scale = (this.do_log_plot ? this.has_zeros ? d3.scale.pow().exponent(0.2) : d3.scale.log() : d3.scale.linear()).range([0, this.plot_width]).domain(domain).nice();\n\t\n\t        this.proportion_scale = d3.scale.linear().range([this.plot_height, 0]).domain([-0.05, 1]).clamp(true);\n\t\n\t        // compute margins -- circle AREA is proportional to the relative weight\n\t        // maximum diameter is (height - text margin)\n\t        this.svg = d3.select(\"#\" + this.svg_id).attr(\"width\", dimensions.width).attr(\"height\", dimensions.height);\n\t        this.plot = this.svg.selectAll(\".container\");\n\t\n\t        this.svg.selectAll(\"defs\").remove();\n\t        this.svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"refX\", 10) /*must be smarter way to calculate shift*/\n\t        .attr(\"refY\", 4).attr(\"markerWidth\", 10).attr(\"markerHeight\", 8).attr(\"orient\", \"auto\").attr(\"stroke\", \"#000\").attr(\"fill\", \"#000\").append(\"path\").attr(\"d\", \"M 0,0 V8 L10,4 Z\");\n\t\n\t        if (this.plot.empty()) {\n\t            this.plot = this.svg.append(\"g\").attr(\"class\", \"container\");\n\t        }\n\t\n\t        this.plot.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \" , \" + this.margins[\"top\"] + \")\");\n\t        this.reference_omega_lines = this.plot.selectAll(\".hyphy-omega-line-reference\"), this.displacement_lines = this.plot.selectAll(\".hyphy-displacement-line\");\n\t\n\t        this.createDisplacementLine();\n\t        this.createNeutralLine();\n\t        this.createOmegaLine();\n\t        this.createReferenceLine();\n\t        this.createXAxis();\n\t        this.createYAxis();\n\t        this.setEvents();\n\t    },\n\t    makeSpring: function makeSpring(x1, x2, y1, y2, step, displacement) {\n\t\n\t        if (x1 == x2) {\n\t            y1 = Math.min(y1, y2);\n\t            return \"M\" + x1 + \",\" + (y1 - 40) + \"v20\";\n\t        }\n\t\n\t        var spring_data = [],\n\t            point = [x1, y1],\n\t            angle = Math.atan2(y2 - y1, x2 - x1);\n\t\n\t        var step = [step * Math.cos(angle), step * Math.sin(angle)];\n\t        var k = 0;\n\t\n\t        if (Math.abs(x1 - x2) < 15) {\n\t            spring_data.push(point);\n\t        } else {\n\t            while (x1 < x2 && point[0] < x2 - 15 || x1 > x2 && point[0] > x2 + 15) {\n\t                point = point.map(function (d, i) {\n\t                    return d + step[i];\n\t                });\n\t                if (k % 2) {\n\t                    spring_data.push([point[0], point[1] + displacement]);\n\t                } else {\n\t                    spring_data.push([point[0], point[1] - displacement]);\n\t                }\n\t                k++;\n\t                if (k > 100) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t\n\t        if (spring_data.length > 1) {\n\t            spring_data.pop();\n\t        }\n\t\n\t        spring_data.push([x2, y2]);\n\t        var line = d3.svg.line().interpolate(\"monotone\");\n\t        return line(spring_data);\n\t    },\n\t    createDisplacementLine: function createDisplacementLine() {\n\t\n\t        var self = this;\n\t        var data_to_plot = this.state.omegas[\"Reference\"];\n\t        var secondary_data = this.state.omegas[\"Test\"];\n\t\n\t        if (secondary_data) {\n\t            var diffs = data_to_plot.map(function (d, i) {\n\t                return {\n\t                    'x1': d.omega,\n\t                    'x2': secondary_data[i].omega,\n\t                    'y1': d.weight * 0.98,\n\t                    'y2': secondary_data[i].weight * 0.98\n\t                };\n\t            });\n\t\n\t            this.displacement_lines = this.displacement_lines.data(diffs);\n\t            this.displacement_lines.enter().append(\"path\");\n\t            this.displacement_lines.exit().remove();\n\t            this.displacement_lines.transition().attr(\"d\", function (d) {\n\t                return self.makeSpring(self.omega_scale(d.x1), self.omega_scale(d.x2), self.proportion_scale(d.y1 * 0.5), self.proportion_scale(d.y2 * 0.5), 5, 5);\n\t            }).attr(\"marker-end\", \"url(#arrowhead)\").attr(\"class\", \"hyphy-displacement-line\");\n\t        }\n\t    },\n\t    createReferenceLine: function createReferenceLine() {\n\t\n\t        var data_to_plot = this.state.omegas[\"Reference\"];\n\t        var secondary_data = this.state.omegas[\"Test\"];\n\t        var self = this;\n\t\n\t        if (secondary_data) {\n\t            this.reference_omega_lines = this.reference_omega_lines.data(data_to_plot);\n\t            this.reference_omega_lines.enter().append(\"line\");\n\t            this.reference_omega_lines.exit().remove();\n\t\n\t            this.reference_omega_lines.transition().attr(\"x1\", function (d) {\n\t                return self.omega_scale(d.omega);\n\t            }).attr(\"x2\", function (d) {\n\t                return self.omega_scale(d.omega);\n\t            }).attr(\"y1\", function (d) {\n\t                return self.proportion_scale(-0.05);\n\t            }).attr(\"y2\", function (d) {\n\t                return self.proportion_scale(d.weight);\n\t            }).style(\"stroke\", function (d) {\n\t                return \"#d62728\";\n\t            }).attr(\"class\", \"hyphy-omega-line-reference\");\n\t        } else {\n\t            this.reference_omega_lines.remove();\n\t            this.displacement_lines.remove();\n\t        }\n\t    },\n\t    createOmegaLine: function createOmegaLine() {\n\t\n\t        var data_to_plot = this.state.omegas[\"Reference\"];\n\t        var secondary_data = this.state.omegas[\"Test\"];\n\t        var self = this;\n\t\n\t        // ** Omega Line (Red) ** //\n\t        var omega_lines = this.plot.selectAll(\".hyphy-omega-line\").data(secondary_data ? secondary_data : data_to_plot);\n\t        omega_lines.enter().append(\"line\");\n\t        omega_lines.exit().remove();\n\t        omega_lines.transition().attr(\"x1\", function (d) {\n\t            return self.omega_scale(d.omega);\n\t        }).attr(\"x2\", function (d) {\n\t            return self.omega_scale(d.omega);\n\t        }).attr(\"y1\", function (d) {\n\t            return self.proportion_scale(-0.05);\n\t        }).attr(\"y2\", function (d) {\n\t            return self.proportion_scale(d.weight);\n\t        }).style(\"stroke\", function (d) {\n\t            return \"#1f77b4\";\n\t        }).attr(\"class\", \"hyphy-omega-line\");\n\t    },\n\t    createNeutralLine: function createNeutralLine() {\n\t        var self = this;\n\t\n\t        // ** Neutral Line (Blue) ** //\n\t        var neutral_line = this.plot.selectAll(\".hyphy-neutral-line\").data([1]);\n\t        neutral_line.enter().append(\"line\").attr(\"class\", \"hyphy-neutral-line\");\n\t        neutral_line.exit().remove();\n\t        neutral_line.transition().attr(\"x1\", function (d) {\n\t            return self.omega_scale(d);\n\t        }).attr(\"x2\", function (d) {\n\t            return self.omega_scale(d);\n\t        }).attr(\"y1\", 0).attr(\"y2\", this.plot_height);\n\t    },\n\t    createXAxis: function createXAxis() {\n\t\n\t        // *** X-AXIS *** //\n\t        var xAxis = d3.svg.axis().scale(this.omega_scale).orient(\"bottom\");\n\t\n\t        if (this.do_log_plot) {\n\t            xAxis.ticks(10, this.has_zeros ? \".2r\" : \".1r\");\n\t        }\n\t\n\t        var x_axis = this.svg.selectAll(\".x.axis\");\n\t        var x_label;\n\t\n\t        if (x_axis.empty()) {\n\t            x_axis = this.svg.append(\"g\").attr(\"class\", \"x hyphy-axis\");\n\t\n\t            x_label = x_axis.append(\"g\").attr(\"class\", \"hyphy-axis-label x-label\");\n\t        } else {\n\t            x_label = x_axis.select(\".axis-label.x-label\");\n\t        }\n\t\n\t        x_axis.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \",\" + (this.plot_height + this.margins[\"top\"]) + \")\").call(xAxis);\n\t        x_label = x_label.attr(\"transform\", \"translate(\" + this.plot_width + \",\" + this.margins[\"bottom\"] + \")\").selectAll(\"text\").data(['\\u03C9']);\n\t        x_label.enter().append(\"text\");\n\t        x_label.text(function (d) {\n\t            return d;\n\t        }).style(\"text-anchor\", \"end\").attr(\"dy\", \"0.0em\");\n\t    },\n\t    createYAxis: function createYAxis() {\n\t\n\t        // *** Y-AXIS *** //\n\t        var yAxis = d3.svg.axis().scale(this.proportion_scale).orient(\"left\").ticks(10, \".1p\");\n\t\n\t        var y_axis = this.svg.selectAll(\".y.hyphy-axis\");\n\t        var y_label;\n\t\n\t        if (y_axis.empty()) {\n\t            y_axis = this.svg.append(\"g\").attr(\"class\", \"y hyphy-axis\");\n\t            y_label = y_axis.append(\"g\").attr(\"class\", \"hyphy-axis-label y-label\");\n\t        } else {\n\t            y_label = y_axis.select(\".hyphy-axis-label.y-label\");\n\t        }\n\t        y_axis.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \",\" + this.margins[\"top\"] + \")\").call(yAxis);\n\t        y_label = y_label.attr(\"transform\", \"translate(\" + -this.margins[\"left\"] + \",\" + 0 + \")\").selectAll(\"text\").data([\"Proportion of sites\"]);\n\t        y_label.enter().append(\"text\");\n\t        y_label.text(function (d) {\n\t            return d;\n\t        }).style(\"text-anchor\", \"start\").attr(\"dy\", \"-1em\");\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t        return {\n\t            omegas: this.props.omegas,\n\t            settings: this.props.settings\n\t        };\n\t    },\n\t\n\t    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t        this.setState({\n\t            omegas: nextProps.omegas\n\t        });\n\t    },\n\t\n\t    componentDidUpdate: function componentDidUpdate() {\n\t        this.initialize();\n\t    },\n\t\n\t    componentDidMount: function componentDidMount() {\n\t        this.initialize();\n\t    },\n\t\n\t    render: function render() {\n\t\n\t        var key = this.props.omegas.key,\n\t            label = this.props.omegas.label;\n\t\n\t        this.svg_id = key + \"-svg\";\n\t        this.save_svg_id = \"export-\" + key + \"-svg\";\n\t        this.save_png_id = \"export-\" + key + \"-png\";\n\t\n\t        return React.createElement(\n\t            'div',\n\t            { className: 'col-lg-6' },\n\t            React.createElement(\n\t                'div',\n\t                { className: 'panel panel-default', id: key },\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'panel-heading' },\n\t                    React.createElement(\n\t                        'h3',\n\t                        { className: 'panel-title' },\n\t                        '\\u03C9 distributions under the ',\n\t                        React.createElement(\n\t                            'strong',\n\t                            null,\n\t                            label\n\t                        ),\n\t                        ' model'\n\t                    ),\n\t                    React.createElement(\n\t                        'p',\n\t                        null,\n\t                        React.createElement(\n\t                            'small',\n\t                            null,\n\t                            'Test branches are shown in ',\n\t                            React.createElement(\n\t                                'span',\n\t                                { className: 'hyphy-blue' },\n\t                                'blue'\n\t                            ),\n\t                            ' and reference branches are shown in ',\n\t                            React.createElement(\n\t                                'span',\n\t                                { className: 'hyphy-red' },\n\t                                'red'\n\t                            )\n\t                        )\n\t                    ),\n\t                    React.createElement(\n\t                        'div',\n\t                        { className: 'btn-group' },\n\t                        React.createElement(\n\t                            'button',\n\t                            { id: this.save_svg_id, type: 'button', className: 'btn btn-default btn-sm' },\n\t                            React.createElement('span', { className: 'glyphicon glyphicon-floppy-save' }),\n\t                            ' SVG'\n\t                        ),\n\t                        React.createElement(\n\t                            'button',\n\t                            { id: this.save_png_id, type: 'button', className: 'btn btn-default btn-sm' },\n\t                            React.createElement('span', { className: 'glyphicon glyphicon-floppy-save' }),\n\t                            ' PNG'\n\t                        )\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'panel-body' },\n\t                    React.createElement('svg', { id: this.svg_id })\n\t                )\n\t            )\n\t        );\n\t    }\n\t});\n\t\n\tvar OmegaPlotGrid = React.createClass({\n\t    displayName: 'OmegaPlotGrid',\n\t\n\t\n\t    getInitialState: function getInitialState() {\n\t        return { omega_distributions: this.getDistributions(this.props.json) };\n\t    },\n\t\n\t    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t\n\t        this.setState({\n\t            omega_distributions: this.getDistributions(nextProps.json)\n\t        });\n\t    },\n\t\n\t    getDistributions: function getDistributions(json) {\n\t\n\t        var omega_distributions = {};\n\t\n\t        if (!json) {\n\t            return [];\n\t        }\n\t\n\t        for (var m in json[\"fits\"]) {\n\t            var this_model = json[\"fits\"][m];\n\t            omega_distributions[m] = {};\n\t            var distributions = [];\n\t            for (var d in this_model[\"rate-distributions\"]) {\n\t                var this_distro = this_model[\"rate-distributions\"][d];\n\t                var this_distro_entry = [d, \"\", \"\", \"\"];\n\t                omega_distributions[m][d] = this_distro.map(function (d) {\n\t                    return {\n\t                        'omega': d[0],\n\t                        'weight': d[1]\n\t                    };\n\t                });\n\t            }\n\t        }\n\t\n\t        _.each(omega_distributions, function (item, key) {\n\t            item.key = key.toLowerCase().replace(/ /g, '-');\n\t            item.label = key;\n\t        });\n\t\n\t        var omega_distributions = _.filter(omega_distributions, function (item) {\n\t            return _.isObject(item[\"Reference\"]);\n\t        });\n\t\n\t        return omega_distributions;\n\t    },\n\t\n\t    render: function render() {\n\t\n\t        var OmegaPlots = _.map(this.state.omega_distributions, function (item, key) {\n\t\n\t            var model_name = key;\n\t            var omegas = item;\n\t\n\t            var settings = {\n\t                svg_id: omegas.key + '-svg',\n\t                dimensions: { width: 600, height: 400 },\n\t                margins: { 'left': 50, 'right': 15, 'bottom': 35, 'top': 35 },\n\t                has_zeros: false,\n\t                legend_id: null,\n\t                do_log_plot: true,\n\t                k_p: null,\n\t                plot: null\n\t            };\n\t\n\t            return React.createElement(OmegaPlot, { name: model_name, omegas: omegas, settings: settings });\n\t        });\n\t\n\t        return React.createElement(\n\t            'div',\n\t            null,\n\t            OmegaPlots\n\t        );\n\t    }\n\t\n\t});\n\t\n\tmodule.exports.OmegaPlot = OmegaPlot;\n\tmodule.exports.OmegaPlotGrid = OmegaPlotGrid;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40)))\n\n/***/ },\n\n/***/ 224:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, $) {'use strict';\n\t\n\tvar _shared_summary = __webpack_require__(225);\n\t\n\tvar _slac_sites = __webpack_require__(226);\n\t\n\tvar _slac_summary = __webpack_require__(227);\n\t\n\tvar React = __webpack_require__(46),\n\t    ReactDOM = __webpack_require__(209),\n\t    _ = __webpack_require__(43);\n\t\n\tvar datamonkey = __webpack_require__(39);\n\t__webpack_require__(228);\n\t\n\tvar SLAC = React.createClass({\n\t    displayName: 'SLAC',\n\t\n\t\n\t    float_format: d3.format(\".2f\"),\n\t\n\t    dm_loadFromServer: function dm_loadFromServer() {\n\t        /* 20160721 SLKP: prefixing all custom (i.e. not defined by REACT) with dm_\n\t           to make it easier to recognize scoping immediately */\n\t\n\t        var self = this;\n\t\n\t        d3.json(self.props.url, function (request_error, data) {\n\t\n\t            if (!data) {\n\t                var error_message_text = request_error.status == 404 ? self.props.url + \" could not be loaded\" : request_error.statusText;\n\t                self.setState({ error_message: error_message_text });\n\t            } else {\n\t                self.dm_initializeFromJSON(data);\n\t            }\n\t        });\n\t    },\n\t\n\t    dm_initializeFromJSON: function dm_initializeFromJSON(data) {\n\t        this.setState({ analysis_results: data });\n\t    },\n\t\n\t    getDefaultProps: function getDefaultProps() {\n\t        /* default properties for the component */\n\t\n\t        return {\n\t            url: \"#\"\n\t        };\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t\n\t        return {\n\t            analysis_results: null,\n\t            error_message: null,\n\t            pValue: 0.1\n\t        };\n\t    },\n\t\n\t    componentWillMount: function componentWillMount() {\n\t        this.dm_loadFromServer();\n\t        this.dm_setEvents();\n\t    },\n\t\n\t    dm_setEvents: function dm_setEvents() {\n\t\n\t        var self = this;\n\t\n\t        $(\"#datamonkey-json-file\").on(\"change\", function (e) {\n\t\n\t            var files = e.target.files; // FileList object\n\t\n\t            if (files.length == 1) {\n\t                var f = files[0];\n\t                var reader = new FileReader();\n\t\n\t                reader.onload = function (theFile) {\n\t                    return function (e) {\n\t                        try {\n\t                            self.dm_initializeFromJSON(JSON.parse(this.result));\n\t                        } catch (error) {\n\t                            self.setState({ error_message: error.toString() });\n\t                        }\n\t                    };\n\t                }(f);\n\t\n\t                reader.readAsText(f);\n\t            }\n\t\n\t            $(\"#datamonkey-json-file-toggle\").dropdown(\"toggle\");\n\t        });\n\t    },\n\t\n\t    dm_adjustPvalue: function dm_adjustPvalue(event) {\n\t        this.setState({ pValue: parseFloat(event.target.value) });\n\t    },\n\t\n\t    render: function render() {\n\t\n\t        var self = this;\n\t\n\t        if (self.state.error_message) {\n\t            return React.createElement(\n\t                'div',\n\t                { id: 'datamonkey-error', className: 'alert alert-danger alert-dismissible', role: 'alert' },\n\t                React.createElement(\n\t                    'button',\n\t                    { type: 'button', className: 'close', 'data-dismiss': 'alert', 'aria-label': 'Close' },\n\t                    React.createElement(\n\t                        'span',\n\t                        { 'aria-hidden': 'true' },\n\t                        '\\xD7'\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    'strong',\n\t                    null,\n\t                    self.state.error_message\n\t                ),\n\t                ' ',\n\t                React.createElement('span', { id: 'datamonkey-error-text' })\n\t            );\n\t        }\n\t\n\t        if (self.state.analysis_results) {\n\t\n\t            return React.createElement(\n\t                'div',\n\t                { className: 'tab-content' },\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'tab-pane', id: 'summary_tab' },\n\t                    React.createElement(\n\t                        'div',\n\t                        { className: 'row' },\n\t                        React.createElement(\n\t                            'div',\n\t                            { id: 'summary-div', className: 'col-md-12' },\n\t                            React.createElement(_slac_summary.SLACBanner, { analysis_results: self.state.analysis_results, pValue: self.state.pValue, pAdjuster: _.bind(self.dm_adjustPvalue, self) })\n\t                        )\n\t                    ),\n\t                    React.createElement(\n\t                        'div',\n\t                        { className: 'row hidden-print' },\n\t                        React.createElement(\n\t                            'div',\n\t                            { id: 'datamonkey-slac-tree-summary', className: 'col-lg-4 col-md-6 col-sm-12' },\n\t                            React.createElement(\n\t                                'div',\n\t                                { className: 'panel panel-default' },\n\t                                React.createElement(\n\t                                    'div',\n\t                                    { className: 'panel-heading' },\n\t                                    React.createElement(\n\t                                        'h3',\n\t                                        { className: 'panel-title' },\n\t                                        React.createElement('i', { className: 'fa fa-puzzle-piece' }),\n\t                                        ' Partition information'\n\t                                    )\n\t                                ),\n\t                                React.createElement(\n\t                                    'div',\n\t                                    { className: 'panel-body' },\n\t                                    React.createElement(\n\t                                        'small',\n\t                                        null,\n\t                                        React.createElement(_shared_summary.DatamonkeyPartitionTable, {\n\t                                            pValue: self.state.pValue,\n\t                                            trees: self.state.analysis_results.trees,\n\t                                            partitions: self.state.analysis_results.partitions,\n\t                                            branchAttributes: self.state.analysis_results['branch attributes'],\n\t                                            siteResults: self.state.analysis_results.MLE,\n\t                                            accessorPositive: function accessorPositive(json, partition) {\n\t                                                return _.map(json[\"content\"][partition][\"by-site\"][\"AVERAGED\"], function (v) {\n\t                                                    return v[8];\n\t                                                });\n\t                                            },\n\t                                            accessorNegative: function accessorNegative(json, partition) {\n\t                                                return _.map(json[\"content\"][partition][\"by-site\"][\"AVERAGED\"], function (v) {\n\t                                                    return v[9];\n\t                                                });\n\t                                            }\n\t                                        })\n\t                                    )\n\t                                )\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            'div',\n\t                            { id: 'datamonkey-slac-model-fits', className: 'col-lg-5 col-md-6 col-sm-12' },\n\t                            React.createElement(\n\t                                'div',\n\t                                { className: 'panel panel-default' },\n\t                                React.createElement(\n\t                                    'div',\n\t                                    { className: 'panel-heading' },\n\t                                    React.createElement(\n\t                                        'h3',\n\t                                        { className: 'panel-title' },\n\t                                        React.createElement('i', { className: 'fa fa-table' }),\n\t                                        ' Model fits'\n\t                                    )\n\t                                ),\n\t                                React.createElement(\n\t                                    'div',\n\t                                    { className: 'panel-body' },\n\t                                    React.createElement(\n\t                                        'small',\n\t                                        null,\n\t                                        React.createElement(_shared_summary.DatamonkeyModelTable, { fits: self.state.analysis_results.fits })\n\t                                    )\n\t                                )\n\t                            )\n\t                        ),\n\t                        React.createElement(\n\t                            'div',\n\t                            { id: 'datamonkey-slac-timers', className: 'col-lg-3 col-md-3 col-sm-12' },\n\t                            React.createElement(\n\t                                'div',\n\t                                { className: 'panel panel-default' },\n\t                                React.createElement(\n\t                                    'div',\n\t                                    { className: 'panel-heading' },\n\t                                    React.createElement(\n\t                                        'h3',\n\t                                        { className: 'panel-title' },\n\t                                        React.createElement('i', { className: 'fa fa-clock-o' }),\n\t                                        ' Execution time'\n\t                                    )\n\t                                ),\n\t                                React.createElement(\n\t                                    'div',\n\t                                    { className: 'panel-body' },\n\t                                    React.createElement(\n\t                                        'small',\n\t                                        null,\n\t                                        React.createElement(_shared_summary.DatamonkeyTimersTable, { timers: self.state.analysis_results.timers, totalTime: \"Total time\" })\n\t                                    )\n\t                                )\n\t                            )\n\t                        )\n\t                    )\n\t                ),\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'tab-pane active', id: 'sites_tab' },\n\t                    React.createElement(\n\t                        'div',\n\t                        { className: 'row' },\n\t                        React.createElement(\n\t                            'div',\n\t                            { id: 'summary-div', className: 'col-md-12' },\n\t                            React.createElement(_slac_sites.SLACSites, {\n\t                                headers: self.state.analysis_results.MLE.headers,\n\t                                mle: datamonkey.helpers.map(datamonkey.helpers.filter(self.state.analysis_results.MLE.content, function (value, key) {\n\t                                    return _.has(value, \"by-site\");\n\t                                }), function (value, key) {\n\t                                    return value[\"by-site\"];\n\t                                }),\n\t                                sample25: self.state.analysis_results[\"sample-2.5\"],\n\t                                sampleMedian: self.state.analysis_results[\"sample-median\"],\n\t                                sample975: self.state.analysis_results[\"sample-97.5\"],\n\t                                partitionSites: self.state.analysis_results.partitions\n\t                            })\n\t                        )\n\t                    )\n\t                ),\n\t                React.createElement('div', { className: 'tab-pane', id: 'tree_tab' })\n\t            );\n\t        }\n\t        return null;\n\t    }\n\t\n\t});\n\t\n\t// Will need to make a call to this\n\t// omega distributions\n\tfunction render_slac(url, element) {\n\t    ReactDOM.render(React.createElement(SLAC, { url: url }), document.getElementById(element));\n\t}\n\t\n\tmodule.exports = render_slac;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40), __webpack_require__(2)))\n\n/***/ },\n\n/***/ 225:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(_, d3) {'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar React = __webpack_require__(46);\n\tvar datamonkey = __webpack_require__(39);\n\t\n\tvar DatamonkeyTableRow = React.createClass({\n\t    displayName: 'DatamonkeyTableRow',\n\t\n\t    /**\n\t        A single table row\n\t    \n\t        *rowData* is an array of cells\n\t            each cell can be one of\n\t                1. string: simply render the text as shown\n\t                2. object: a polymorphic case; can be rendered directly (if the object is a valid react.js element)\n\t                   or via a transformation of the value associated with the key 'value'\n\t    \n\t                   supported keys\n\t                    2.1. 'value' : the value to use to generate cell context\n\t                    2.2. 'format' : the function (returning something react.js can render directly) that will be called\n\t                    to transform 'value' into the object to be rendered\n\t                    2.3. 'span' : colSpan attribute\n\t                    2.4. 'style': CSS style attributes (JSX specification, i.e. {margin-top: '1em'} and not a string)\n\t                    2.5. 'classes': CSS classes to apply to the cell\n\t                    2.6. 'abbr': wrap cell value in <abbr> tags\n\t    \n\t                3. array: directly render array elements in the cell (must be renderable to react.js; note that plain\n\t                text elements will be wrapped in \"span\" which is not allowed to nest in <th/td>\n\t    \n\t    \n\t        *header* is a bool indicating whether the header is a header row (th cells) or a regular row (td cells)\n\t    */\n\t\n\t    /*propTypes: {\n\t     rowData: React.PropTypes.arrayOf (React.PropTypes.oneOfType ([React.PropTypes.string,React.PropTypes.number,React.PropTypes.object,React.PropTypes.array])).isRequired,\n\t     header:  React.PropTypes.bool,\n\t    },*/\n\t\n\t    dm_compareTwoValues: function dm_compareTwoValues(a, b) {\n\t        /**\n\t            compare objects by iterating over keys\n\t        */\n\t\n\t        var myType = typeof a === 'undefined' ? 'undefined' : _typeof(a),\n\t            self = this;\n\t\n\t        if (myType == (typeof b === 'undefined' ? 'undefined' : _typeof(b))) {\n\t            if (myType == \"string\" || myType == \"number\") {\n\t                return a == b ? 1 : 0;\n\t            }\n\t\n\t            if (_.isArray(a) && _.isArray(b)) {\n\t\n\t                if (a.length != b.length) {\n\t                    return 0;\n\t                }\n\t\n\t                var not_compared = 0;\n\t                var result = _.every(a, function (c, i) {\n\t                    var comp = self.dm_compareTwoValues(c, b[i]);if (comp < 0) {\n\t                        not_compared = comp;return false;\n\t                    }return comp == 1;\n\t                });\n\t\n\t                if (not_compared < 0) {\n\t                    return not_compared;\n\t                }\n\t\n\t                return result ? 1 : 0;\n\t            }\n\t\n\t            return -2;\n\t        }\n\t        return -1;\n\t    },\n\t\n\t    dm_log100times: _.before(100, function (v) {\n\t        console.log(v);\n\t        return 0;\n\t    }),\n\t\n\t    shouldComponentUpdate: function shouldComponentUpdate(nextProps) {\n\t\n\t        var self = this;\n\t\n\t        if (this.props.header !== nextProps.header) {\n\t            return true;\n\t        }\n\t\n\t        var result = _.some(this.props.rowData, function (value, index) {\n\t            /** TO DO\n\t                check for format and other field equality\n\t            */\n\t            if (value === nextProps.rowData[index]) {\n\t                return false;\n\t            }\n\t\n\t            var compare = self.dm_compareTwoValues(value, nextProps.rowData[index]);\n\t            if (compare >= 0) {\n\t                return compare == 0;\n\t            }\n\t\n\t            if (compare == -2) {\n\t                if (_.has(value, \"value\") && _.has(nextProps.rowData[index], \"value\")) {\n\t                    return self.dm_compareTwoValues(value.value, nextProps.rowData[index].value) != 1;\n\t                }\n\t            }\n\t\n\t            return true;\n\t        });\n\t\n\t        if (result) {\n\t            this.dm_log100times([\"Old\", this.props.rowData, \"New\", nextProps.rowData]);\n\t        }\n\t\n\t        return result;\n\t    },\n\t\n\t    render: function render() {\n\t        return React.createElement(\n\t            'tr',\n\t            null,\n\t            this.props.rowData.map(_.bind(function (cell, index) {\n\t\n\t                var value = _.has(cell, \"value\") ? cell.value : cell;\n\t\n\t                if (_.isArray(value)) {\n\t                    if (!_.has(cell, \"format\")) {\n\t                        return value;\n\t                    }\n\t                } else {\n\t                    if (_.isObject(value)) {\n\t                        if (!React.isValidElement(value)) {\n\t                            return null;\n\t                        }\n\t                    }\n\t                }\n\t\n\t                if (_.has(cell, \"format\")) {\n\t                    value = cell.format(value);\n\t                }\n\t\n\t                if (_.has(cell, \"abbr\")) {\n\t                    value = React.createElement(\n\t                        'abbr',\n\t                        { title: cell.abbr },\n\t                        value\n\t                    );\n\t                }\n\t\n\t                var cellProps = { key: index };\n\t\n\t                if (_.has(cell, \"span\")) {\n\t                    cellProps[\"colSpan\"] = cell.span;\n\t                }\n\t\n\t                if (_.has(cell, \"style\")) {\n\t                    cellProps[\"style\"] = cell.style;\n\t                }\n\t\n\t                if (_.has(cell, \"classes\")) {\n\t                    cellProps[\"className\"] = cell.classes;\n\t                }\n\t\n\t                return React.createElement(this.props.header ? \"th\" : \"td\", cellProps, value);\n\t            }, this))\n\t        );\n\t    }\n\t});\n\t\n\tvar DatamonkeyTable = React.createClass({\n\t    displayName: 'DatamonkeyTable',\n\t\n\t    /**\n\t        A table composed of rows\n\t            *headerData* -- an array of cells (see DatamonkeyTableRow) to render as the header\n\t            *bodyData* -- an array of arrays of cells (rows) to render\n\t            *classes* -- CSS classes to apply to the table element\n\t    */\n\t\n\t    /*propTypes: {\n\t        headerData: React.PropTypes.array,\n\t        bodyData: React.PropTypes.arrayOf (React.PropTypes.array),\n\t    },*/\n\t\n\t    getDefaultProps: function getDefaultProps() {\n\t        return { classes: \"table table-condensed table-hover\",\n\t            rowHash: null,\n\t            sortableColumns: new Object(null),\n\t            initialSort: null\n\t        };\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t        return { sortedOn: this.props.initialSort };\n\t    },\n\t\n\t    render: function render() {\n\t        var children = [];\n\t\n\t        if (this.props.headerData) {\n\t            if (_.isArray(this.props.headerData[0])) {\n\t                // multiple rows\n\t                children.push(React.createElement(\n\t                    'thead',\n\t                    { key: 0 },\n\t                    _.map(this.props.headerData, function (row, index) {\n\t                        return React.createElement(DatamonkeyTableRow, { rowData: row, header: true, key: index });\n\t                    })\n\t                ));\n\t            } else {\n\t                children.push(React.createElement(\n\t                    'thead',\n\t                    { key: 0 },\n\t                    React.createElement(DatamonkeyTableRow, { rowData: this.props.headerData, header: true })\n\t                ));\n\t            }\n\t        }\n\t\n\t        children.push(React.createElement(\"tbody\", { key: 1 }, _.map(this.props.bodyData, _.bind(function (componentData, index) {\n\t            return React.createElement(DatamonkeyTableRow, { rowData: componentData, key: this.props.rowHash ? this.props.rowHash(componentData) : index, header: false });\n\t        }, this))));\n\t\n\t        return React.createElement(\"table\", { className: this.props.classes }, children);\n\t    }\n\t});\n\t\n\tvar DatamonkeyRateDistributionTable = React.createClass({\n\t    displayName: 'DatamonkeyRateDistributionTable',\n\t\n\t\n\t    /** render a rate distribution table from JSON formatted like this\n\t    {\n\t         \"non-synonymous/synonymous rate ratio for *background*\":[ // name of distribution\n\t          [0.1701428265961598, 1] // distribution points (rate, weight)\n\t          ],\n\t         \"non-synonymous/synonymous rate ratio for *test*\":[\n\t          [0.1452686330406915, 1]\n\t          ]\n\t    }\n\t     */\n\t\n\t    propTypes: {\n\t        distribution: React.PropTypes.object.isRequired\n\t    },\n\t\n\t    dm_formatterRate: d3.format(\".3r\"),\n\t    dm_formatterProp: d3.format(\".3p\"),\n\t\n\t    dm_createDistributionTable: function dm_createDistributionTable(jsonRates) {\n\t        var rowData = [];\n\t        var self = this;\n\t        _.each(jsonRates, function (value, key) {\n\t            rowData.push([{ value: key, span: 3, classes: \"info\" }]);\n\t            _.each(value, function (rate, index) {\n\t                rowData.push([{ value: rate[1], format: self.dm_formatterProp }, '@', { value: rate[0], format: self.dm_formatterRate }]);\n\t            });\n\t        });\n\t        return rowData;\n\t    },\n\t\n\t    render: function render() {\n\t        return React.createElement(DatamonkeyTable, { bodyData: this.dm_createDistributionTable(this.props.distribution), classes: \"table table-condensed\" });\n\t    }\n\t\n\t});\n\t\n\tvar DatamonkeyPartitionTable = React.createClass({\n\t    displayName: 'DatamonkeyPartitionTable',\n\t\n\t\n\t    dm_formatterFloat: d3.format(\".3r\"),\n\t    dm_formatterProp: d3.format(\".3p\"),\n\t\n\t    propTypes: {\n\t        trees: React.PropTypes.object.isRequired,\n\t        partitions: React.PropTypes.object.isRequired,\n\t        branchAttributes: React.PropTypes.object.isRequired,\n\t        siteResults: React.PropTypes.object.isRequired,\n\t        accessorNegative: React.PropTypes.func.isRequired,\n\t        accessorPositive: React.PropTypes.func.isRequired,\n\t        pValue: React.PropTypes.number.isRequired\n\t    },\n\t\n\t    dm_computePartitionInformation: function dm_computePartitionInformation(trees, partitions, attributes, pValue) {\n\t\n\t        var partitionKeys = _.sortBy(_.keys(partitions), function (v) {\n\t            return v;\n\t        }),\n\t            matchingKey = null,\n\t            self = this;\n\t\n\t        var extractBranchLength = this.props.extractOn || _.find(attributes.attributes, function (value, key) {\n\t            matchingKey = key;return value[\"attribute type\"] == \"branch length\";\n\t        });\n\t        if (matchingKey) {\n\t            extractBranchLength = matchingKey;\n\t        }\n\t\n\t        return _.map(partitionKeys, function (key, index) {\n\t            var treeBranches = trees.tested[key],\n\t                tested = {};\n\t\n\t            _.each(treeBranches, function (value, key) {\n\t                if (value == \"test\") tested[key] = 1;\n\t            });\n\t\n\t            var testedLength = extractBranchLength ? datamonkey.helpers.sum(attributes[key], function (v, k) {\n\t                if (tested[k.toUpperCase()]) {\n\t                    return v[extractBranchLength];\n\t                }return 0;\n\t            }) : 0;\n\t            var totalLength = extractBranchLength ? datamonkey.helpers.sum(attributes[key], function (v) {\n\t                return v[extractBranchLength] || 0;\n\t            }) : 0; // || 0 is to resolve root node missing length\n\t\n\t\n\t            return _.map([index + 1, // 1-based partition index\n\t            partitions[key].coverage[0].length, // number of sites in the partition\n\t            _.size(tested), // tested branches\n\t            _.keys(treeBranches).length, // total branches\n\t            testedLength, testedLength / totalLength, totalLength, _.filter(self.props.accessorPositive(self.props.siteResults, key), function (p) {\n\t                return p <= pValue;\n\t            }).length, _.filter(self.props.accessorNegative(self.props.siteResults, key), function (p) {\n\t                return p <= pValue;\n\t            }).length], function (cell, index) {\n\t                if (index > 1) {\n\t                    var attributedCell = { value: cell,\n\t                        style: { textAlign: 'center' } };\n\t\n\t                    if (index == 4 || index == 6) {\n\t                        _.extend(attributedCell, { 'format': self.dm_formatterFloat });\n\t                    }\n\t                    if (index == 5) {\n\t                        _.extend(attributedCell, { 'format': self.dm_formatterProp });\n\t                    }\n\t\n\t                    return attributedCell;\n\t                }\n\t                return cell;\n\t            });\n\t        });\n\t    },\n\t\n\t    dm_makeHeaderRow: function dm_makeHeaderRow(pValue) {\n\t        return [_.map([\"Partition\", \"Sites\", \"Branches\", \"Branch Length\", \"Selected at p\" + String.fromCharCode(parseInt(\"2264\", 16)) + pValue], function (d, i) {\n\t            return _.extend({ value: d, style: { borderBottom: 0, textAlign: i > 1 ? 'center' : 'left' } }, i > 1 ? { 'span': i == 3 ? 3 : 2 } : {});\n\t        }), _.map([\"\", \"\", \"Tested\", \"Total\", \"Tested\", \"% of total\", \"Total\", \"Positive\", \"Negative\"], function (d, i) {\n\t            return { value: d, style: { borderTop: 0, textAlign: i > 1 ? 'center' : 'left' } };\n\t        })];\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t        return {\n\t            header: this.dm_makeHeaderRow(this.props.pValue),\n\t            rows: this.dm_computePartitionInformation(this.props.trees, this.props.partitions, this.props.branchAttributes, this.props.pValue)\n\t        };\n\t    },\n\t\n\t    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t        this.setState({\n\t            header: this.dm_makeHeaderRow(nextProps.pValue),\n\t            rows: this.dm_computePartitionInformation(nextProps.trees, nextProps.partitions, nextProps.branchAttributes, nextProps.pValue)\n\t        });\n\t    },\n\t\n\t    render: function render() {\n\t        return React.createElement(\n\t            'div',\n\t            { className: 'table-responsive' },\n\t            React.createElement(DatamonkeyTable, { headerData: this.state.header, bodyData: this.state.rows })\n\t        );\n\t    }\n\t});\n\t\n\tvar DatamonkeyModelTable = React.createClass({\n\t    displayName: 'DatamonkeyModelTable',\n\t\n\t\n\t    /** render a model fit table from a JSON object with entries like this\n\t            \"Global MG94xREV\":{ // model name\n\t               \"log likelihood\":-5453.527975908821,\n\t               \"parameters\":131,\n\t               \"AIC-c\":11172.05569160427,\n\t               \"rate distributions\":{\n\t                 \"non-synonymous/synonymous rate ratio for *background*\":[\n\t                  [0.1701428265961598, 1]\n\t                  ],\n\t                 \"non-synonymous/synonymous rate ratio for *test*\":[\n\t                  [0.1452686330406915, 1]\n\t                  ]\n\t                },\n\t               \"display order\":0\n\t              }\n\t       dm_supportedColumns controls which keys from model specification will be consumed;\n\t          * 'value' is the cell specification to be consumed by DatamonkeyTableRow\n\t          * 'order' is the column order in the resulting table (relative; doesn't have to be sequential)\n\t          * 'display_format' is a formatting function for cell entries\n\t          * 'transform' is a data trasformation function for cell entries\n\t     */\n\t\n\t    dm_numberFormatter: d3.format(\".2f\"),\n\t\n\t    dm_supportedColumns: { 'log likelihood': { order: 2,\n\t            value: { \"value\": \"log L\", \"abbr\": \"log likelihood\" },\n\t            display_format: d3.format(\".2f\") },\n\t        'parameters': { order: 3,\n\t            value: \"Parameters\" },\n\t        'AIC-c': { order: 1,\n\t            value: { value: React.createElement('span', null, ['AIC', React.createElement(\n\t                    'sub',\n\t                    { key: '0' },\n\t                    'C'\n\t                )]),\n\t                abbr: \"Small-sample corrected Akaike Information Score\" },\n\t            display_format: d3.format(\".2f\") },\n\t        'rate distributions': { order: 4,\n\t            value: \"Rate distributions\",\n\t            transform: function transform(value) {\n\t                return React.createElement(DatamonkeyRateDistributionTable, { distribution: value });\n\t            } }\n\t    },\n\t\n\t    propTypes: {\n\t        fits: React.PropTypes.object.isRequired\n\t    },\n\t\n\t    getDefaultProps: function getDefaultProps() {\n\t        return {\n\t            orderOn: \"display order\"\n\t        };\n\t    },\n\t\n\t    dm_extractFitsTable: function dm_extractFitsTable(jsonTable) {\n\t        var modelList = [];\n\t        var columnMap = null;\n\t        var columnMapIterator = [];\n\t        var valueFormat = {};\n\t        var valueTransform = {};\n\t        var rowData = [];\n\t        var self = this;\n\t\n\t        _.each(jsonTable, function (value, key) {\n\t            if (!columnMap) {\n\t                columnMap = {};\n\t                _.each(value, function (cellValue, cellName) {\n\t                    if (self.dm_supportedColumns[cellName]) {\n\t                        columnMap[cellName] = self.dm_supportedColumns[cellName];\n\t                        columnMapIterator[columnMap[cellName].order] = cellName;\n\t                        valueFormat[cellName] = self.dm_supportedColumns[cellName][\"display_format\"];\n\t                        if (_.isFunction(self.dm_supportedColumns[cellName][\"transform\"])) {\n\t                            valueTransform[cellName] = self.dm_supportedColumns[cellName][\"transform\"];\n\t                        }\n\t                    }\n\t                });\n\t                columnMapIterator = _.filter(columnMapIterator, function (v) {\n\t                    return v;\n\t                });\n\t            }\n\t\n\t            var thisRow = [{ value: key, style: { fontVariant: \"small-caps\" } }];\n\t\n\t            _.each(columnMapIterator, function (tag) {\n\t\n\t                var myValue = valueTransform[tag] ? valueTransform[tag](value[tag]) : value[tag];\n\t\n\t                if (valueFormat[tag]) {\n\t                    thisRow.push({ 'value': myValue, 'format': valueFormat[tag] });\n\t                } else {\n\t                    thisRow.push(myValue);\n\t                }\n\t            });\n\t\n\t            rowData.push([thisRow, _.isNumber(value[self.props.orderOn]) ? value[self.props.orderOn] : rowData.length]);\n\t        });\n\t\n\t        return { 'data': _.map(_.sortBy(rowData, function (value) {\n\t                return value[1];\n\t            }), function (r) {\n\t                return r[0];\n\t            }),\n\t            'columns': _.map(columnMapIterator, function (tag) {\n\t                return columnMap[tag].value;\n\t            }) };\n\t    },\n\t\n\t    dm_makeHeaderRow: function dm_makeHeaderRow(columnMap) {\n\t        var headerRow = ['Model'];\n\t        _.each(columnMap, function (v) {\n\t            headerRow.push(v);\n\t        });\n\t        return headerRow;\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t\n\t        var tableInfo = this.dm_extractFitsTable(this.props.fits);\n\t\n\t        return {\n\t            header: this.dm_makeHeaderRow(tableInfo.columns),\n\t            rows: tableInfo.data,\n\t            caption: null\n\t        };\n\t    },\n\t\n\t    render: function render() {\n\t        return React.createElement(\n\t            'div',\n\t            { className: 'table-responsive' },\n\t            React.createElement(DatamonkeyTable, { headerData: this.state.header, bodyData: this.state.rows })\n\t        );\n\t    }\n\t});\n\t\n\tvar DatamonkeyTimersTable = React.createClass({\n\t    displayName: 'DatamonkeyTimersTable',\n\t\n\t\n\t    dm_percentageFormatter: d3.format(\".2%\"),\n\t\n\t    propTypes: {\n\t        timers: React.PropTypes.object.isRequired\n\t    },\n\t\n\t    dm_formatSeconds: function dm_formatSeconds(seconds) {\n\t\n\t        var fields = [~~(seconds / 3600), ~~(seconds % 3600 / 60), seconds % 60];\n\t\n\t        return _.map(fields, function (d) {\n\t            return d < 10 ? \"0\" + d : \"\" + d;\n\t        }).join(':');\n\t    },\n\t\n\t    dm_extractTimerTable: function dm_extractTimerTable(jsonTable) {\n\t        var totalTime = 0.,\n\t            formattedRows = _.map(jsonTable, _.bind(function (value, key) {\n\t            if (this.props.totalTime) {\n\t                if (key == this.props.totalTime) {\n\t                    totalTime = value['timer'];\n\t                }\n\t            } else {\n\t                totalTime += value['timer'];\n\t            }\n\t            return [key, value['timer'], value['order']];\n\t        }, this));\n\t\n\t        formattedRows = _.sortBy(formattedRows, function (row) {\n\t            return row[2];\n\t        });\n\t\n\t        formattedRows = _.map(formattedRows, _.bind(function (row) {\n\t            var fraction = null;\n\t            if (this.props.totalTime === null || this.props.totalTime != row[0]) {\n\t                row[2] = { \"value\": row[1] / totalTime, \"format\": this.dm_percentageFormatter };\n\t            } else {\n\t                row[2] = \"\";\n\t            }\n\t            row[1] = this.dm_formatSeconds(row[1]);\n\t            return row;\n\t        }, this));\n\t\n\t        return formattedRows;\n\t    },\n\t\n\t    dm_makeHeaderRow: function dm_makeHeaderRow() {\n\t        return ['Task', 'Time', '%'];\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t\n\t        return {\n\t            header: this.dm_makeHeaderRow(),\n\t            rows: this.dm_extractTimerTable(this.props.timers),\n\t            caption: null\n\t        };\n\t    },\n\t\n\t    render: function render() {\n\t        return React.createElement(DatamonkeyTable, { headerData: this.state.header, bodyData: this.state.rows });\n\t    }\n\t});\n\t\n\tmodule.exports.DatamonkeyTable = DatamonkeyTable;\n\tmodule.exports.DatamonkeyTableRow = DatamonkeyTableRow;\n\tmodule.exports.DatamonkeyRateDistributionTable = DatamonkeyRateDistributionTable;\n\tmodule.exports.DatamonkeyPartitionTable = DatamonkeyPartitionTable;\n\tmodule.exports.DatamonkeyModelTable = DatamonkeyModelTable;\n\tmodule.exports.DatamonkeyTimersTable = DatamonkeyTimersTable;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(43), __webpack_require__(40)))\n\n/***/ },\n\n/***/ 226:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(d3, _) {'use strict';\n\t\n\tvar _shared_summary = __webpack_require__(225);\n\t\n\tvar React = __webpack_require__(46);\n\tvar datamonkey = __webpack_require__(39);\n\t\n\tvar SLACSites = React.createClass({\n\t    displayName: 'SLACSites',\n\t\n\t    propTypes: {\n\t        headers: React.PropTypes.arrayOf(React.PropTypes.arrayOf(React.PropTypes.string)).isRequired,\n\t        mle: React.PropTypes.object.isRequired,\n\t        sample25: React.PropTypes.object,\n\t        sampleMedian: React.PropTypes.object,\n\t        sample975: React.PropTypes.object,\n\t        initialAmbigHandling: React.PropTypes.string.isRequired,\n\t        partitionSites: React.PropTypes.object.isRequired\n\t    },\n\t\n\t    getInitialState: function getInitialState() {\n\t        var canDoCI = this.props.sample25 && this.props.sampleMedian && this.props.sample975;\n\t\n\t        return {\n\t\n\t            ambigOptions: this.dm_AmbigOptions(this.props),\n\t            ambigHandling: this.props.initialAmbigHandling,\n\t            filters: new Object(null),\n\t            showIntervals: canDoCI,\n\t            hasCI: canDoCI\n\t        };\n\t    },\n\t\n\t    getDefaultProps: function getDefaultProps() {\n\t\n\t        return {\n\t            sample25: null,\n\t            sampleMedian: null,\n\t            sample975: null,\n\t            initialAmbigHandling: \"RESOLVED\"\n\t        };\n\t    },\n\t\n\t    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t        this.setState({\n\t\n\t            ambigOptions: this.dm_AmbigOptions(nextProps),\n\t            ambigHandling: nextProps.initialAmbigHandling\n\t        });\n\t    },\n\t\n\t    dm_formatNumber: d3.format(\".3r\"),\n\t    dm_formatNumberShort: d3.format(\".2r\"),\n\t\n\t    dm_log10times: _.before(10, function (v) {\n\t        console.log(v);\n\t        return 0;\n\t    }),\n\t\n\t    dm_formatInterval: function dm_formatInterval(values) {\n\t        //this.dm_log10times (values);\n\t\n\t        return this.dm_formatNumber(values[0]) + \" / \" + this.dm_formatNumber(values[2]) + \" [\" + this.dm_formatNumber(values[1]) + \" : \" + this.dm_formatNumber(values[3]) + \"]\";\n\t    },\n\t\n\t    dm_AmbigOptions: function dm_AmbigOptions(theseProps) {\n\t        return _.keys(theseProps.mle[0]);\n\t    },\n\t\n\t    dm_changeAmbig: function dm_changeAmbig(event) {\n\t\n\t        this.setState({\n\t            ambigHandling: event.target.value\n\t        });\n\t    },\n\t\n\t    dm_toggleIntervals: function dm_toggleIntervals(event) {\n\t        this.setState({\n\t            showIntervals: !this.state.showIntervals\n\t        });\n\t    },\n\t\n\t    dm_toggleVariableFilter: function dm_toggleVariableFilter(event) {\n\t\n\t        var filterState = new Object(null);\n\t        _.extend(filterState, this.state.filters);\n\t        filterState[\"variable\"] = this.state.filters[\"variable\"] == \"on\" ? \"off\" : \"on\";\n\t        this.setState({ filters: filterState });\n\t    },\n\t\n\t    dm_makeFilterFunction: function dm_makeFilterFunction() {\n\t\n\t        var filterFunction = null;\n\t\n\t        _.each(this.state.filters, function (value, key) {\n\t            var composeFunction = null;\n\t\n\t            switch (key) {\n\t                case \"variable\":\n\t                    {\n\t                        if (value == \"on\") {\n\t                            composeFunction = function composeFunction(f, partitionIndex, index, site, siteData) {\n\t                                return (!f || f(partitionIndex, index, site, siteData)) && siteData[2] + siteData[3] > 0;\n\t                            };\n\t                        }\n\t                        break;\n\t                    }\n\t            }\n\t\n\t            if (composeFunction) {\n\t                filterFunction = _.wrap(filterFunction, composeFunction);\n\t            }\n\t        });\n\t\n\t        return filterFunction;\n\t    },\n\t\n\t    dm_makeHeaderRow: function dm_makeHeaderRow() {\n\t\n\t        var headers = ['Partition', 'Site'],\n\t            doCI = this.state.showIntervals;\n\t\n\t        if (doCI) {\n\t            var secondRow = ['', ''];\n\t\n\t            _.each(this.props.headers, function (value) {\n\t                headers.push({ value: value[0], abbr: value[1], span: 4, style: { textAlign: 'center' } });\n\t                secondRow.push('MLE');\n\t                secondRow.push('Med');\n\t                secondRow.push('2.5%');\n\t                secondRow.push('97.5%');\n\t            });\n\t            return [headers, secondRow];\n\t        } else {\n\t\n\t            _.each(this.props.headers, function (value) {\n\t                headers.push({ value: value[0], abbr: value[1] });\n\t            });\n\t        }\n\t        return headers;\n\t    },\n\t\n\t    dm_makeDataRows: function dm_makeDataRows(filter) {\n\t\n\t        var rows = [],\n\t            partitionCount = datamonkey.helpers.countPartitionsJSON(this.props.partitionSites),\n\t            partitionIndex = 0,\n\t            self = this,\n\t            doCI = this.state.showIntervals;\n\t\n\t        while (partitionIndex < partitionCount) {\n\t\n\t            _.each(self.props.partitionSites[partitionIndex].coverage[0], function (site, index) {\n\t                var siteData = self.props.mle[partitionIndex][self.state.ambigHandling][index];\n\t                if (!filter || filter(partitionIndex, index, site, siteData)) {\n\t                    var thisRow = [partitionIndex + 1, site + 1];\n\t                    //secondRow = doCI ? ['',''] : null;\n\t\n\t                    _.each(siteData, function (estimate, colIndex) {\n\t\n\t                        if (doCI) {\n\t                            thisRow.push({ value: estimate, format: self.dm_formatNumber });\n\t                            thisRow.push({ value: self.props.sample25[partitionIndex][self.state.ambigHandling][index][colIndex], format: self.dm_formatNumberShort });\n\t                            thisRow.push({ value: self.props.sampleMedian[partitionIndex][self.state.ambigHandling][index][colIndex], format: self.dm_formatNumberShort });\n\t                            thisRow.push({ value: self.props.sample975[partitionIndex][self.state.ambigHandling][index][colIndex], format: self.dm_formatNumberShort });\n\t\n\t                            /*thisRow.push ({value: [estimate, self.props.sample25[partitionIndex][self.state.ambigHandling][index][colIndex],\n\t                                                             self.props.sampleMedian[partitionIndex][self.state.ambigHandling][index][colIndex],\n\t                                                             self.props.sample975[partitionIndex][self.state.ambigHandling][index][colIndex]],\n\t                                           format: self.dm_formatInterval,\n\t                                            }); */\n\t                        } else {\n\t                            thisRow.push({ value: estimate, format: self.dm_formatNumber });\n\t                        }\n\t                    });\n\t                    rows.push(thisRow);\n\t                    //if (secondRow) {\n\t                    //    rows.push (secondRow);\n\t                    //}\n\t                }\n\t            });\n\t\n\t            partitionIndex++;\n\t        }\n\t\n\t        return rows;\n\t    },\n\t\n\t    render: function render() {\n\t\n\t        var self = this;\n\t\n\t        var result = React.createElement(\n\t            'div',\n\t            { className: 'table-responsive' },\n\t            React.createElement(\n\t                'form',\n\t                { className: 'form-inline navbar-form navbar-left' },\n\t                React.createElement(\n\t                    'div',\n\t                    { className: 'form-group' },\n\t                    React.createElement(\n\t                        'div',\n\t                        { className: 'btn-group' },\n\t                        React.createElement(\n\t                            'button',\n\t                            { className: 'btn btn-default btn-sm dropdown-toggle', type: 'button', 'data-toggle': 'dropdown', 'aria-haspopup': 'true', 'aria-expanded': 'false' },\n\t                            'Display Options ',\n\t                            React.createElement('span', { className: 'caret' })\n\t                        ),\n\t                        React.createElement(\n\t                            'ul',\n\t                            { className: 'dropdown-menu' },\n\t                            React.createElement(\n\t                                'li',\n\t                                { key: 'variable' },\n\t                                React.createElement(\n\t                                    'div',\n\t                                    { className: 'checkbox' },\n\t                                    React.createElement('input', { type: 'checkbox', checked: self.state.filters[\"variable\"] == \"on\" ? true : false, defaultChecked: self.state.filters[\"variable\"] == \"on\" ? true : false, onChange: self.dm_toggleVariableFilter }),\n\t                                    ' Variable sites only'\n\t                                )\n\t                            ),\n\t                            self.state.hasCI ? React.createElement(\n\t                                'li',\n\t                                { key: 'intervals' },\n\t                                React.createElement(\n\t                                    'div',\n\t                                    { className: 'checkbox' },\n\t                                    React.createElement('input', { type: 'checkbox', checked: self.state.showIntervals, defaultChecked: self.state.showIntervals, onChange: self.dm_toggleIntervals }),\n\t                                    ' Show sampling confidence intervals'\n\t                                )\n\t                            ) : null\n\t                        )\n\t                    ),\n\t                    React.createElement(\n\t                        'div',\n\t                        { className: 'input-group' },\n\t                        React.createElement(\n\t                            'div',\n\t                            { className: 'input-group-addon' },\n\t                            'Ambiguities are '\n\t                        ),\n\t                        React.createElement(\n\t                            'select',\n\t                            { className: 'form-control input-sm', defaultValue: self.state.ambigHandling, onChange: self.dm_changeAmbig },\n\t                            _.map(this.state.ambigOptions, function (value, index) {\n\t                                return React.createElement(\n\t                                    'option',\n\t                                    { key: index, value: value },\n\t                                    value\n\t                                );\n\t                            })\n\t                        )\n\t                    )\n\t                )\n\t            ),\n\t            React.createElement(_shared_summary.DatamonkeyTable, { headerData: this.dm_makeHeaderRow(), bodyData: this.dm_makeDataRows(this.dm_makeFilterFunction()) })\n\t        );\n\t\n\t        return result;\n\t    }\n\t});\n\t\n\tmodule.exports.SLACSites = SLACSites;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40), __webpack_require__(43)))\n\n/***/ },\n\n/***/ 227:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(_, d3) {'use strict';\n\t\n\tvar React = __webpack_require__(46);\n\tvar datamonkey = __webpack_require__(39);\n\t\n\tvar SLACBanner = React.createClass({\n\t  displayName: 'SLACBanner',\n\t\n\t\n\t  dm_countSites: function dm_countSites(json, cutoff) {\n\t\n\t    var result = { all: 0,\n\t      positive: 0,\n\t      negative: 0 };\n\t\n\t    result.all = datamonkey.helpers.countSitesFromPartitionsJSON(json);\n\t\n\t    result.positive = datamonkey.helpers.sum(json[\"MLE\"][\"content\"], function (partition) {\n\t      return _.reduce(partition[\"by-site\"][\"RESOLVED\"], function (sum, row) {\n\t        return sum + (row[8] <= cutoff ? 1 : 0);\n\t      }, 0);\n\t    });\n\t\n\t    result.negative = datamonkey.helpers.sum(json[\"MLE\"][\"content\"], function (partition) {\n\t      return _.reduce(partition[\"by-site\"][\"RESOLVED\"], function (sum, row) {\n\t        return sum + (row[9] <= cutoff ? 1 : 0);\n\t      }, 0);\n\t    });\n\t\n\t    return result;\n\t  },\n\t\n\t  dm_computeState: function dm_computeState(state, pvalue) {\n\t    return {\n\t      sites: this.dm_countSites(state, pvalue)\n\t    };\n\t  },\n\t\n\t  dm_formatP: d3.format(\".3f\"),\n\t\n\t  getInitialState: function getInitialState() {\n\t    return this.dm_computeState(this.props.analysis_results, this.props.pValue);\n\t  },\n\t\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t    this.setState(this.dm_computeState(nextProps.analysis_results, nextProps.pValue));\n\t  },\n\t\n\t  render: function render() {\n\t\n\t    return React.createElement(\n\t      'div',\n\t      { className: 'panel panel-primary' },\n\t      React.createElement(\n\t        'div',\n\t        { className: 'panel-heading' },\n\t        React.createElement(\n\t          'h3',\n\t          { className: 'panel-title' },\n\t          React.createElement(\n\t            'abbr',\n\t            { title: 'Single Likelihood Ancestor Counting' },\n\t            'SLAC'\n\t          ),\n\t          ' analysis summary'\n\t        )\n\t      ),\n\t      React.createElement(\n\t        'div',\n\t        { className: 'panel-body' },\n\t        React.createElement(\n\t          'span',\n\t          { className: 'lead' },\n\t          'Evidence',\n\t          React.createElement(\n\t            'sup',\n\t            null,\n\t            '\\u2020'\n\t          ),\n\t          ' of pervasive ',\n\t          React.createElement(\n\t            'span',\n\t            { className: 'hyphy-red' },\n\t            'diversifying'\n\t          ),\n\t          ' / ',\n\t          React.createElement(\n\t            'span',\n\t            { className: 'hyphy-navy' },\n\t            'purifying'\n\t          ),\n\t          ' selection was found at',\n\t          React.createElement(\n\t            'strong',\n\t            { className: 'hyphy-red' },\n\t            ' ',\n\t            this.state.sites.positive\n\t          ),\n\t          ' / ',\n\t          React.createElement(\n\t            'strong',\n\t            { className: 'hyphy-navy' },\n\t            this.state.sites.negative\n\t          ),\n\t          ' sites among ',\n\t          this.state.sites.all,\n\t          ' tested sites'\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { style: { marginBottom: '0em' } },\n\t          React.createElement(\n\t            'small',\n\t            null,\n\t            React.createElement(\n\t              'sup',\n\t              null,\n\t              '\\u2020'\n\t            ),\n\t            'Extended binomial test, p \\u2264 ',\n\t            this.dm_formatP(this.props.pValue),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'dropdown hidden-print', style: { display: 'inline', marginLeft: '0.25em' } },\n\t              React.createElement(\n\t                'button',\n\t                { id: 'dm.pvalue.slider', type: 'button', className: 'btn btn-primary btn-xs dropdown-toggle', 'data-toggle': 'dropdown', 'aria-haspopup': 'true', 'aria-expanded': 'false' },\n\t                React.createElement('span', { className: 'caret' })\n\t              ),\n\t              React.createElement(\n\t                'ul',\n\t                { className: 'dropdown-menu', 'aria-labelledby': 'dm.pvalue.slider' },\n\t                React.createElement(\n\t                  'li',\n\t                  null,\n\t                  React.createElement(\n\t                    'a',\n\t                    { href: '#' },\n\t                    React.createElement('input', { type: 'range', min: '0', max: '1', value: this.props.pValue, step: '0.01', onChange: this.props.pAdjuster })\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'emph',\n\t              null,\n\t              ' not'\n\t            ),\n\t            ' corrected for multiple testing; ambiguous characters resolved to minimize substitution counts.',\n\t            React.createElement('br', null),\n\t            React.createElement('i', { className: 'fa fa-exclamation-circle' }),\n\t            ' Please cite ',\n\t            React.createElement(\n\t              'a',\n\t              { href: 'http://www.ncbi.nlm.nih.gov/pubmed/15703242', target: '_blank' },\n\t              'PMID 15703242'\n\t            ),\n\t            ' if you use this result in a publication, presentation, or other scientific work.'\n\t          )\n\t        )\n\t      )\n\t    );\n\t  }\n\t});\n\t\n\tmodule.exports.SLACBanner = SLACBanner;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(43), __webpack_require__(40)))\n\n/***/ },\n\n/***/ 228:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function($, jQuery, d3, _) {\"use strict\";\n\t\n\tvar datamonkey = __webpack_require__(39);\n\t\n\tfunction datamonkey_get_styles(doc) {\n\t  var styles = \"\",\n\t      styleSheets = doc.styleSheets;\n\t\n\t  if (styleSheets) {\n\t    for (var i = 0; i < styleSheets.length; i++) {\n\t      processStyleSheet(styleSheets[i]);\n\t    }\n\t  }\n\t\n\t  function processStyleSheet(ss) {\n\t    if (ss.cssRules) {\n\t      for (var i = 0; i < ss.cssRules.length; i++) {\n\t        var rule = ss.cssRules[i];\n\t        if (rule.type === 3) {\n\t          // Import Rule\n\t          processStyleSheet(rule.styleSheet);\n\t        } else {\n\t          // hack for illustrator crashing on descendent selectors\n\t          if (rule.selectorText) {\n\t            if (rule.selectorText.indexOf(\">\") === -1) {\n\t              styles += \"\\n\" + rule.cssText;\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return styles;\n\t}\n\t\n\tfunction datamonkey_save_newick_to_file() {\n\t  var top_modal_container = \"#neighbor-tree-modal\";\n\t  var nwk = $(top_modal_container).data(\"tree\");\n\t  var pom = document.createElement('a');\n\t  pom.setAttribute('href', 'data:text/octet-stream;charset=utf-8,' + encodeURIComponent(nwk));\n\t  pom.setAttribute('download', 'nwk.txt');\n\t  $(\"body\").append(pom);\n\t  pom.click();\n\t  pom.remove();\n\t}\n\t\n\tfunction datamonkey_convert_svg_to_png(image_string) {\n\t  var image = document.getElementById(\"image\");\n\t  image.src = image_string;\n\t\n\t  image.onload = function () {\n\t    var canvas = document.getElementById(\"canvas\");\n\t    canvas.width = image.width;\n\t    canvas.height = image.height;\n\t    var context = canvas.getContext(\"2d\");\n\t    context.fillStyle = \"#FFFFFF\";\n\t    context.fillRect(0, 0, image.width, image.height);\n\t    context.drawImage(image, 0, 0);\n\t    var img = canvas.toDataURL(\"image/png\");\n\t\n\t    var pom = document.createElement('a');\n\t    pom.setAttribute('download', 'phylotree.png');\n\t    pom.href = canvas.toDataURL(\"image/png\");\n\t    $(\"body\").append(pom);\n\t    pom.click();\n\t    pom.remove();\n\t  };\n\t}\n\t\n\tfunction datamonkey_save_newick_tree(type) {\n\t\n\t  var prefix = {\n\t    xmlns: \"http://www.w3.org/2000/xmlns/\",\n\t    xlink: \"http://www.w3.org/1999/xlink\",\n\t    svg: \"http://www.w3.org/2000/svg\"\n\t  };\n\t\n\t  var tree_container = \"#tree_container\";\n\t  var svg = $(\"#tree_container\").find(\"svg\")[0];\n\t  var styles = datamonkey_get_styles(window.document);\n\t\n\t  svg.setAttribute(\"version\", \"1.1\");\n\t\n\t  var defsEl = document.createElement(\"defs\");\n\t  svg.insertBefore(defsEl, svg.firstChild);\n\t\n\t  var styleEl = document.createElement(\"style\");\n\t  defsEl.appendChild(styleEl);\n\t  styleEl.setAttribute(\"type\", \"text/css\");\n\t\n\t  // removing attributes so they aren't doubled up\n\t  svg.removeAttribute(\"xmlns\");\n\t  svg.removeAttribute(\"xlink\");\n\t\n\t  // These are needed for the svg\n\t  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n\t    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n\t  }\n\t\n\t  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n\t    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n\t  }\n\t\n\t  var source = new XMLSerializer().serializeToString(svg).replace('</style>', '<![CDATA[' + styles + ']]></style>');\n\t  var rect = svg.getBoundingClientRect();\n\t  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n\t  var to_download = [doctype + source];\n\t  var image_string = 'data:image/svg+xml;base66,' + encodeURIComponent(to_download);\n\t\n\t  if (type == \"png\") {\n\t    datamonkey_convert_svg_to_png(image_string);\n\t  } else {\n\t    var pom = document.createElement('a');\n\t    pom.setAttribute('download', 'phylotree.svg');\n\t    pom.setAttribute('href', image_string);\n\t    $(\"body\").append(pom);\n\t    pom.click();\n\t    pom.remove();\n\t  }\n\t}\n\t\n\tfunction datamonkey_validate_email(email) {\n\t  if ($(this).find(\"input[name='receive_mail']\")[0].checked) {\n\t    var regex = /^([a-zA-Z0-9_.+-])+\\@(([a-zA-Z0-9-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n\t    if (regex.test($(this).find(\"input[name='mail']\").val())) {\n\t      // Give them green. They like that.\n\t      $(this).removeClass('has-error');\n\t      $(this).addClass('has-success');\n\t      $(this).next('.help-block').remove();\n\t    } else {\n\t      $(this).next('.help-block').remove();\n\t      $(this).removeClass('has-error');\n\t      $(this).removeClass('has-success');\n\t      $(this).addClass('has-error');\n\t      var span = jQuery('<span/>', {\n\t        class: 'help-block col-lg-9 pull-right',\n\t        text: 'Invalid Email'\n\t      }).insertAfter($(this));\n\t    }\n\t  } else {\n\t    $(this).removeClass('has-error');\n\t    $(this).removeClass('has-success');\n\t    $(this).next('.help-block').remove();\n\t  }\n\t}\n\t\n\tfunction datamonkey_describe_vector(vector, as_list) {\n\t\n\t  vector.sort(d3.ascending);\n\t\n\t  var d = { 'min': d3.min(vector),\n\t    'max': d3.max(vector),\n\t    'median': d3.median(vector),\n\t    'Q1': d3.quantile(vector, 0.25),\n\t    'Q3': d3.quantile(vector, 0.75),\n\t    'mean': d3.mean(vector) };\n\t\n\t  if (as_list) {\n\t\n\t    d = \"<pre>Range  :\" + d['min'] + \"-\" + d['max'] + \"\\n\" + \"IQR    :\" + d['Q1'] + \"-\" + d['Q3'] + \"\\n\" + \"Mean   :\" + d['mean'] + \"\\n\" + \"Median :\" + d['median'] + \"\\n\" + \"</pre>\";\n\t\n\t    /*d =\n\t    \"<dl class = 'dl-horizontal'>\" +\n\t    \"<dt>Range</dt><dd>\" + d['min'] + \"-\" + d['max'] + \"</dd>\" +\n\t    \"<dt>IQR</dt><dd>\" + d['Q1'] + \"-\" + d['Q3'] +  \"</dd>\" +\n\t    \"<dt>Mean</dt><dd>\" + d['mean'] +  \"</dd>\" +\n\t    \"<dt>Median</dt><dd>\" + d['median'] + \"</dd></dl>\";*/\n\t  }\n\t\n\t  return d;\n\t}\n\t\n\tfunction datamonkey_export_handler(data, filename, mimeType) {\n\t\n\t  function msieversion() {\n\t    var ua = window.navigator.userAgent;\n\t    var msie = ua.indexOf(\"MSIE \");\n\t    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./)) {\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\t\n\t  if (msieversion()) {\n\t    var IEwindow = window.open();\n\t    IEwindow.document.write(data);\n\t    IEwindow.document.close();\n\t    IEwindow.document.execCommand('SaveAs', true, filename + \".csv\");\n\t    IEwindow.close();\n\t  } else {\n\t    var pom = document.createElement('a');\n\t    pom.setAttribute('href', 'data:' + (mimeType || 'text/plain') + ';charset=utf-8,' + encodeURIComponent(data));\n\t    pom.setAttribute('download', filename || \"download.tsv\");\n\t    pom.click();\n\t    pom.remove();\n\t  }\n\t}\n\t\n\tfunction datamonkey_table_to_text(table_id, sep) {\n\t  sep = sep || \"\\t\";\n\t  var header_row = [];\n\t  d3.select(table_id + \" thead\").selectAll(\"th\").each(function () {\n\t    header_row.push(d3.select(this).text());\n\t  });\n\t  var data_rows = [];\n\t  d3.select(table_id + \" tbody\").selectAll(\"tr\").each(function (d, i) {\n\t    data_rows.push([]);d3.select(this).selectAll(\"td\").each(function () {\n\t      data_rows[i].push(d3.select(this).text());\n\t    });\n\t  });\n\t\n\t  return header_row.join(sep) + \"\\n\" + data_rows.map(function (d) {\n\t    return d.join(sep);\n\t  }).join(\"\\n\");\n\t}\n\t\n\tfunction datamonkey_capitalize(s) {\n\t  if (s.length > 0) {\n\t    return s[0].toUpperCase() + s.slice(1);\n\t  } else {\n\t    return s;\n\t  }\n\t}\n\t\n\tfunction datamonkey_count_partitions(json) {\n\t  try {\n\t    return _.keys(json).length;\n\t  } catch (e) {\n\t    // ignore errors\n\t  }\n\t  return 0;\n\t}\n\t\n\tfunction datamonkey_sum(object, accessor) {\n\t  accessor = accessor || function (value) {\n\t    return value;\n\t  };\n\t  return _.reduce(object, function (sum, value, index) {\n\t    return sum + accessor(value, index);\n\t  }, 0);\n\t}\n\t\n\tfunction datamonkey_count_sites_from_partitions(json) {\n\t  try {\n\t    return datamonkey_sum(json[\"partitions\"], function (value) {\n\t      return value[\"coverage\"][0].length;\n\t    });\n\t  } catch (e) {\n\t    // ignore errors\n\t  }\n\t  return 0;\n\t}\n\t\n\tfunction datamonkey_filter_list(list, predicate, context) {\n\t  var result = {};\n\t  predicate = _.bind(predicate, context);\n\t  _.each(list, _.bind(function (value, key) {\n\t    if (predicate(value, key)) {\n\t      result[key] = value;\n\t    }\n\t  }, context));\n\t  return result;\n\t}\n\t\n\tfunction datamonkey_map_list(list, transform, context) {\n\t  var result = {};\n\t  transform = _.bind(transform, context);\n\t  _.each(list, _.bind(function (value, key) {\n\t    result[key] = transform(value, key);\n\t  }, context));\n\t  return result;\n\t}\n\t\n\tdatamonkey.helpers = new Object();\n\tdatamonkey.helpers.save_newick_to_file = datamonkey_save_newick_to_file;\n\tdatamonkey.helpers.convert_svg_to_png = datamonkey_convert_svg_to_png;\n\tdatamonkey.helpers.save_newick_tree = datamonkey_save_newick_tree;\n\tdatamonkey.helpers.validate_email = datamonkey_validate_email;\n\tdatamonkey.helpers.describe_vector = datamonkey_describe_vector;\n\tdatamonkey.helpers.table_to_text = datamonkey_table_to_text;\n\tdatamonkey.helpers.export_handler = datamonkey_export_handler;\n\tdatamonkey.helpers.capitalize = datamonkey_capitalize;\n\tdatamonkey.helpers.countPartitionsJSON = datamonkey_count_partitions;\n\tdatamonkey.helpers.countSitesFromPartitionsJSON = datamonkey_count_sites_from_partitions;\n\tdatamonkey.helpers.sum = datamonkey_sum;\n\tdatamonkey.helpers.filter = datamonkey_filter_list;\n\tdatamonkey.helpers.map = datamonkey_map_list;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(2), __webpack_require__(40), __webpack_require__(43)))\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// hyphyvision.min.js","window.$ = window.JQuery = $;\n\nimport Bootstrap from 'bootstrap/dist/css/bootstrap.css';\nrequire(\"font-awesome/css/font-awesome.css\");\nrequire('./hyphy-vision.css');\nrequire('./fade/FADE.css');\n\nrequire('bootstrap');\nrequire('./datamonkey/datamonkey.js');\n\nvar absrel = require('./jsx/absrel.jsx');\nvar busted = require('./jsx/busted.jsx');\nvar fade = require('./fade/FADE.js');\nvar fade_summary = require('./jsx/fade_summary.jsx');\nvar relax = require('./jsx/relax.jsx');\nvar slac = require('./jsx/slac.jsx');\n\n// Create new hyphy-vision export\nwindow.absrel = absrel;\nwindow.busted = busted;\nwindow.fade = fade;\nwindow.fade_summary = fade_summary;\nwindow.relax = relax;\nwindow.slac = slac;\n\n\n\n// WEBPACK FOOTER //\n// ./src/entry.js","var root = this;\nvar datamonkey = function () {};\n\nif (typeof exports !== 'undefined') {\n  if (typeof module !== 'undefined' && module.exports) {\n    exports = module.exports = datamonkey;\n  }\n  exports.datamonkey = datamonkey;\n} else {\n  root.datamonkey = datamonkey;\n}\n\ndatamonkey.errorModal = function (msg) {\n  $('#modal-error-msg').text(msg);\n  $('#errorModal').modal();\n};\n\nfunction b64toBlob(b64, onsuccess, onerror) {\n    var img = new Image();\n\n    img.onerror = onerror;\n\n    img.onload = function onload() {\n        var canvas = document.getElementById(\"hyphy-chart-canvas\");\n        canvas.width = img.width;\n        canvas.height = img.height;\n\n        var ctx = canvas.getContext('2d');\n      \tctx.fillStyle = \"#FFFFFF\";\n\t\t\t\tctx.fillRect(0,0,canvas.width,canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        canvas.toBlob(onsuccess);\n    };\n\n    img.src = b64;\n}\n\n\ndatamonkey.export_csv_button = function(data) {\n  data = d3.csv.format(data);\n  if (data !== null) {\n    var pom = document.createElement('a');\n    pom.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(data));\n    pom.setAttribute('download', 'export.csv');\n    pom.className = 'btn btn-default btn-sm';\n    pom.innerHTML = '<span class=\"glyphicon glyphicon-floppy-save\"></span> Download CSV';\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n};\n\ndatamonkey.save_image = function(type, container) {\n\n  var prefix = {\n    xmlns: \"http://www.w3.org/2000/xmlns/\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    svg: \"http://www.w3.org/2000/svg\"\n  };\n\n  function get_styles(doc) {\n\n    function process_stylesheet(ss) {\n      try {\n        if (ss.cssRules) {\n          for (var i = 0; i < ss.cssRules.length; i++) {\n            var rule = ss.cssRules[i];\n            if (rule.type === 3) {\n              // Import Rule\n              process_stylesheet(rule.styleSheet);\n            } else {\n              // hack for illustrator crashing on descendent selectors\n              if (rule.selectorText) {\n                if (rule.selectorText.indexOf(\">\") === -1) {\n                  styles += \"\\n\" + rule.cssText;\n                }\n              }\n            }\n          }\n        }\n      } catch (e) {\n        console.log('Could not process stylesheet : ' + ss);\n      }\n    }\n\n    var styles = \"\",\n        styleSheets = doc.styleSheets;\n\n    if (styleSheets) {\n      for (var i = 0; i < styleSheets.length; i++) {\n        process_stylesheet(styleSheets[i]);\n      }\n    }\n\n    return styles;\n\n  }\n\n  var convert_svg_to_png = function(image_string) {\n\n    var image = document.getElementById(\"hyphy-chart-image\");\n\n    image.onload = function() {\n\n      var canvas = document.getElementById(\"hyphy-chart-canvas\");\n      canvas.width = image.width;\n      canvas.height = image.height;\n      var context = canvas.getContext(\"2d\");\n      context.fillStyle = \"#FFFFFF\";\n      context.fillRect(0,0,image.width,image.height);\n      context.drawImage(image, 0, 0);\n      var img = canvas.toDataURL(\"image/png\");\n      var pom = document.createElement('a');\n      pom.setAttribute('download', 'image.png');\n      pom.href = canvas.toDataURL(\"image/png\");     \n      $(\"body\").append(pom);\n      pom.click();\n      pom.remove();\n\n    };\n\n    image.src = image_string;\n\n  };\n\n  var svg = $(container).find(\"svg\")[0];\n  if (!svg) {\n    svg = $(container)[0];\n  }\n\n  var styles = get_styles(window.document);\n\n  svg.setAttribute(\"version\", \"1.1\");\n\n  var defsEl = document.createElement(\"defs\");\n  svg.insertBefore(defsEl, svg.firstChild); \n\n  var styleEl = document.createElement(\"style\");\n  defsEl.appendChild(styleEl);\n  styleEl.setAttribute(\"type\", \"text/css\");\n\n\n  // removing attributes so they aren't doubled up\n  svg.removeAttribute(\"xmlns\");\n  svg.removeAttribute(\"xlink\");\n\n  // These are needed for the svg\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n  }\n\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n  }\n\n  var source = (new XMLSerializer()).serializeToString(svg).replace('</style>', '<![CDATA[' + styles + ']]></style>');\n  var rect = svg.getBoundingClientRect();\n  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n  var to_download = [doctype + source];\n  var image_string = 'data:image/svg+xml;base66,' + encodeURIComponent(to_download);\n\n  if(type == \"png\") {\n\t\tb64toBlob(image_string,\n\t\t\t\tfunction(blob) {\n\n\t\t\t\t\t\tvar url = window.URL.createObjectURL(blob);\n\t\t\t\t\t\tvar pom = document.createElement('a');\n\t\t\t\t\t\tpom.setAttribute('download', 'image.png');\n\t\t\t\t\t\tpom.setAttribute('href', url);\n\t\t\t\t\t\t$(\"body\").append(pom);\n\t\t\t\t\t\tpom.click();\n\t\t\t\t\t\tpom.remove();\n\n\t\t\t\t}, function(error) {\n\t\t\t\t\t\t// handle error\n\t\t\t\t});\n  } else {\n    var pom = document.createElement('a');\n    pom.setAttribute('download', 'image.svg');\n    pom.setAttribute('href', image_string);\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n\n};\n\ndatamonkey.validate_date = function () {\n\n  // Check that it is not empty\n  if($(this).val().length === 0) {\n    $(this).next('.help-block').remove();\n    $(this).parent().removeClass('has-success');\n    $(this).parent().addClass('has-error');\n\n    jQuery('<span/>', {\n          class: 'help-block',\n          text : 'Field is empty'\n      }).insertAfter($(this));\n\n  } else if(isNaN(Date.parse($(this).val()))) {\n    $(this).next('.help-block').remove();\n    $(this).parent().removeClass('has-success');\n    $(this).parent().addClass('has-error');\n\n    jQuery('<span/>', {\n          class: 'help-block',\n          text : 'Date format should be in the format YYYY-mm-dd'\n      }).insertAfter($(this));\n\n  } else {\n    $(this).parent().removeClass('has-error');\n    $(this).parent().addClass('has-success');\n    $(this).next('.help-block').remove();\n  }\n\n};\n\n$( document ).ready( function () {\n  $(function () {$('[data-toggle=\"tooltip\"]').tooltip();});\n  $('#datamonkey-header').collapse ();\n  \n  var initial_padding = $(\"body\").css(\"padding-top\");\n  \n  $(\"#collapse_nav_bar\").on (\"click\", function (e) {\n    $('#datamonkey-header').collapse ('toggle');\n    $(this).find (\"i\").toggleClass (\"fa-times-circle fa-eye\");\n    var new_padding =  $(\"body\").css(\"padding-top\") == initial_padding ? \"5px\" : initial_padding;\n    d3.select (\"body\").transition ().style (\"padding-top\", new_padding);\n  });\n});\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/datamonkey/datamonkey.js","var React = require('react'),\n\t\tReactDOM = require('react-dom');\n\nvar datamonkey = require('../datamonkey/datamonkey.js'),\n    _ = require('underscore'),\n\t\tbusted = require('../busted/busted.js');\n\nrequire(\"phylotree\");\nrequire(\"phylotree.css\");\nimport {BSRELSummary} from \"./components/absrel_summary.jsx\";\nimport {ModelFits} from \"./components/model_fits.jsx\";\nimport {TreeSummary} from \"./components/tree_summary.jsx\";\nimport {Tree} from \"./components/tree.jsx\";\nimport {BranchTable} from \"./components/branch_table.jsx\";\n\nvar React = require('react');\n\nvar BSREL = React.createClass({\n\n  float_format : d3.format(\".2f\"),\n\n  loadFromServer : function() {\n\n    var self = this;\n    d3.json(this.props.url, function(data) {\n\n      data[\"fits\"][\"MG94\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"MG94\");\n      data[\"fits\"][\"Full model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Full model\");\n\n      // GH-#18 Add omega annotation tag\n      data[\"fits\"][\"MG94\"][\"annotation-tag\"] = \"ω\";\n      data[\"fits\"][\"Full model\"][\"annotation-tag\"] = \"ω\";\n\n\n      var annotations = data[\"fits\"][\"Full model\"][\"branch-annotations\"],\n          json = data,\n          pmid = data[\"PMID\"],\n          test_results = data[\"test results\"];\n\n      self.setState({\n                      annotations : annotations,\n                      json : json,\n                      pmid : pmid,\n                      test_results : test_results\n                    });\n\n    });\n\n  },\n\n  getDefaultProps: function() {\n\n    var edgeColorizer = function (element, data) {\n\n        var self = this;\n\n        var svg = d3.select(\"#tree_container svg\"),\n            svg_defs = d3.select(\".phylotree-definitions\");\n\n        if (svg_defs.empty()) {\n          svg_defs = svg.append(\"defs\")\n                      .attr(\"class\", \"phylotree-definitions\")\n        }\n\n        // clear existing linearGradients\n\n        var scaling_exponent = 1.0/3,\n            omega_format = d3.format(\".3r\"),\n            prop_format = d3.format(\".2p\"),\n            fit_format = d3.format(\".2f\"),\n            p_value_format = d3.format(\".4f\");\n\n        self.omega_color = d3.scale.pow().exponent(scaling_exponent)\n            .domain([0, 0.25, 1, 5, 10])\n            .range(\n              self.options()[\"color-fill\"]\n                ? [\"#DDDDDD\", \"#AAAAAA\", \"#888888\", \"#444444\", \"#000000\"]\n                : [\"#6e4fa2\", \"#3288bd\", \"#e6f598\", \"#f46d43\", \"#9e0142\"])\n            .clamp(true);\n\n        var createBranchGradient = function(node) {\n\n            function generateGradient(svg_defs, grad_id, annotations, already_cumulative) {\n\n                var current_weight = 0;\n                var this_grad = svg_defs.append(\"linearGradient\")\n                    .attr(\"id\", grad_id);\n\n                annotations.forEach(function(d, i) {\n\n                    if (d.prop) {\n                        var new_weight = current_weight + d.prop;\n                        this_grad.append(\"stop\")\n                            .attr(\"offset\", \"\" + current_weight * 100 + \"%\")\n                            .style(\"stop-color\", self.omega_color(d.omega));\n                        this_grad.append(\"stop\")\n                            .attr(\"offset\", \"\" + new_weight * 100 + \"%\")\n                            .style(\"stop-color\", self.omega_color(d.omega));\n                        current_weight = new_weight;\n                    }\n                });\n            }\n\n            // Create svg definitions\n            if(self.gradient_count == undefined) {\n              self.gradient_count = 0;\n            }\n\n            if(node.annotations) {\n\n              if (node.annotations.length == 1) {\n                node['color'] = self.omega_color(node.annotations[0][\"omega\"]);\n              } else {\n                self.gradient_count++;\n                var grad_id = \"branch_gradient_\" + self.gradient_count;\n                generateGradient(svg_defs, grad_id, node.annotations.omegas);\n                node['grad'] = grad_id;\n              }\n\n            }\n        }\n\n        var annotations = data.target.annotations,\n            alpha_level = 0.05,\n            tooltip = \"<b>\" + data.target.name + \"</b>\",\n            reference_omega_weight =  prop_format(0),\n            distro = '';\n\n        if (annotations) {\n\n            reference_omega_weight = annotations.omegas[0].prop;\n\n            annotations.omegas.forEach(function(d, i) {\n\n                var omega_value = d.omega > 1e20 ? \"&infin;\" : omega_format(d.omega),\n                    omega_weight = prop_format(d.prop);\n\n                tooltip += \"<br/>&omega;<sub>\" + (i + 1) + \"</sub> = \" + omega_value +\n                    \" (\" + omega_weight + \")\";\n\n                if (i) {\n                  distro += \"<br/>\";\n                }\n\n                distro += \"&omega;<sub>\" + (i + 1) + \"</sub> = \" + omega_value +\n                    \" (\" + omega_weight + \")\";\n\n\n            });\n\n            tooltip += \"<br/><i>p = \" + omega_format(annotations[\"p\"]) + \"</i>\";\n\n            $(element[0][0]).tooltip({\n                'title': tooltip,\n                'html': true,\n                'trigger': 'hover',\n                'container': 'body',\n                'placement': 'auto'\n            });\n\n            createBranchGradient(data.target);\n\n            if(data.target.grad) {\n              element.style('stroke', 'url(#' + data.target.grad + ')');\n            } else {\n              element.style('stroke', data.target.color);\n            }\n\n            element.style('stroke-width', annotations[\"p\"] <= alpha_level ? '12' : '5')\n                .style('stroke-linejoin', 'round')\n                .style('stroke-linecap', 'round');\n\n      }\n\n    };\n\n    return {\n      edgeColorizer : edgeColorizer\n    };\n\n  },\n\n  getInitialState: function() {\n\n    var tree_settings = {\n        'omegaPlot': {},\n        'tree-options': {\n            /* value arrays have the following meaning\n                [0] - the value of the attribute\n                [1] - does the change in attribute value trigger tree re-layout?\n            */\n            'hyphy-tree-model': ['Full model', true],\n            'hyphy-tree-highlight': [null, false],\n            'hyphy-tree-branch-lengths': [true, true],\n            'hyphy-tree-hide-legend': [false, true],\n            'hyphy-tree-fill-color': [false, true]\n        },\n        'suppress-tree-render': false,\n        'chart-append-html' : true,\n        'edgeColorizer' : this.props.edgeColorizer\n    };\n\n\n\n    return {\n              annotations : null,\n              json : null,\n              pmid : null,\n              settings : tree_settings,\n              test_results : null,\n              tree : null,\n           };\n\n  },\n\n  componentWillMount: function() {\n    this.loadFromServer();\n    this.setEvents();\n  },\n\n  setEvents : function() {\n\n    var self = this;\n\n    $(\"#datamonkey-absrel-json-file\").on(\"change\", function(e) {\n        var files = e.target.files; // FileList object\n\n        if (files.length == 1) {\n            var f = files[0];\n            var reader = new FileReader();\n\n            reader.onload = (function(theFile) {\n                return function(e) {\n                  var data = JSON.parse(this.result);\n                  data[\"fits\"][\"MG94\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"MG94\");\n                  data[\"fits\"][\"Full model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Full model\");\n\n                  var annotations = data[\"fits\"][\"Full model\"][\"branch-annotations\"],\n                      json = data,\n                      pmid = data[\"PMID\"],\n                      test_results = data[\"test results\"];\n\n                  self.setState({\n                                  annotations : annotations,\n                                  json : json,\n                                  pmid : pmid,\n                                  test_results : test_results\n                                });\n\n                };\n            })(f);\n            reader.readAsText(f);\n        }\n\n        $(\"#datamonkey-absrel-toggle-here\").dropdown(\"toggle\");\n        e.preventDefault();\n    });\n\n\n  },\n\n  formatBranchAnnotations : function(json, key) {\n\n    var initial_branch_annotations = json[\"fits\"][key][\"branch-annotations\"];\n\n    if(!initial_branch_annotations) {\n      initial_branch_annotations = json[\"fits\"][key][\"rate distributions\"];\n    }\n\n    // Iterate over objects\n    var branch_annotations = _.mapObject(initial_branch_annotations, function(val, key) {\n\n      var vals = [];\n        try {\n          vals = JSON.parse(val);\n        } catch (e) {\n          vals = val;\n        }\n\n      var omegas = {\"omegas\" : _.map(vals, function(d) { return _.object([\"omega\",\"prop\"], d)})};\n      var test_results = _.clone(json[\"test results\"][key]);\n      _.extend(test_results, omegas);\n      return test_results;\n\n    });\n\n    return branch_annotations;\n\n  },\n\n  initialize : function() {\n\n    var model_fits_id = \"#hyphy-model-fits\",\n        omega_plots_id = \"#hyphy-omega-plots\",\n        summary_id = \"#hyphy-relax-summary\",\n        tree_id = \"#tree-tab\";\n\n  },\n\n  render: function() {\n\n    var self = this;\n\n    return (\n        <div className=\"tab-content\">\n            <div className=\"tab-pane active\" id=\"summary-tab\">\n\n                <div className=\"row\">\n                  <div id=\"summary-div\" className=\"col-md-12\">\n                    <BSRELSummary test_results={self.state.test_results}\n                                  pmid={self.state.pmid} />\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                    <div id=\"hyphy-tree-summary\" className=\"col-md-6\">\n                      <TreeSummary json={self.state.json} />\n                    </div>\n                    <div id=\"hyphy-model-fits\" className=\"col-md-6\">\n                      <ModelFits json={self.state.json} />\n                    </div>\n                </div>\n            </div>\n\n            <div className='tab-pane' id=\"tree-tab\">\n              <Tree json={self.state.json}\n                    settings={self.state.settings} />\n            </div>\n\n            <div className='tab-pane' id=\"table_tab\">\n              <BranchTable tree={self.state.tree}\n                           test_results={self.state.test_results}\n                           annotations={self.state.annotations} />\n            </div>\n\n        </div>\n        )\n  }\n\n});\n\n\n\n// Will need to make a call to this\n// omega distributions\nfunction render_absrel(url, element) {\n  React.render(\n    <BSREL url={url} />,\n    document.getElementById(element)\n  );\n}\n\n\nmodule.exports = render_absrel;\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/absrel.jsx","var React = require('react');\n\nvar BSRELSummary = React.createClass({\n\n  float_format : d3.format(\".2f\"),\n\n  countBranchesTested: function(branches_tested) {\n\n    if(branches_tested) {\n      return branches_tested.split(';').length;\n    } else {\n      return 0;\n    }\n\n  },\n\n  getBranchesWithEvidence : function(test_results) {\n\n    var self = this;\n    return _.filter(test_results, function(d) { return d.p <= 0.05 }).length;\n\n  },\n\n  getTestBranches : function(test_results) {\n\n    var self = this;\n    return _.filter(test_results, function(d) { return d.tested > 0 }).length;\n\n  },\n\n  getTotalBranches : function(test_results) {\n\n    var self = this;\n    return _.keys(test_results).length;\n\n  },\n\n  getInitialState: function() {\n\n    var self = this;\n\n    return { \n              branches_with_evidence : this.getBranchesWithEvidence(self.props.test_results), \n              test_branches : this.getTestBranches(self.props.test_results),\n              total_branches : this.getTotalBranches(self.props.test_results)\n           };\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n\n    this.setState({\n                    branches_with_evidence : this.getBranchesWithEvidence(nextProps.test_results), \n                    test_branches : this.getTestBranches(nextProps.test_results),\n                    total_branches : this.getTotalBranches(nextProps.test_results)\n                  });\n\n  },\n\n  render: function() {\n\n    var self = this;\n\n    return (\n          <ul className=\"list-group\">\n              <li className=\"list-group-item list-group-item-info\">\n                  <h3 className=\"list-group-item-heading\">\n                    <i className=\"fa fa-list\"></i>\n                    <span id=\"summary-method-name\">Adaptive branch site REL</span> summary\n                  </h3>\n                  <p className=\"list-group-item-text lead\">\n                    Evidence<sup>†</sup> of episodic diversifying selection was found on \n                      <strong> {self.state.branches_with_evidence}</strong> out of \n                      <span> {self.state.test_branches}</span> tested branches \n                      (<span>{self.state.total_branches}</span> total branches).\n                  </p>\n                  <p>\n                    <small>\n                      <sup>†</sup><abbr title=\"Likelihood Ratio Test\">LRT</abbr> p ≤ 0.05, corrected for multiple testing.\n                    </small>\n                  </p>\n                  <p>\n                    <small>\n                      Please cite <a href=\"http://www.ncbi.nlm.nih.gov/pubmed/25697341\" id=\"summary-pmid\" target=\"_blank\">PMID 25697341</a> if you use this result in a publication, presentation, or other scientific work.\n                    </small>\n                  </p>\n              </li>\n          </ul>\n        )\n  }\n\n});\n\n// Will need to make a call to this\n// omega distributions\nfunction render_absrel_summary(test_results, pmid, element) {\n  React.render(\n    <BSRELSummary test_results={test_results} pmid={pmid} />,\n    document.getElementById(element)\n  );\n}\n\nmodule.exports.BSRELSummary = BSRELSummary;\nmodule.exports.render_absrel_summary = render_absrel_summary;\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/components/absrel_summary.jsx","var React = require('react');\n\nvar ModelFits = React.createClass({\n\n  getInitialState: function() {\n    var table_row_data = this.getModelRows(this.props.json),\n        table_columns = this.getModelColumns(table_row_data);\n\n    return { \n             table_row_data: table_row_data, \n             table_columns: table_columns\n           };\n  },\n\n  formatRuntime : function(seconds) {\n      var duration_string = \"\",\n          seconds = parseFloat(seconds);\n\n      var split_array = [Math.floor(seconds / (24 * 3600)), Math.floor(seconds / 3600) % 24, Math.floor(seconds / 60) % 60, seconds % 60],\n          quals = [\"d.\", \"hrs.\", \"min.\", \"sec.\"];\n\n      split_array.forEach(function(d, i) {\n          if (d) {\n              duration_string += \" \" + d + \" \" + quals[i];\n          }\n      });\n\n      return duration_string;\n  },\n\n  getLogLikelihood : function(this_model) {\n    return d3.format(\".2f\")(this_model['log-likelihood']);\n  },\n\n  getAIC : function(this_model) {\n    return d3.format(\".2f\")(this_model['AIC-c']);\n  },\n\n  getNumParameters : function(this_model) {\n    return this_model['parameters'];\n  },\n\n  getBranchLengths : function(this_model) {\n\n    if(this_model[\"tree length\"]) {\n      return d3.format(\".2f\")(this_model[\"tree length\"]); \n    } else {\n      return d3.format(\".2f\")(d3.values(this_model[\"branch-lengths\"]).reduce(function(p, c) {\n          return p + c;\n      }, 0))\n    }\n\n  },\n\n  getRuntime : function(this_model) {\n    //return this.formatRuntime(this_model['runtime']);\n    return this.formatRuntime(this_model['runtime']);\n  },\n\n  getDistributions : function(m, this_model) {\n\n    var omega_distributions = {};\n    omega_distributions[m] = {};\n\n    var omega_format = d3.format(\".3r\"),\n        prop_format = d3.format(\".2p\"),\n        p_value_format = d3.format(\".4f\");\n\n\n    var distributions = [];\n\n    for (var d in this_model[\"rate-distributions\"]) {\n\n      var this_distro = this_model[\"rate-distributions\"][d];\n      var this_distro_entry = [d, \"\", \"\", \"\"];\n\n      omega_distributions[m][d] = this_distro.map(function(d) {\n        return {\n          'omega': d[0],\n          'weight': d[1]\n        };\n      });\n\n      for (var k = 0; k < this_distro.length; k++) {\n        this_distro_entry[k + 1] = (omega_format(this_distro[k][0]) + \" (\" + prop_format(this_distro[k][1]) + \")\");\n      }\n\n      distributions.push(this_distro_entry);\n    }\n\n    distributions.sort(function(a, b) {\n        return a[0] < b[0] ? -1 : (a[0] == b[0] ? 0 : 1);\n    });\n\n    return distributions;\n\n  },\n\n  getModelRows : function(json) {\n\n    if(!json) {\n      return [];\n    }\n\n    var table_row_data = [];\n    var omega_format = d3.format(\".3r\");\n    var prop_format = d3.format(\".2p\");\n    var p_value_format = d3.format(\".4f\");\n\n    for (var m in json[\"fits\"]) {\n\n      var this_model_row = [],\n          this_model = json[\"fits\"][m];\n\n      this_model_row = [\n          this_model['display-order'],\n          \"\",\n          m,\n          this.getLogLikelihood(this_model),\n          this.getNumParameters(this_model),\n          this.getAIC(this_model),\n          this.getRuntime(this_model),\n          this.getBranchLengths(this_model)\n      ];\n\n\n      var distributions = this.getDistributions(m, this_model);\n\n      if(distributions.length) {\n\n        this_model_row = this_model_row.concat(distributions[0]);\n        this_model_row[1] = distributions[0][0];\n\n        table_row_data.push(this_model_row);\n\n        for (var d = 1; d < distributions.length; d++) {\n\n          var this_distro_entry = this_model_row.map(function(d, i) {\n              if (i) return \"\";\n              return d;\n          });\n\n          this_distro_entry[1] = distributions[d][0];\n\n          for (var k = this_distro_entry.length - 4; k < this_distro_entry.length; k++) {\n            this_distro_entry[k] = distributions[d][k - this_distro_entry.length + 4];\n          }\n\n          table_row_data.push(this_distro_entry);\n\n        }\n      } else {\n        table_row_data.push(this_model_row);\n      }\n\n    }\n\n    table_row_data.sort(function(a, b) {\n      if (a[0] == b[0]) {\n          return a[1] < b[1] ? -1 : (a[1] == b[1] ? 0 : 1);\n      }\n      return a[0] - b[0];\n    });\n\n    table_row_data = table_row_data.map(function(r) {\n        return r.slice(2);\n    });\n\n    return table_row_data;\n\n  },\n\n  getModelColumns : function(table_row_data) {\n\n    var model_header = '<th>Model</th>',\n        logl_header = '<th><em> log </em>L</th>',\n        num_params_header = '<th><abbr title=\"Number of estimated model parameters\"># par.</abbr></th>',\n        aic_header = '<th><abbr title=\"Small Sample AIC\">AIC<sub>c</sub></abbr></th>',\n        runtime_header = '<th>Time to fit</th>',\n        branch_lengths_header = '<th><abbr title=\"Total tree length, expected substitutions/site\">L<sub>tree</sub></abbr></th>',\n        branch_set_header = '<th>Branch set</th>',\n        omega_1_header = '<th>&omega;<sub>1</sub></th>',\n        omega_2_header = '<th>&omega;<sub>2</sub></th>',\n        omega_3_header = '<th>&omega;<sub>3</sub></th>';\n\n    // inspect table_row_data and return header\n    var all_columns = [ \n                    model_header,\n                    logl_header, \n                    num_params_header, \n                    aic_header, \n                    runtime_header, \n                    branch_lengths_header,  \n                    branch_set_header,\n                    omega_1_header,\n                    omega_2_header,\n                    omega_3_header\n                  ];\n\n    // validate each table row with its associated header\n    if(table_row_data.length == 0) {\n      return [];\n    }\n\n    // trim columns to length of table_row_data\n    var column_headers = _.take(all_columns, table_row_data[0].length);\n\n    // remove all columns that have 0, null, or undefined rows\n    var items = d3.transpose(table_row_data);\n\n    return column_headers;\n  },\n\n  componentDidUpdate : function() {\n\n    var model_columns = d3.select('#summary-model-header1');\n    model_columns = model_columns.selectAll(\"th\").data(this.state.table_columns);\n    model_columns.enter().append(\"th\");\n    model_columns.html(function(d) {\n        return d;\n    });\n\n    var model_rows = d3.select('#summary-model-table').selectAll(\"tr\").data(this.state.table_row_data);\n    model_rows.enter().append('tr');\n    model_rows.exit().remove();\n    model_rows = model_rows.selectAll(\"td\").data(function(d) {\n        return d;\n    });\n    model_rows.enter().append(\"td\");\n    model_rows.html(function(d) {\n        return d;\n    });\n\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n\n    var table_row_data = this.getModelRows(nextProps.json),\n        table_columns = this.getModelColumns(table_row_data);\n\n    this.setState({\n             table_row_data: table_row_data, \n             table_columns: table_columns\n           });\n  },\n\n  render: function() {\n\n    return (\n        <div className=\"col-lg-12\">\n          <ul className=\"list-group\">\n            <li className=\"list-group-item\">\n              <h4 className=\"list-group-item-heading\"><i className=\"fa fa-cubes\" styleFormat = 'margin-right: 10px'></i>Model fits</h4>\n               <table className=\"table table-hover table-condensed list-group-item-text\" styleFormat =\"margin-top:0.5em;\">\n                  <thead id='summary-model-header1'></thead>\n                  <tbody id='summary-model-table'></tbody>\n               </table>\n            </li>\n          </ul>\n        </div>\n      )\n  }\n\n});\n\n// Will need to make a call to this\n// omega distributions\nfunction render_model_fits(json, element) {\n  React.render(\n    <ModelFits json={json} />,\n    $(element)[0]\n  );\n}\n\n// Will need to make a call to this\n// omega distributions\nfunction rerender_model_fits(json, element) {\n  $(element).empty();\n  render_model_fits(json, element);\n\n}\n\nmodule.exports.ModelFits = ModelFits;\nmodule.exports.render_model_fits = render_model_fits;\nmodule.exports.rerender_model_fits = rerender_model_fits;\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/components/model_fits.jsx","var React = require('react'),\n\t\t_ = require('underscore');\n\nvar TreeSummary = React.createClass({\n\n  getInitialState: function() {\n\n    var table_row_data = this.getSummaryRows(this.props.json),\n        table_columns = this.getTreeSummaryColumns(table_row_data);\n\n    return { \n              table_row_data: table_row_data, \n              table_columns: table_columns\n           };\n  },\n\n  getRateClasses : function(branch_annotations) {\n\n    // Get count of all rate classes\n    var all_branches = _.values(branch_annotations);\n\n    return _.countBy(all_branches, function(branch) {\n      return branch.omegas.length;\n    });\n\n  },\n\n  getBranchProportion : function(rate_classes) {\n    var sum = _.reduce(_.values(rate_classes), function(memo, num) { return memo + num; });\n    return _.mapObject(rate_classes, function(val, key) { return d3.format(\".2p\")(val/sum) } );\n  },\n\n  getBranchLengthProportion : function(rate_classes, branch_annotations, total_branch_length) {\n\n    var self = this;\n\n    // get branch lengths of each rate distribution\n    //return prop_format(d[2] / total_tree_length\n\n    // Get count of all rate classes\n    var branch_lengths = _.mapObject(rate_classes, function(d) { return 0}); \n\n    for (var key in branch_annotations) {\n      var node = self.tree.get_node_by_name(key);\n      branch_lengths[branch_annotations[key].omegas.length] += self.tree.branch_length()(node);\n    };\n\n    return _.mapObject(branch_lengths, function(val, key) { return d3.format(\".2p\")(val/total_branch_length) } );\n\n  },\n\n  getNumUnderSelection : function(rate_classes, branch_annotations, test_results) {\n\n    var num_under_selection = _.mapObject(rate_classes, function(d) { return 0}); \n\n    for (var key in branch_annotations) {\n      num_under_selection[branch_annotations[key].omegas.length] += test_results[key][\"p\"] <= 0.05;\n    };\n\n    return num_under_selection;\n\n  },\n\n  getSummaryRows : function(json) {\n\n    var self = this;\n\n    // Will need to create a tree for each fits\n    var analysis_data = json;\n\n    if(!analysis_data) {\n      return [];\n    }\n\n    // Create an array of phylotrees from fits\n    var trees = _.map(analysis_data[\"fits\"], function(d) { return d3.layout.phylotree(\"body\")(d[\"tree string\"]) });\n    var tree = trees[0];\n\n    self.tree = tree;\n    \n\n    //TODO : Do not hard code model here\n    var tree_length = analysis_data[\"fits\"][\"Full model\"][\"tree length\"];\n    var branch_annotations = analysis_data[\"fits\"][\"Full model\"][\"branch-annotations\"];\n    var test_results = analysis_data[\"test results\"];\n\n    var rate_classes = this.getRateClasses(branch_annotations),\n        proportions = this.getBranchProportion(rate_classes),\n        length_proportions = this.getBranchLengthProportion(rate_classes, branch_annotations, tree_length),\n        num_under_selection = this.getNumUnderSelection(rate_classes, branch_annotations, test_results);\n\n    // zip objects into matrix\n    var keys = _.keys(rate_classes);\n\n    var summary_rows = _.zip(\n      keys\n      ,_.values(rate_classes)\n      ,_.values(proportions)\n      ,_.values(length_proportions)\n      ,_.values(num_under_selection)\n    )\n\n    summary_rows.sort(function(a, b) {\n      if (a[0] == b[0]) {\n          return a[1] < b[1] ? -1 : (a[1] == b[1] ? 0 : 1);\n      }\n      return a[0] - b[0];\n    });\n\n    return summary_rows;\n\n  },\n\n  getTreeSummaryColumns : function(table_row_data) {\n\n    var omega_header = '<th>ω rate<br>classes</th>',\n        branch_num_header = '<th># of <br>branches</th>',\n        branch_prop_header = '<th>% of <br>branches</th>',\n        branch_prop_length_header = '<th>% of tree <br>length</th>',\n        under_selection_header = '<th># under <br>selection</th>';\n\n\n    // inspect table_row_data and return header\n    var all_columns = [ \n                    omega_header,\n                    branch_num_header, \n                    branch_prop_header, \n                    branch_prop_length_header, \n                    under_selection_header\n                  ];\n\n    // validate each table row with its associated header\n    if(table_row_data.length == 0) {\n      return [];\n    }\n\n    // trim columns to length of table_row_data\n    var column_headers = _.take(all_columns, table_row_data[0].length)\n\n    return column_headers;\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n\n    var table_row_data = this.getSummaryRows(nextProps.json),\n        table_columns = this.getTreeSummaryColumns(table_row_data);\n\n    this.setState({\n                    table_row_data: table_row_data, \n                    table_columns: table_columns\n                  });\n\n  },\n\n  componentDidUpdate : function() {\n\n    d3.select('#summary-tree-header').empty();\n\n    var tree_summary_columns = d3.select('#summary-tree-header');\n\n    tree_summary_columns = tree_summary_columns.selectAll(\"th\").data(this.state.table_columns);\n    tree_summary_columns.enter().append(\"th\");\n    tree_summary_columns.html(function(d) {\n        return d;\n    });\n\n    var tree_summary_rows = d3.select('#summary-tree-table').selectAll(\"tr\").data(this.state.table_row_data);\n    tree_summary_rows.enter().append('tr');\n    tree_summary_rows.exit().remove();\n    tree_summary_rows = tree_summary_rows.selectAll(\"td\").data(function(d) {\n        return d;\n    });\n\n    tree_summary_rows.enter().append(\"td\");\n    tree_summary_rows.html(function(d) {\n        return d;\n    });\n\n\n  },\n\n\n  render: function() {\n\n    return (\n        <ul className=\"list-group\">\n            <li className=\"list-group-item\">\n              <h4 className=\"list-group-item-heading\"><i className=\"fa fa-tree\"></i>Tree</h4>\n              <table className=\"table table-hover table-condensed list-group-item-text\">\n                <thead id='summary-tree-header'></thead>\n                <tbody id=\"summary-tree-table\"></tbody>\n              </table>\n            </li>\n        </ul>\n      )\n  }\n\n});\n\n//TODO\n//<caption>\n//<p className=\"list-group-item-text text-muted\">\n//    Total tree length under the branch-site model is <strong id=\"summary-tree-length\">2.30</strong> expected substitutions per nucleotide site, and <strong id=\"summary-tree-length-mg94\">1.74</strong> under the MG94 model.\n//</p>\n//</caption>\n\n\n// Will need to make a call to this\n// omega distributions\nfunction render_tree_summary(json, element) {\n  React.render(\n    <TreeSummary json={json} />,\n    $(element)[0]\n  );\n}\n\n// Will need to make a call to this\n// omega distributions\nfunction rerender_tree_summary(tree, element) {\n  $(element).empty();\n  render_tree_summary(tree, element);\n}\n\nmodule.exports.TreeSummary = TreeSummary;\nmodule.exports.render_tree_summary = render_tree_summary;\nmodule.exports.rerender_tree_summary = rerender_tree_summary;\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/components/tree_summary.jsx","var React = require('react');\nvar datamonkey = require('../../datamonkey/datamonkey.js');\nrequire('phylotree');\n\nvar Tree = React.createClass({\n\n  getInitialState: function() {\n    return { \n              json : this.props.json,\n              settings : this.props.settings\n           };\n  },\n\n  sortNodes : function(asc) {\n\n      var self = this;\n\n      self.tree.traverse_and_compute(function(n) {\n          var d = 1;\n          if (n.children && n.children.length) {\n              d += d3.max(n.children, function(d) {\n                  return d[\"count_depth\"];\n              });\n          }\n          n[\"count_depth\"] = d;\n      });\n\n      self.tree.resort_children(function(a, b) {\n          return (a[\"count_depth\"] - b[\"count_depth\"]) * (asc ? 1 : -1);\n      });\n\n  },\n\n  getBranchLengths : function() {\n\n      var self = this;\n\n      if(!this.state.json) {\n        return [];\n      }\n\n      var branch_lengths = self.settings[\"tree-options\"][\"hyphy-tree-branch-lengths\"][0] \n                           ? this.state.json[\"fits\"][this.which_model][\"branch-lengths\"] : null;\n\n      if(!branch_lengths) {\n\n        var nodes = _.filter(self.tree.get_nodes(), function(d) { return d.parent });\n\n        branch_lengths = _.object(\n              _.map(nodes, function(d){ return d.name }), \n              _.map(nodes, function(d) { return parseFloat(d.attribute) })\n            );\n\n      }\n\n      return branch_lengths;\n\n  },\n\n  assignBranchAnnotations : function() {\n    if(this.state.json && this.state.json[\"fits\"][this.which_model]) {\n      this.tree.assign_attributes(this.state.json[\"fits\"][this.which_model][\"branch-annotations\"]);\n    }\n  },\n\n  renderDiscreteLegendColorScheme : function(svg_container) {\n\n    var self = this,\n        svg = self.svg;\n\n    var color_fill = self.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0] ? \"black\" : \"red\";\n\n    var margins = {\n            'bottom': 30,\n            'top': 15,\n            'left': 40,\n            'right': 2\n        };\n\n\n    d3.selectAll(\"#color-legend\").remove();\n\n    var dc_legend = svg.append(\"g\")\n          .attr(\"id\", \"color-legend\")\n          .attr(\"class\", \"dc-legend\")\n          .attr(\"transform\", \"translate(\" + margins[\"left\"] + \",\" + margins[\"top\"] + \")\");\n\n    var fg_item = dc_legend.append(\"g\")\n      .attr(\"class\",\"dc-legend-item\")\n      .attr(\"transform\", \"translate(0,0)\")\n\n      fg_item.append(\"rect\")\n        .attr(\"width\", \"13\")\n        .attr(\"height\", \"13\")\n        .attr(\"fill\", color_fill)\n\n      fg_item.append(\"text\")\n        .attr(\"x\", \"15\")\n        .attr(\"y\", \"11\")\n        .text(\"Foreground\")\n\n    var bg_item = dc_legend.append(\"g\")\n      .attr(\"class\",\"dc-legend-item\")\n      .attr(\"transform\", \"translate(0,18)\")\n\n      bg_item.append(\"rect\")\n        .attr(\"width\", \"13\")\n        .attr(\"height\", \"13\")\n        .attr(\"fill\", \"gray\")\n\n      bg_item.append(\"text\")\n        .attr(\"x\", \"15\")\n        .attr(\"y\", \"11\")\n        .text(\"Background\")\n\n  },\n\n  renderLegendColorScheme : function(svg_container, attr_name, do_not_render) {\n\n    var self = this;\n\n    var branch_annotations = this.state.json[\"fits\"][this.which_model][\"branch-annotations\"];\n\n    var svg = self.svg;\n\n    // clear existing linearGradients\n    d3.selectAll(\".legend-definitions\").selectAll(\"linearGradient\").remove();\n    d3.selectAll(\"#color-legend\").remove();\n\n    if (branch_annotations && !do_not_render) {\n        var bar_width = 70,\n            bar_height = 300,\n            margins = {\n                'bottom': 30,\n                'top': 15,\n                'left': 40,\n                'right': 2\n            };\n\n        var this_grad = svg.append(\"defs\")\n            .attr(\"class\", \"legend-definitions\")\n            .append(\"linearGradient\")\n              .attr(\"id\", \"_omega_bar\")\n              .attr(\"x1\", \"0%\")\n              .attr(\"y1\", \"0%\")\n              .attr(\"x2\", \"0%\")\n              .attr(\"y2\", \"100%\");\n\n        var omega_scale = d3.scale.pow().exponent(this.scaling_exponent)\n            .domain(d3.extent(self.omega_color.domain()))\n            .range([0, 1]),\n            axis_scale = d3.scale.pow().exponent(this.scaling_exponent)\n            .domain(d3.extent(self.omega_color.domain()))\n            .range([0, bar_height - margins['top'] - margins['bottom']]);\n\n\n        self.omega_color.domain().forEach(function(d) {\n            this_grad.append(\"stop\")\n                .attr(\"offset\", \"\" + omega_scale(d) * 100 + \"%\")\n                .style(\"stop-color\", self.omega_color(d));\n        });\n\n        var g_container = svg.append(\"g\")\n              .attr(\"id\", \"color-legend\")\n              .attr(\"transform\", \"translate(\" + margins[\"left\"] + \",\" + margins[\"top\"] + \")\");\n\n        g_container.append(\"rect\").attr(\"x\", 0)\n            .attr(\"width\", bar_width - margins['left'] - margins['right'])\n            .attr(\"y\", 0)\n            .attr(\"height\", bar_height - margins['top'] - margins['bottom'])\n            .style(\"fill\", \"url(#_omega_bar)\");\n\n\n        var draw_omega_bar = d3.svg.axis().scale(axis_scale)\n            .orient(\"left\")\n            .tickFormat(d3.format(\".1r\"))\n            .tickValues([0, 0.01, 0.1, 0.5, 1, 2, 5, 10]);\n\n        var scale_bar = g_container.append(\"g\");\n\n        scale_bar.style(\"font-size\", \"14\")\n            .attr(\"class\", \"hyphy-omega-bar\")\n            .call(draw_omega_bar);\n\n        scale_bar.selectAll(\"text\")\n            .style(\"text-anchor\", \"right\");\n\n\t\t\t\tvar _label = '';\n        var x_label = _label = scale_bar.append(\"g\").attr(\"class\", \"hyphy-omega-bar\");\n        x_label = x_label.selectAll(\"text\").data([attr_name]);\n        x_label.enter().append(\"text\");\n        x_label.text(function(d) {\n            return $('<textarea />').html(d).text();\n        })\n            .attr(\"transform\", \"translate(\" + (bar_width - margins['left'] - margins['right']) * 0.5 + \",\" + (bar_height - margins['bottom']) + \")\")\n            .style(\"text-anchor\", \"middle\")\n            .style(\"font-size\", \"18\")\n            .attr(\"dx\", \"0.0em\")\n            .attr(\"dy\", \"0.1em\");\n    }\n  },\n\n  setHandlers : function() {\n\n      var self = this;\n\n\n      $(\"#hyphy-error-hide\").on(\"click\", function(e) {\n          d3.select(\"#hyphy-error\").style(\"display\", \"none\");\n          e.preventDefault();\n      });\n\n      $(\".hyphy-tree-trigger\").on(\"click\", function(e) {\n\n        self.renderTree();\n\n      });\n\n      $(\".tree-tab-btn\").on('click', function(e) {\n        self.tree.placenodes().update();\n      });\n\n      $(\"#export-phylo-svg\").on('click', function(e) {\n          datamonkey.save_image(\"svg\", \"#tree_container\");\n      });\n\n      $(\"#export-phylo-png\").on('click', function(e) {\n          datamonkey.save_image(\"png\", \"#tree_container\");\n      });\n\n      $(\"#export-phylo-nwk\").on('click', function(e) {\n        var nwk = self.tree.get_newick(function(){});\n        var pom = document.createElement('a');\n        pom.setAttribute('href', 'data:text/octet-stream;charset=utf-8,' + encodeURIComponent(nwk));\n        pom.setAttribute('download', 'nwk.txt');\n        $(\"body\").append(pom);\n        pom.click();\n        pom.remove();\n      });\n\n\n  },\n\n  setTreeHandlers : function() {\n\n    var self = this;\n    var tree_object = self.tree;\n\n    $(\"[data-direction]\").on(\"click\", function(e) {\n        var which_function = $(this).data(\"direction\") == 'vertical' ? tree_object.spacing_x : tree_object.spacing_y;\n        which_function(which_function() + (+$(this).data(\"amount\"))).update();\n    });\n\n\n    $(\".phylotree-layout-mode\").on(\"change\", function(e) {\n        if ($(this).is(':checked')) {\n            if (tree_object.radial() != ($(this).data(\"mode\") == \"radial\")) {\n                tree_object.radial(!tree_object.radial()).placenodes().update();\n            }\n        }\n    });\n\n    $(\".phylotree-align-toggler\").on(\"change\", function(e) {\n        if ($(this).is(':checked')) {\n            if (tree_object.align_tips($(this).data(\"align\") == \"right\")) {\n                tree_object.placenodes().update();\n            }\n        }\n    });\n\n    $(\"#sort_original\").on(\"click\", function(e) {\n        tree_object.resort_children(function(a, b) {\n            return a[\"original_child_order\"] - b[\"original_child_order\"];\n        });\n\n        e.preventDefault();\n\n    });\n\n    $(\"#sort_ascending\").on(\"click\", function(e) {\n        self.sortNodes(true);\n        e.preventDefault();\n    });\n\n    $(\"#sort_descending\").on(\"click\", function(e) {\n        self.sortNodes(false);\n        e.preventDefault();\n    });\n\n\n  },\n\n  setPartitionList : function() {\n\n    var self = this;\n\n    // Check if partition list exists\n    if(!self.props.json[\"partition\"]) {\n      d3.select(\"#hyphy-tree-highlight-div\").style(\"display\", \"none\");\n      d3.select(\"#hyphy-tree-highlight\").style(\"display\", \"none\");\n      return;\n    }\n\n    // set tree partitions\n    self.tree.set_partitions(self.props.json[\"partition\"]);\n\n    var partition_list = d3.select(\"#hyphy-tree-highlight-branches\").selectAll(\"li\").data([\n        ['None']\n    ].concat(d3.keys(self.props.json[\"partition\"]).map(function(d) {\n        return [d];\n    }).sort()));\n\n    partition_list.enter().append(\"li\");\n    partition_list.exit().remove();\n    partition_list = partition_list.selectAll(\"a\").data(function(d) {\n        return d;\n    });\n\n    partition_list.enter().append(\"a\");\n    partition_list.attr(\"href\", \"#\").on(\"click\", function(d, i) {\n        d3.select(\"#hyphy-tree-highlight\").attr(\"value\", d);\n        self.renderTree();\n    });\n\n    // set default to passed setting\n    partition_list.text(function(d) {\n        if (d == \"RELAX.test\") {\n            this.click();\n        }\n        return d;\n    });\n\n  },\n\n  setModelList : function() {\n\n    var self = this;\n\n    if(!this.state.json) {\n      return [];\n    }\n\n    this.state.settings['suppress-tree-render'] = true;\n\n    var def_displayed = false;\n\n    var model_list = d3.select(\"#hyphy-tree-model-list\").selectAll(\"li\").data(d3.keys(this.state.json[\"fits\"]).map(function(d) {\n        return [d];\n    }).sort());\n\n    model_list.enter().append(\"li\");\n    model_list.exit().remove();\n    model_list = model_list.selectAll(\"a\").data(function(d) {\n        return d;\n    });\n\n    model_list.enter().append(\"a\");\n\n    model_list.attr(\"href\", \"#\").on(\"click\", function(d, i) {\n      d3.select(\"#hyphy-tree-model\").attr(\"value\", d);\n      self.renderTree();\n    });\n\n\n    model_list.text(function(d) {\n\n        if (d == \"General Descriptive\") {\n            def_displayed = true;\n            this.click();\n        }\n\n        if (!def_displayed && d == \"Alternative\") {\n            def_displayed = true;\n            this.click();\n        }\n\n        if (!def_displayed && d == \"Partitioned MG94xREV\") {\n            def_displayed = true;\n            this.click();\n        }\n\n        if (!def_displayed && d == \"MG94\") {\n            def_displayed = true;\n            this.click();\n        }\n\n        if (!def_displayed && d == \"Full model\") {\n            def_displayed = true;\n            this.click();\n        }\n\n        return d;\n\n    });\n\n    this.settings['suppress-tree-render'] = false;\n\n  },\n\n  initialize : function() {\n\n    var self = this;\n\n    this.settings = this.state.settings;\n\n    if(!this.settings) {\n      return null;\n    }\n\n    if(!this.state.json) {\n      return null;\n    }\n\n    $(\"#hyphy-tree-branch-lengths\").click();\n\n    this.scaling_exponent = 0.33;\n    this.omega_format = d3.format(\".3r\");\n    this.prop_format = d3.format(\".2p\");\n    this.fit_format = d3.format(\".2f\");\n    this.p_value_format = d3.format(\".4f\");\n\n    var json =  this.state.json;\n    var analysis_data = json;\n\n    this.width = 800;\n    this.height = 600;\n\n    this.which_model = this.settings[\"tree-options\"][\"hyphy-tree-model\"][0];\n    this.legend_type = this.settings[\"hyphy-tree-legend-type\"];\n\n    this.setHandlers();\n    this.setModelList();\n    this.initializeTree();\n    this.setPartitionList();\n\n  },\n\n  initializeTree : function() {\n\n    var self = this;\n\n    var analysis_data = self.state.json;\n\n    var width = this.width,\n        height = this.height,\n        alpha_level = 0.05,\n        branch_lengths = [];\n\n    if(!this.tree) {\n      this.tree = d3.layout.phylotree(\"body\")\n          .size([height, width])\n          .separation(function(a, b) {\n              return 0;\n          });\n    }\n\n    this.setTreeHandlers();\n\n    // clear any existing svg\n    d3.select(\"#tree_container\").html(\"\");\n\n    this.svg = d3.select(\"#tree_container\").append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height);\n\n    this.tree.branch_name(null);\n    this.tree.node_span('equal');\n    this.tree.options({\n        'draw-size-bubbles': false,\n        'selectable': false,\n        'left-right-spacing': 'fit-to-size',\n        'left-offset': 100,\n        'color-fill': this.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0]\n    }, false);\n\n    this.assignBranchAnnotations();\n\n    self.omega_color = d3.scale.pow().exponent(this.scaling_exponent)\n        .domain([0, 0.25, 1, 5, 10])\n        .range(this.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0] \n                    ? [\"#DDDDDD\", \"#AAAAAA\", \"#888888\", \"#444444\", \"#000000\"] \n                    :  [\"#5e4fa2\", \"#3288bd\", \"#e6f598\", \"#f46d43\", \"#9e0142\"]) \n        .clamp(true);\n\n    self.renderTree();\n\n    if (self.legend_type == 'discrete') {\n      self.renderDiscreteLegendColorScheme(\"tree_container\");\n    } else {\n      self.renderLegendColorScheme(\"tree_container\", analysis_data[\"fits\"][this.which_model][\"annotation-tag\"]);\n    }\n\n\n    if(this.settings.edgeColorizer) {\n      this.edgeColorizer = this.settings.edgeColorizer;\n    }\n\n\n    this.tree.style_edges(this.edgeColorizer);\n    this.tree.style_nodes(this.nodeColorizer);\n\n    this.tree.spacing_x(30, true);\n    this.tree.layout();\n    this.tree.placenodes().update();\n    this.tree.layout();\n\n  },\n\n  renderTree : function(skip_render) {\n\n      var self = this;\n      var analysis_data = this.state.json;\n      var svg = self.svg;\n\n      if (!this.settings['suppress-tree-render']) {\n\n          var do_layout = false;\n\n          for (var k in this.settings[\"tree-options\"]) {\n\n              //TODO : Check to make sure settings has a matching field\n              if(k == 'hyphy-tree-model') {\n\n                var controller = d3.select(\"#\" + k),\n                    controller_value = (controller.attr(\"value\") || controller.property(\"checked\"));\n                    \n                if (controller_value != this.settings[\"tree-options\"][k][0] && controller_value != false) {\n                    this.settings[\"tree-options\"][k][0] = controller_value;\n                    do_layout = do_layout || this.settings[\"tree-options\"][k][1];\n                }\n\n              } else {\n                var controller = d3.select(\"#\" + k),\n                    controller_value = (controller.attr(\"value\") || controller.property(\"checked\"));\n                    \n                if (controller_value != this.settings[\"tree-options\"][k][0]) {\n                    this.settings[\"tree-options\"][k][0] = controller_value;\n                    do_layout = do_layout || this.settings[\"tree-options\"][k][1];\n                }\n              }\n          }\n\n\n          // Update which_model\n          if(self.which_model != this.settings[\"tree-options\"][\"hyphy-tree-model\"][0]) {\n            self.which_model = this.settings[\"tree-options\"][\"hyphy-tree-model\"][0]; \n            self.initializeTree();\n            return;\n          }\n\n          if(_.indexOf(_.keys(analysis_data), \"tree\") > -1) {\n            this.tree(analysis_data[\"tree\"]).svg(svg);\n          } else {\n            this.tree(analysis_data[\"fits\"][self.which_model][\"tree string\"]).svg(svg);\n          }\n\n          this.branch_lengths = this.getBranchLengths();\n\n          this.tree.font_size(18);\n          this.tree.scale_bar_font_size(14);\n          this.tree.node_circle_size(0);\n\n          this.tree.branch_length(function(n) {\n              if (self.branch_lengths) {\n                  return self.branch_lengths[n.name] || 0;\n              }\n              return undefined;\n          });\n\n          this.assignBranchAnnotations();\n          \n          if(_.findKey(analysis_data, \"partition\")) {\n            this.partition = (this.settings[\"tree-options\"][\"hyphy-tree-highlight\"] \n                              ? analysis_data[\"partition\"][this.settings[\"tree-options\"][\"hyphy-tree-highlight\"][0]] \n                              : null) || null;\n          } else {\n            this.partition = null;\n          }\n\n          self.omega_color = d3.scale.pow().exponent(self.scaling_exponent)\n              .domain([0, 0.25, 1, 5, 10])\n              .range(self.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0] \n                     ? [\"#DDDDDD\", \"#AAAAAA\", \"#888888\", \"#444444\", \"#000000\"]\n                     : [\"#5e4fa2\", \"#3288bd\", \"#e6f598\", \"#f46d43\", \"#9e0142\"])\n              .clamp(true);\n\n          self.tree.options({\n              'color-fill': self.settings[\"tree-options\"][\"hyphy-tree-fill-color\"][0]\n          }, false);\n\n\n          d3.select(\".phylotree-definitions\").selectAll(\"linearGradient\").remove();\n\n          // TODO: Should be a prop. Hide or show legend.\n          if(!this.settings[\"tree-options\"][\"hyphy-tree-hide-legend\"][0]) {\n            d3.select(\"#color-legend\").style(\"visibility\", \"visible\");\n            \n            if(self.legend_type) {\n              self.renderDiscreteLegendColorScheme(\"tree_container\");\n            } else {\n              self.renderLegendColorScheme(\"tree_container\", self.state.json[\"fits\"][self.which_model][\"annotation-tag\"]);\n            }\n\n          } else {\n            d3.select(\"#color-legend\").style(\"visibility\", \"hidden\");\n          }\n\n          if (!skip_render) {\n              if (do_layout) {\n                  this.tree.update_layout();\n              }\n              //d3_phylotree_trigger_refresh(this.tree);\n\t\t\t\t\t\t\t//this.tree.trigger_refresh();\n          }\n\n      }\n  },\n\n  componentDidMount: function() {\n    this.initialize();\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n\n    this.setState({\n                    json : nextProps.json,\n                    settings : nextProps.settings\n                  });\n\n  },\n\n  componentDidUpdate : function() {\n    this.initialize();\n  },\n\n  render: function() {\n\n    return (\n        <div>\n          <div className='row'>\n              <div className=\"cold-md-12\">\n                  <div className=\"input-group input-group-sm\">\n                      <div className=\"input-group-btn\">\n                            <button type=\"button\" className=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">Export<span className=\"caret\"></span></button>\n                            <ul className=\"dropdown-menu\">\n                              <li id=\"export-phylo-png\"><a href=\"#\"><i className=\"fa fa-image\"></i> Image</a></li>\n                              <li id=\"export-phylo-nwk\"><a href=\"#\"><i className=\"fa fa-file-o\"></i> Newick File</a></li>\n                            </ul>\n                          <button type=\"button\" className=\"btn btn-default btn-sm\" data-direction=\"vertical\" data-amount=\"1\" title=\"Expand vertical spacing\">\n                              <i className=\"fa fa-arrows-v\"></i>\n                          </button>\n                          <button type=\"button\" className=\"btn btn-default btn-sm\" data-direction=\"vertical\" data-amount=\"-1\" title=\"Compress vertical spacing\">\n                              <i className=\"fa  fa-compress fa-rotate-135\"></i>\n                          </button>\n                          <button type=\"button\" className=\"btn btn-default btn-sm\" data-direction=\"horizontal\" data-amount=\"1\" title=\"Expand horizonal spacing\">\n                              <i className=\"fa fa-arrows-h\"></i>\n                          </button>\n                          <button type=\"button\" className=\"btn btn-default btn-sm\" data-direction=\"horizontal\" data-amount=\"-1\" title=\"Compress horizonal spacing\">\n                              <i className=\"fa  fa-compress fa-rotate-45\"></i>\n                          </button>\n                          <button type=\"button\" className=\"btn btn-default btn-sm\" id=\"sort_ascending\" title=\"Sort deepest clades to the bototm\">\n                              <i className=\"fa fa-sort-amount-asc\"></i>\n                          </button>\n                          <button type=\"button\" className=\"btn btn-default btn-sm\" id=\"sort_descending\" title=\"Sort deepsest clades to the top\">\n                              <i className=\"fa fa-sort-amount-desc\"></i>\n                          </button>\n                          <button type=\"button\" className=\"btn btn-default btn-sm\" id=\"sort_original\" title=\"Restore original order\">\n                              <i className=\"fa fa-sort\"></i>\n                          </button>\n                      </div>\n                      <div className=\"input-group-btn\" data-toggle=\"buttons\">\n                          <label className=\"btn btn-default active btn-sm\">\n                              <input type=\"radio\" name=\"options\" className=\"phylotree-layout-mode\" data-mode=\"linear\" autoComplete=\"off\" checked=\"\" title=\"Layout left-to-right\"></input>Linear\n                          </label>\n                          <label className=\"btn btn-default  btn-sm\">\n                              <input type=\"radio\" name=\"options\" className=\"phylotree-layout-mode\" data-mode=\"radial\" autoComplete=\"off\" title=\"Layout radially\"></input> Radial\n                          </label>\n                      </div>\n                      <div className=\"input-group-btn\" data-toggle=\"buttons\">\n                        <label className=\"btn btn-default active btn-sm\">\n                          <input type=\"radio\" className=\"phylotree-align-toggler\" data-align=\"left\" name=\"options-align\" autoComplete=\"off\" checked=\"\" title=\"Align tips labels to branches\"></input> \n                              <i className=\"fa fa-align-left\"></i>\n                        </label>\n                        <label className=\"btn btn-default btn-sm\">\n                         <input type=\"radio\" className=\"phylotree-align-toggler\" data-align=\"right\" name=\"options-align\" autoComplete=\"off\" title=\"Align tips labels to the edge of the plot\"></input> \n                              <i className=\"fa fa-align-right\"></i>\n                        </label>\n                      </div>\n      \n                      <div className=\"input-group-btn\">\n                          <button type=\"button\" className=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">Model\n                              <span className=\"caret\"></span></button>\n                          <ul className=\"dropdown-menu\" id=\"hyphy-tree-model-list\">\n                          </ul>\n                      </div>\n\n                      <input type=\"text\" className=\"form-control disabled\" id=\"hyphy-tree-model\" disabled></input>\n\n\n                      <div id=\"hyphy-tree-highlight-div\" className=\"input-group-btn\">\n                          <button type=\"button\" className=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">Highlight branch set\n                              <span className=\"caret\"></span></button>\n                          <ul className=\"dropdown-menu\" id=\"hyphy-tree-highlight-branches\">\n                          </ul>\n                      </div>\n\n                      <input type=\"text\" className=\"form-control disabled\" id=\"hyphy-tree-highlight\" disabled></input>\n\n                      <span className=\"input-group-addon\">\n                        Use model branch lengths\n                        <input type=\"checkbox\" id=\"hyphy-tree-branch-lengths\" className = \"hyphy-tree-trigger\"></input>\n                      </span>\n\n                      <span className=\"input-group-addon\">\n                        Hide legend\n                        <input type=\"checkbox\" id=\"hyphy-tree-hide-legend\" className = \"hyphy-tree-trigger\"></input>\n                      </span>\n\n                      <span className=\"input-group-addon\">\n                        Grayscale \n                        <input type=\"checkbox\" id=\"hyphy-tree-fill-color\" className=\"hyphy-tree-trigger\"></input>\n                      </span>\n\n                  </div>\n              </div>\n          </div>\n          <div className=\"row\">\n              <div className=\"col-md-12\">\n                  <div className=\"row\">\n                      <div id=\"tree_container\" className=\"tree-widget\"></div>\n                  </div>\n              </div>\n          </div>\n        </div>\n\n      )\n  }\n\n});\n\nfunction render_tree(json, element, settings) {\n  return React.render (\n    <Tree json={json} settings={settings} />,\n    $(element)[0]\n  );\n}\n\nfunction rerender_tree(json, element, settings) {\n  $(element).empty();\n  return render_tree(json, settings);\n}\n\n\nmodule.exports.Tree = Tree;\nmodule.exports.render_tree = render_tree;\nmodule.exports.rerender_tree = rerender_tree;\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/components/tree.jsx","var React = require('react');\nimport {PropChart} from './prop_chart.jsx';\n\nvar BranchTable = React.createClass({\n\n  getInitialState: function() {\n\n    // add the following\n    var table_row_data = this.getBranchRows(this.props.tree, this.props.test_results, this.props.annotations),\n        table_columns = this.getBranchColumns(table_row_data),\n        initial_model_name = _.take(_.keys(this.props.annotations)),\n        initial_omegas = this.props.annotations ? \n                         this.props.annotations[initial_model_name][\"omegas\"] : \n                         null;\n\n    var distro_settings = {\n      dimensions : { width : 600, height : 400 },\n      margins : { 'left': 50, 'right': 15, 'bottom': 15, 'top': 35 },\n      legend: false,\n      domain : [0.00001, 10000],\n      do_log_plot : true,\n      k_p : null,\n      plot : null,\n      svg_id : \"prop-chart\"\n    };\n\n    return { \n             tree : this.props.tree,\n             test_results : this.props.test_results,\n             annotations : this.props.annotations,\n             table_row_data : table_row_data, \n             table_columns : table_columns,\n             current_model_name : initial_model_name,\n             current_omegas : initial_omegas,\n             distro_settings : distro_settings\n           };\n  },\n\n  getBranchLength : function(m) {\n\n    if(!this.state.tree) {\n      return '';\n    }\n\n    return d3.format(\".4f\")(this.state.tree.get_node_by_name(m).attribute);\n  },\n\n  getLRT : function(branch) {\n    var formatted = d3.format(\".4f\")(branch[\"LRT\"]);\n    if(formatted == \"NaN\") {\n      return branch[\"LRT\"];\n    } else {\n      return formatted;\n    }\n  },\n\n  getPVal : function(branch) {\n    return d3.format(\".4f\")(branch[\"p\"]);\n  },\n\n  getUncorrectedPVal : function(branch) {\n    return d3.format(\".4f\")(branch[\"uncorrected p\"]);\n  },\n\n  getOmegaDistribution : function(m, annotations) {\n\n    if(!annotations) {\n      return '';\n    }\n\n    var omega_string = \"\";\n\n    for(var i in annotations[m][\"omegas\"]) {\n      var omega = parseFloat(annotations[m][\"omegas\"][i][\"omega\"]);\n      var formatted_omega = \"∞\";\n      if(omega<1e+20) {\n        formatted_omega = d3.format(\".3r\")(omega)\n      }\n      omega_string += \"&omega;<sub>\" + (parseInt(i) + 1) + \"</sub> = \" + formatted_omega + \" (\" + d3.format(\".2p\")(annotations[m][\"omegas\"][i][\"prop\"]) + \")<br/>\";\n    }\n\n    return omega_string;\n\n  },\n\n  getBranchRows : function(tree, test_results, annotations) {\n\n    var self = this;\n\n    var table_row_data = [],\n        omega_format = d3.format(\".3r\"),\n        prop_format = d3.format(\".2p\");\n\n    for (var m in test_results) {\n\n      var branch_row = [];\n      var branch = test_results[m];\n\n      branch_row = [\n        m,\n        this.getBranchLength(m),\n        this.getLRT(branch),\n        this.getPVal(branch),\n        this.getUncorrectedPVal(branch),\n        this.getOmegaDistribution(m, annotations)\n      ];\n\n      table_row_data.push(branch_row);\n\n    }\n\n    table_row_data.sort(function(a, b) {\n\n      if (a[0] == b[0]) {\n          return a[1] < b[1] ? -1 : (a[1] == b[1] ? 0 : 1);\n      }\n\n      return a[3] - b[3];\n\n    });\n\n    return table_row_data;\n\n  },\n\n  setEvents : function() {\n\n    var self = this;\n\n    if(self.state.annotations) {\n      var branch_table = d3.select('#table-branch-table').selectAll(\"tr\");\n\n      branch_table.on(\"click\", function(d) {\n        var label = d[0];\n        self.setState({\n                        current_model_name : label, \n                        current_omegas : self.state.annotations[label][\"omegas\"]\n                      });\n      });\n    }\n\n  },\n\n  createDistroChart : function() {\n\n    var self = this;\n\n    this.settings = {\n      dimensions : { width : 600, height : 400 },\n      margins : { 'left': 50, 'right': 15, 'bottom': 15, 'top': 15 },\n      has_zeros : true,\n      legend_id : null,\n      do_log_plot : true,\n      k_p : null,\n      plot : null,\n      svg_id : \"prop-chart\"\n    };\n\n  },\n\n  getBranchColumns : function(table_row_data) {\n\n    if(table_row_data.length <= 0) {\n      return null;\n    }\n\n    var name_header = '<th>Name</th>',\n        length_header = '<th><abbr title=\"Branch Length\">B</abbr></th>',\n        lrt_header = '<th><abbr title=\"Likelihood ratio test statistic\">LRT</abbr></th>',\n        pvalue_header = '<th>Test p-value</th>',\n        uncorrected_pvalue_header = '<th>Uncorrected p-value</th>',\n        omega_header = '<th>ω distribution over sites</th>';\n\n    // inspect table_row_data and return header\n    var all_columns = [ \n                    name_header,\n                    length_header,\n                    lrt_header,\n                    pvalue_header,\n                    uncorrected_pvalue_header,\n                    omega_header\n                  ];\n\n    // validate each table row with its associated header\n\n    // trim columns to length of table_row_data\n    var column_headers = _.take(all_columns, table_row_data[0].length)\n\n    // remove all columns that have 0, null, or undefined rows\n    var items = d3.transpose(table_row_data);\n    \n\n    return column_headers;\n\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n\n    var table_row_data = this.getBranchRows(nextProps.tree, \n                                            nextProps.test_results, \n                                            nextProps.annotations),\n        table_columns = this.getBranchColumns(table_row_data),\n        initial_model_name = _.take(_.keys(nextProps.annotations)),\n        initial_omegas = nextProps.annotations ? \n                         nextProps.annotations[initial_model_name][\"omegas\"] : \n                         null;\n\n    var distro_settings = {\n      dimensions : { width : 600, height : 400 },\n      margins : { 'left': 50, 'right': 15, 'bottom': 15, 'top': 15 },\n      legend: false,\n      domain : [0.00001, 10000],\n      do_log_plot : true,\n      k_p : null,\n      plot : null,\n      svg_id : \"prop-chart\"\n    };\n\n    if(nextProps.test_results && nextProps.annotations) {\n      this.setState({ \n               tree : nextProps.tree,\n               test_results : nextProps.test_results,\n               annotations : nextProps.annotations,\n               table_row_data : table_row_data, \n               table_columns : table_columns,\n               current_model_name : initial_model_name,\n               current_omegas : initial_omegas,\n               distro_settings : distro_settings\n             });\n    }\n\n  },\n\n  componentDidUpdate : function() {\n\n    var branch_columns = d3.select('#table-branch-header');\n    branch_columns = branch_columns.selectAll(\"th\").data(this.state.table_columns);\n    branch_columns.enter().append(\"th\");\n\n    branch_columns.html(function(d) {\n        return d;\n    });\n\n    var branch_rows = d3.select('#table-branch-table').selectAll(\"tr\").data(this.state.table_row_data);\n\n    branch_rows.enter().append('tr');\n    branch_rows.exit().remove();\n    branch_rows.style('font-weight', function(d) {\n        return d[3] <= 0.05 ? 'bold' : 'normal';\n    });\n\n    branch_rows = branch_rows.selectAll(\"td\").data(function(d) {\n        return d;\n    });\n\n    branch_rows.enter().append(\"td\");\n    branch_rows.html(function(d) {\n        return d;\n    });\n\n    this.createDistroChart();\n    this.setEvents();\n\n  },\n\n  render: function() {\n\n    var self = this;\n\n    return (\n        <div className=\"row\">\n          <div id=\"hyphy-branch-table\" className=\"col-md-7\">\n              <table className=\"table table-hover table-condensed\">\n                  <thead id=\"table-branch-header\"></thead>\n                  <tbody id=\"table-branch-table\"></tbody>\n              </table>\n          </div>\n\n          <div id='primary-omega-tag' className=\"col-md-5\">\n            <PropChart name={self.state.current_model_name} omegas={self.state.current_omegas} \n             settings={self.state.distro_settings} />\n          </div>\n        </div>\n\n      )\n  }\n\n});\n\n// Will need to make a call to this\n// omega distributions\nfunction render_branch_table(tree, test_results, annotations, element) {\n  React.render(\n    <BranchTable tree={tree} test_results={test_results} annotations={annotations} />,\n    $(element)[0]\n  );\n}\n\n// Will need to make a call to this\n// omega distributions\nfunction rerender_branch_table(tree, test_results, annotations, element) {\n  $(element).empty();\n  render_branch_table(tree, test_results, annotations, element);\n}\n\nmodule.exports.BranchTable = BranchTable;\nmodule.exports.render_branch_table = render_branch_table;\nmodule.exports.rerender_branch_table = rerender_branch_table;\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/components/branch_table.jsx","var React = require('react');\nvar datamonkey = require('../../datamonkey/datamonkey.js');\n\nvar PropChart = React.createClass({\n\n  getDefaultProps : function() {\n    return {\n      svg_id : null,\n      dimensions : { width : 600, height : 400 },\n      margins : { 'left': 50, 'right': 15, 'bottom': 25, 'top': 35 },\n      has_zeros : false,\n      legend_id : null,\n      do_log_plot : true,\n      k_p : null,\n      plot : null,\n    };\n\n  },\n\n  getInitialState: function() {\n    return { \n             model_name : this.props.name, \n             omegas : this.props.omegas,\n             settings : this.props.settings,\n           };\n  },\n\n  setEvents : function() {\n    var self = this;\n\n    d3.select(\"#\" + this.save_svg_id).on('click', function(e) {\n      datamonkey.save_image(\"svg\", \"#\" + self.svg_id);\n    });\n\n    d3.select(\"#\" + this.save_png_id).on('click', function(e) {\n      datamonkey.save_image(\"png\", \"#\" + self.svg_id);\n    });\n  },\n\n  initialize : function() {\n\n    // clear svg\n\t\td3.select(\"#prop-chart\").html(\"\");\n\n    this.data_to_plot = this.state.omegas;\n\n    // Set props from settings\n    this.svg_id = this.props.settings.svg_id;\n    this.dimensions = this.props.settings.dimensions || this.props.dimensions;\n    this.margins = this.props.settings.margins || this.props.margins;\n    this.legend_id = this.props.settings.legend || this.props.legend_id;\n    this.do_log_plot = this.props.settings.log || this.props.do_log_plot;\n    this.k_p = this.props.settings.k || this.props.k_p;\n\n    var dimensions = this.props.dimensions;\n    var margins = this.props.margins;\n\n    if (this.props.do_log_plot) {\n      this.has_zeros = this.data_to_plot.some(function(d) { return d.omega <= 0; });\n    }\n\n    this.plot_width = dimensions[\"width\"] - margins['left'] - margins['right'],\n    this.plot_height = dimensions[\"height\"] - margins['top'] - margins['bottom'];\n\n    var domain = this.state.settings[\"domain\"];\n\n    this.omega_scale = (this.do_log_plot \n        ? (this.has_zeros \n        ? d3.scale.pow().exponent (0.2) : d3.scale.log()) : d3.scale.linear())\n        .range([0, this.plot_width]).domain(domain).nice();\n\n    this.proportion_scale = d3.scale.linear().range([this.plot_height, 0]).domain([-0.05, 1]).clamp(true);\n\n    // compute margins -- circle AREA is proportional to the relative weight\n    // maximum diameter is (height - text margin)\n    this.svg = d3.select(\"#\" + this.svg_id)\n                .attr(\"width\", dimensions.width + margins['left'] + margins['right'])\n                .attr(\"height\", dimensions.height + margins['top'] + margins['bottom']);\n\n    this.plot = this.svg.selectAll(\".container\");\n\n    this.svg.selectAll(\"defs\").remove();\n\n    this.svg.append(\"defs\").append(\"marker\")\n        .attr(\"id\", \"arrowhead\")\n        .attr(\"refX\", 10) /*must be smarter way to calculate shift*/\n        .attr(\"refY\", 4)\n        .attr(\"markerWidth\", 10)\n        .attr(\"markerHeight\", 8)\n        .attr(\"orient\", \"auto\")\n        .attr(\"stroke\", \"#000\")\n        .attr(\"fill\", \"#000\")\n        .append(\"path\")\n        .attr(\"d\", \"M 0,0 V8 L10,4 Z\");\n\n    if (this.plot.empty()) {\n      this.plot = this.svg.append(\"g\").attr(\"class\", \"container\");\n    }\n\n    this.plot.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \" , \" + this.margins[\"top\"] + \")\");\n    this.reference_omega_lines = this.plot.selectAll(\".hyphy-omega-line-reference\"),\n    this.displacement_lines = this.plot.selectAll(\".hyphy-displacement-line\");\n\n    this.createNeutralLine();\n    this.createXAxis();\n    this.createYAxis();\n    this.setEvents();\n    this.createOmegaLine(this.state.omegas);\n\t\tconsole.log('initialized everything');\n    //_.map(this.props.omegas, function(d) { return this.createOmegaLine(d[\"omega\"],d[\"prop\"]); });\n\n\t\tconsole.log(this.svg);\n    \n\n  },\n\n  createOmegaLine : function(omegas) {\n\n    var self = this;\n    var data_to_plot = this.data_to_plot;\n\n    // generate color wheel from omegas\n    self.colores_g = _.shuffle([ \"#1f77b4\"\n      ,\"#ff7f0e\"\n      ,\"#2ca02c\"\n      ,\"#d62728\"\n      ,\"#9467bd\"\n      ,\"#8c564b\"\n      ,\"#e377c2\"\n      ,\"#7f7f7f\"\n      ,\"#bcbd22\"\n      ,\"#17becf\"\n    ]);\n\n\n    // ** Omega Line (Red) ** //\n    var omega_lines = this.plot.selectAll(\".hyphy-omega-line\").data(omegas);\n    omega_lines.enter().append(\"line\");\n    omega_lines.exit().remove();\n\n    omega_lines.transition().attr(\"x1\", function(d) {\n        return self.omega_scale(d.omega);\n    })\n        .attr(\"x2\", function(d) {\n            return self.omega_scale(d.omega);\n        })\n\t\t\t\t.attr(\"y1\", function(d) {\n\t\t\t\t\t\treturn self.proportion_scale(-0.05);\n\t\t\t\t})\n\t\t\t\t.attr(\"y2\", function(d) {\n\t\t\t\t\t\treturn self.proportion_scale(d.prop);\n\t\t\t\t})\n\t\t\t\t.style(\"stroke\", function(d) {\n\t\t\t\t\tvar color = _.take(self.colores_g);\n\t\t\t\t\tself.colores_g = _.rest(self.colores_g);\n\t\t\t\t\treturn color;\n\t\t\t\t})\n\t\t\t\t.attr(\"class\", \"hyphy-omega-line\");\n  },\n\n  createNeutralLine : function() {\n    var self = this;\n\n    // ** Neutral Line (Blue) ** //\n    var neutral_line = this.plot.selectAll(\".hyphy-neutral-line\").data([1]);\n    neutral_line.enter().append(\"line\").attr(\"class\", \"hyphy-neutral-line\");\n    neutral_line.exit().remove();\n    neutral_line.transition().attr(\"x1\", function(d) {\n        return self.omega_scale(d);\n    }).attr(\"x2\", function(d) {\n          return self.omega_scale(d);\n      })\n      .attr(\"y1\", 0)\n      .attr(\"y2\", this.plot_height);\n\n  },\n  createXAxis : function() {\n\n    // *** X-AXIS *** //\n    var xAxis = d3.svg.axis()\n        .scale(this.omega_scale)\n        .orient(\"bottom\");\n\n    if (this.do_log_plot) {\n        xAxis.ticks(10, this.has_zeros ? \".2r\" : \".1r\");\n    }\n\n    var x_axis = this.svg.selectAll(\".x.axis\");\n    var x_label;\n\n    if (x_axis.empty()) {\n        x_axis = this.svg.append(\"g\")\n            .attr(\"class\", \"x hyphy-axis\");\n\n        x_label = x_axis.append(\"g\").attr(\"class\", \"hyphy-axis-label x-label\");\n    } else {\n        x_label = x_axis.select(\".axis-label.x-label\");\n    }\n\n    x_axis.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \",\" + (this.plot_height + this.margins[\"top\"]) + \")\")\n        .call(xAxis);\n    x_label = x_label.attr(\"transform\", \"translate(\" + this.plot_width + \",\" + this.margins[\"bottom\"] + \")\")\n        .selectAll(\"text\").data([\"\\u03C9\"]);\n    x_label.enter().append(\"text\");\n    x_label.text(function(d) {\n        return d\n    }).style(\"text-anchor\", \"end\")\n      .attr(\"dy\", \"0.0em\");\n\n  },\n  createYAxis : function() {\n\n    // *** Y-AXIS *** //\n    var yAxis = d3.svg.axis()\n        .scale(this.proportion_scale)\n        .orient(\"left\")\n        .ticks(10, \".1p\");\n\n    var y_axis = this.svg.selectAll(\".y.hyphy-axis\");\n    var y_label;\n\n    if (y_axis.empty()) {\n        y_axis = this.svg.append(\"g\")\n            .attr(\"class\", \"y hyphy-axis\");\n        y_label = y_axis.append(\"g\").attr(\"class\", \"hyphy-axis-label y-label\");\n    } else {\n        y_label = y_axis.select(\".hyphy-axis-label.y-label\");\n    }\n    y_axis.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \",\" + this.margins[\"top\"] + \")\")\n        .call(yAxis);\n    y_label = y_label.attr(\"transform\", \"translate(\" + (-this.margins[\"left\"]) + \",\" + 0 + \")\")\n        .selectAll(\"text\").data([\"Proportion of sites\"]);\n    y_label.enter().append(\"text\");\n    y_label.text(function(d) {\n        return d\n    }).style(\"text-anchor\", \"start\")\n      .attr(\"dy\", \"-1em\")\n\n  },\n\n  componentDidMount: function() {\n    try {\n      this.initialize();\n    } catch(e) {};\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n\n    this.setState({\n                    model_name : nextProps.name, \n                    omegas : nextProps.omegas\n                  });\n\n  },\n\n  componentDidUpdate : function() {\n    try {\n      this.initialize();\n    } catch(e) {};\n\n  },\n\n  render: function() {\n\n    this.save_svg_id = \"export-\" + this.svg_id + \"-svg\";\n    this.save_png_id = \"export-\" + this.svg_id + \"-png\";\n\n    return (\n        <div className=\"panel panel-default\" id={ this.state.model_name }>\n            <div className=\"panel-heading\">\n                <h3 className=\"panel-title\"><strong>{ this.state.model_name}</strong></h3>\n                <p>&omega; distribution</p>\n                <div className=\"btn-group\">\n                    <button id={ this.save_svg_id } type=\"button\" className=\"btn btn-default btn-sm\">\n                        <span className=\"glyphicon glyphicon-floppy-save\"></span> SVG\n                    </button>\n                    <button id={ this.save_png_id } type=\"button\" className=\"btn btn-default btn-sm\">\n                        <span className=\"glyphicon glyphicon-floppy-save\"></span> PNG\n                    </button>\n                </div>\n            </div>\n            <div className=\"panel-body\">\n                <svg id ={ this.svg_id } />\n            </div>\n        </div>\n    );\n  }\n});\n\nfunction render_prop_chart(model_name, omegas, settings) {\n  return React.render(\n    <PropChart name={model_name} omegas={omegas} settings={settings} />,\n    document.getElementById(\"primary-omega-tag\")\n  );\n}\n\nfunction rerender_prop_chart(model_name, omeags, settings) {\n\n  $(\"#primary-omega-tag\").empty();\n  return render_prop_chart(model_name, omeags, settings);\n\n}\n\nmodule.exports.render_prop_chart = render_prop_chart;\nmodule.exports.rerender_prop_chart = rerender_prop_chart;\nmodule.exports.PropChart = PropChart;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/components/prop_chart.jsx","'use strict';\n\nmodule.exports = require('react/lib/ReactDOM');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-dom/index.js\n// module id = 209\n// module chunks = 0","require('dc.css');\n\nvar crossfilter = require('crossfilter'),\n\t\tdc = require('dc'),\n\t  datamonkey = require('../datamonkey/datamonkey.js');\n\nfunction busted_render_summary(json) {\n\n  var fit_format = d3.format (\".2f\"),\n      prop_format = d3.format (\".2p\"),\n      omega_format = d3.format (\".3r\");\n\n  var format_run_time = function(seconds) {\n\n    var duration_string = \"\";\n    seconds = parseFloat (seconds);\n    var split_array = [Math.floor (seconds/(24*3600)) ,Math.floor (seconds/3600) % 24, Math.floor (seconds/60) % 60,seconds % 60],\n        quals = [\"d.\", \"hrs.\", \"min.\", \"sec.\"];\n        \n    split_array.forEach (function (d,i) {\n        if (d) {\n            duration_string += \" \" + d + \" \" + quals[i];\n        }\n    });\n    \n    return duration_string;\n\n  };\n\n  var branch_p_values = {};\n  \n  var rate_distro_by_branch = {},\n      branch_count = 1,\n      selected_count = 0,\n      tested_count = 0;\n  \n  var for_branch_table = [];\n  \n  //var tree_info = render_bs_rel_tree (json, \"Unconstrained model\");\n  \n  //var branch_lengths   = tree_info[0],\n  //    tested_branches  = {};\n  \n  for (var p in json[\"test results\"]) {\n    branch_p_values[p] = json[\"test results\"][\"p\"];\n    if (branch_p_values[p] <= 0.05) {\n        selected_count++;\n    }\n  }\n  \n  var fitted_distributions = json[\"fits\"][\"Unconstrained model\"][\"rate distributions\"];\n  \n  for (var b in fitted_distributions) {\n     //for_branch_table.push ([b + (tested_branches[b] ? \"\" : \"\"),branch_lengths[b],0,0,0]);\n     try {\n          for_branch_table[branch_count][2] = json[\"test results\"][b][\"LRT\"];\n          for_branch_table[branch_count][3] = json[\"test results\"][b][\"p\"];\n          for_branch_table[branch_count][4] = json[\"test results\"][b][\"uncorrected p\"];\n     } catch (e) {\n     }\n     \n     var rateD = fitted_distributions[b];\n     rate_distro_by_branch[b] = rateD; \n     //for_branch_table[branch_count].push (branch_omegas[b]['distro']);\n     branch_count+=1;\n  }\n  \n  // render summary data\n  var total_tree_length = d3.format(\"g\")(json[\"fits\"][\"Unconstrained model\"][\"tree length\"]); \n  \n  for_branch_table = for_branch_table.sort (function (a,b) {return a[4]-b[4];});\n\n  d3.select ('#summary-test-result').text (json['test results']['p'] <= 0.05 ? \"evidence\" : \"no evidence\");\n  d3.select ('#summary-test-pvalue').text (d3.format(\".3f\")(json['test results']['p']));\n  d3.select ('#summary-pmid').text (\"PubMed ID \" + json['PMID'])\n                             .attr (\"href\", \"http://www.ncbi.nlm.nih.gov/pubmed/\" + json['PMID']);\n  d3.select ('#summary-total-runtime').text (format_run_time(json['timers']['overall']));\n  d3.select ('#summary-total-branches').text (branch_count);\n  d3.select ('#summary-tested-branches').text (tested_count);\n  d3.select ('#summary-selected-branches').text (selected_count);\n  \n  has_background = json['background'];\n      \n  var model_rows = [[],[]];\n  \n  if (has_background) {\n      model_rows.push ([]);\n  }\n  \n  for (k = 0; k < 2 + has_background; k++)  {\n\n      var access_key,\n          secondary_key,\n          only_distro = 0;\n          \n      if (k === 0) {\n\n          access_key = 'Unconstrained model';\n          secondary_key = 'FG';\n          model_rows[k].push ('Unconstrained Model');\n          only_distro = 0;\n\n      } else {\n\n          if (has_background && k == 1) {\n              model_rows[k].push ('(background branches)');\n              secondary_key = 'BG';\n              only_distro = 1;\n          } else {\n              access_key = 'Constrained model';\n              if (! (access_key in json['fits'])) {\n                break;\n              }\n              model_rows[k].push ('Constrained Model');                    \n              secondary_key = 'FG';\n              only_distro = 0;\n          }\n      }\n      \n      try {\n        model_rows[k].push (only_distro ? '' : fit_format(json['fits'][access_key]['log-likelihood']));\n        model_rows[k].push (only_distro ? '' : json['fits'][access_key]['parameters']);\n        model_rows[k].push (only_distro ? '' : fit_format(json['fits'][access_key]['AIC-c']));\n        model_rows[k].push (only_distro ? '' : format_run_time(json['fits'][access_key]['runtime']));\n        model_rows[k].push (only_distro ? '' : fit_format(json['fits'][access_key]['tree length']));\n\n        for (j = 0; j < 3; j++) {\n         model_rows[k].push (   omega_format(json['fits'][access_key]['rate distributions'][secondary_key][j][0]) + \" (\" +\n                                prop_format(json['fits'][access_key]['rate distributions'][secondary_key][j][1]) + \")\");\n        }\n      } catch(e) {\n        datamonkey.errorModal(e);\n      }\n  }\n                             \n  model_rows = d3.select ('#summary-model-table').selectAll (\"tr\").data (model_rows);\n  model_rows.enter().append ('tr');\n  model_rows.exit().remove ();\n  model_rows = model_rows.selectAll (\"td\").data (function (d) {return d;});\n  model_rows.enter().append (\"td\");\n  model_rows.html (function (d) {return d;});\n  \n}\n\nfunction busted_render_histogram(c, json) {\n\n  var self = this;\n\n  // Massage data for use with crossfilter\n  if (d3.keys (json [\"evidence ratios\"]).length === 0) { // no evidence ratios computed\n    d3.selectAll (c).style (\"display\", \"none\");\n    d3.selectAll (\".dc-data-table\").style (\"display\", \"none\");\n    //d3.selectAll ('[id^=\"export\"]').style (\"display\", \"none\");\n    d3.selectAll (\"#er-thresholds\").style (\"display\", \"none\");\n    d3.selectAll (\"#apply-thresholds\").style (\"display\", \"none\");\n    return;\n  } else {\n    d3.selectAll (c).style (\"display\", \"block\");\n    d3.selectAll (\".dc-data-table\").style (\"display\", \"table\");\n    //d3.selectAll ('[id^=\"export\"]').style (\"display\", \"block\");\n    d3.selectAll (\"#er-thresholds\").style (\"display\", \"block\");\n    d3.selectAll (\"#apply-thresholds\").style (\"display\", \"block\");\n  }\n\n  var erc = json[\"evidence ratios\"][\"constrained\"][0];\n  erc = erc.map(function(d) { return Math.log(d)})\n\n  var test_set = json[\"test set\"].split(\",\");\n  var model_results = [];\n\n  erc.forEach(function(elem, i) { \n    model_results.push({\n      \"site_index\"          : i + 1,\n      \"unconstrained\"       : json[\"profiles\"][\"unconstrained\"][0][i],\n      \"constrained\"         : json[\"profiles\"][\"constrained\"][0][i],\n      \"optimized_null\"      : json[\"profiles\"][\"optimized null\"][0][i],\n      \"er_constrained\"      : Math.log(json[\"evidence ratios\"][\"constrained\"][0][i]),\n      \"er_optimized_null\"   : Math.log(json[\"evidence ratios\"][\"optimized null\"][0][i])\n    })\n\n  });\n\n  var data = crossfilter(model_results);\n  var site_index = data.dimension(function(d) { return d[\"site_index\"]; });\n\n  var sitesByConstrained = site_index.group().reduce(\n    function (p, v) {\n      p.constrained_evidence += +v[\"er_constrained\"];\n      p.optimized_null_evidence += +v[\"er_optimized_null\"];\n      return p;\n    },\n    function (p, v) {\n      p.constrained_evidence -= +v[\"er_constrained\"];\n      p.optimized_null_evidence -= +v[\"er_optimized_null\"];\n      return p;\n    },\n    function () {\n      return { constrained_evidence : 0, optimized_null_evidence : 0 };\n    }\n  );\n\n  var sitesByON = site_index.group().reduce(\n    function (p, v) {\n      p.optimized_null_evidence += +v[\"er_optimized_null\"];\n      return p;\n    },\n    function (p, v) {\n      p.optimized_null_evidence -= +v[\"er_optimized_null\"];\n      return p;\n    },\n    function () {\n      return { optimized_null_evidence : 0 };\n    }\n  );\n  \n  // Set up new crossfilter dimensions to slice the table by constrained or ON evidence ratio.\n  var er_constrained = data.dimension(function(d) { return d[\"er_constrained\"]; });\n  var er_optimized_null = data.dimension(function(d) { return d[\"er_optimized_null\"]; });\n  self.er_constrained = er_constrained\n  self.er_optimized_null = er_optimized_null\n\n\n  var composite = dc.compositeChart(c);\n\n  composite\n      .width($(window).width())\n      .height(300)\n      .dimension(site_index)\n      .x(d3.scale.linear().domain([1, erc.length]))\n      .yAxisLabel(\"2 * Ln Evidence Ratio\")\n      .xAxisLabel(\"Site Location\")\n      .legend(dc.legend().x($(window).width() - 150).y(20).itemHeight(13).gap(5))\n      .renderHorizontalGridLines(true)\n      .compose([\n        dc.lineChart(composite)\n          .group(sitesByConstrained, \"Constrained\")\n          .colors(d3.scale.ordinal().range(['green']))\n          .valueAccessor(function(d) {\n              return 2 * d.value.constrained_evidence;\n          })\n          .keyAccessor(function(d) {\n              return d.key;\n          }), \n        dc.lineChart(composite)\n          .group(sitesByON, \"Optimized Null\")\n          .valueAccessor(function(d) {\n              return 2 * d.value.optimized_null_evidence;\n          })\n          .keyAccessor(function(d) {\n              return d.key;\n          })\n          .colors(d3.scale.ordinal().range(['red']))\n      ]);\n\n  composite.xAxis().ticks(50);\n\n  var numberFormat = d3.format(\".4f\");\n\n  // Render the table\n  dc.dataTable(\".dc-data-table\")\n      .dimension(site_index)\n      // data table does not use crossfilter group but rather a closure\n      // as a grouping function\n      .group(function (d) {\n        return site_index.bottom(1)[0].site_index + \" - \" + site_index.top(1)[0].site_index;\n      })\n      .size(site_index.groupAll().reduceCount().value()) // (optional) max number of records to be shown, :default = 25\n      // dynamic columns creation using an array of closures\n      .columns([\n          function (d) {\n              return d.site_index;\n          },\n          function (d) {\n              return numberFormat(d[\"unconstrained\"]);\n          },\n          function (d) {\n              return numberFormat(d[\"constrained\"]);\n          },\n          function (d) {\n              return numberFormat(d[\"optimized_null\"]);\n          },\n          function (d) {\n              return numberFormat(d[\"er_constrained\"]);\n          },\n          function (d) {\n              return numberFormat(d[\"er_optimized_null\"]);\n          },\n\n      ])\n\n      // (optional) sort using the given field, :default = function(d){return d;}\n      .sortBy(function (d) {\n          return d.site_index;\n      })\n\n      // (optional) sort order, :default ascending\n      .order(d3.ascending)\n\n      // (optional) custom renderlet to post-process chart using D3\n      .renderlet(function (table) {\n          table.selectAll(\".dc-table-group\").classed(\"info\", true);\n      });\n\n  $(\"#export-csv\").on('click', function(e) { datamonkey.export_csv_button(site_index.top(Infinity)); } );\n\n  $(\"#export-chart-svg\").on('click', function(e) { \n    // class manipulation for the image to display correctly\n    $(\"#chart-id\").find(\"svg\")[0].setAttribute(\"class\", \"dc-chart\");\n    datamonkey.save_image(\"svg\", \"#chart-id\"); \n    $(\"#chart-id\").find(\"svg\")[0].setAttribute(\"class\", \"\");\n  });\n\n  $(\"#export-chart-png\").on('click', function(e) { \n    // class manipulation for the image to display correctly\n    $(\"#chart-id\").find(\"svg\")[0].setAttribute(\"class\", \"dc-chart\");\n    datamonkey.save_image(\"png\", \"#chart-id\"); \n    $(\"#chart-id\").find(\"svg\")[0].setAttribute(\"class\", \"\");\n  });\n  $(\"#apply-thresholds\").on('click', function(e) { \n    var erConstrainedThreshold = document.getElementById(\"er-constrained-threshold\").value;\n    var erOptimizedNullThreshold = document.getElementById(\"er-optimized-null-threshold\").value;\n    self.er_constrained.filter(function(d) { return d >= erConstrainedThreshold; });\n    self.er_optimized_null.filter(function(d) { return d >= erOptimizedNullThreshold; });\n    dc.renderAll();\n  });\n\n\n  dc.renderAll();\n\n}\n\nmodule.exports.render_summary = busted_render_summary;\nmodule.exports.render_histogram = busted_render_histogram;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/busted/busted.js","require(\"phylotree\");\nrequire(\"phylotree.css\");\n\nvar React = require('react'),\n\t\tReactDOM = require('react-dom');\n\nimport {Tree} from \"./components/tree.jsx\";\nimport {ModelFits} from \"./components/model_fits.jsx\";\nimport {TreeSummary} from \"./components/tree_summary.jsx\";\nimport {PropChart} from './components/prop_chart.jsx';\n\nvar datamonkey = require('../datamonkey/datamonkey.js'),\n\t\tbusted = require('../busted/busted.js');\n\nvar BUSTED = React.createClass({\n\n  float_format : d3.format(\".2f\"),\n  p_value_format : d3.format(\".4f\"),\n  fit_format : d3.format(\".2f\"),\n\n  loadFromServer : function() {\n\n    var self = this;\n\n    d3.json(this.props.url, function(data) {\n\n      data[\"fits\"][\"Unconstrained model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Unconstrained model\");\n      data[\"fits\"][\"Constrained model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Constrained model\");\n\n      // rename rate distributions\n      data[\"fits\"][\"Unconstrained model\"][\"rate-distributions\"] = data[\"fits\"][\"Unconstrained model\"][\"rate distributions\"];\n      data[\"fits\"][\"Constrained model\"][\"rate-distributions\"] = data[\"fits\"][\"Constrained model\"][\"rate distributions\"];\n\n      // set display order\n      data[\"fits\"][\"Unconstrained model\"][\"display-order\"] = 0;\n      data[\"fits\"][\"Constrained model\"][\"display-order\"] = 1;\n\n      var json = data,\n          pmid = \"25701167\",\n          pmid_text = \"PubMed ID \" + pmid,\n          pmid_href = \"http://www.ncbi.nlm.nih.gov/pubmed/\" + pmid,\n          p = json[\"test results\"][\"p\"],\n          test_result = p <= 0.05 ? \"evidence\" : \"no evidence\";\n\n      var fg_rate = json[\"fits\"][\"Unconstrained model\"][\"rate distributions\"][\"FG\"];\n      var mapped_omegas = {\"omegas\" : _.map(fg_rate, function(d) { return _.object([\"omega\",\"prop\"], d)})};\n\n      self.setState({\n                      p : p,\n                      test_result : test_result,\n                      json : json,\n                      omegas : mapped_omegas[\"omegas\"],\n                      pmid_text : pmid_text,\n                      pmid_href : pmid_href\n                    });\n\n    });\n\n  },\n\n  getDefaultProps: function() {\n\n    var edgeColorizer = function(element, data) {\n\n      var is_foreground = data.target.annotations.is_foreground,\n          color_fill = this.options()[\"color-fill\"] ? \"black\" : \"red\";\n\n      element.style ('stroke', is_foreground ? color_fill : 'gray')\n             .style ('stroke-linejoin', 'round')\n             .style ('stroke-linejoin', 'round')\n             .style ('stroke-linecap', 'round');\n      \n    }\n\n\n    var tree_settings = {\n        'omegaPlot': {},\n        'tree-options': {\n            /* value arrays have the following meaning\n                [0] - the value of the attribute\n                [1] - does the change in attribute value trigger tree re-layout?\n            */\n            'hyphy-tree-model': [\"Unconstrained model\", true],\n            'hyphy-tree-highlight': [\"RELAX.test\", false],\n            'hyphy-tree-branch-lengths': [true, true],\n            'hyphy-tree-hide-legend': [true, false],\n            'hyphy-tree-fill-color': [true, false]\n        },\n        'hyphy-tree-legend-type': 'discrete',\n        'suppress-tree-render': false,\n        'chart-append-html' : true,\n        'edgeColorizer' : edgeColorizer\n    };\n\n\n    var distro_settings = {\n      dimensions : { width : 600, height : 400 },\n      margins : { 'left': 50, 'right': 15, 'bottom': 35, 'top': 35 },\n      legend: false,\n      domain : [0.00001, 100],\n      do_log_plot : true,\n      k_p : null,\n      plot : null,\n      svg_id : \"prop-chart\"\n    };\n\n    return {\n      distro_settings : distro_settings,\n      tree_settings : tree_settings,\n      constrained_threshold : \"Infinity\",\n      null_threshold : \"-Infinity\",\n      model_name : \"FG\"\n    }\n\n  },\n\n  getInitialState: function() {\n    return {\n      p : null,\n      test_result : null,\n      json : null,\n      omegas : null,\n      pmid_text : null,\n      pmid_href : null\n    }\n  },\n\n  setEvents : function() {\n\n    var self = this;\n\n    $(\"#json_file\").on(\"change\", function(e) {\n        var files = e.target.files; // FileList object\n        if (files.length == 1) {\n            var f = files[0];\n            var reader = new FileReader();\n            reader.onload = (function(theFile) {\n              return function(e) {\n\n                var data = JSON.parse(this.result);\n                data[\"fits\"][\"Unconstrained model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Unconstrained model\");\n                data[\"fits\"][\"Constrained model\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Constrained model\");\n\n                // rename rate distributions\n                data[\"fits\"][\"Unconstrained model\"][\"rate-distributions\"] = data[\"fits\"][\"Unconstrained model\"][\"rate distributions\"]\n                data[\"fits\"][\"Constrained model\"][\"rate-distributions\"] = data[\"fits\"][\"Constrained model\"][\"rate distributions\"]\n\n                var json = data,\n                    pmid = \"25701167\",\n                    pmid_text = \"PubMed ID \" + pmid,\n                    pmid_href = \"http://www.ncbi.nlm.nih.gov/pubmed/\" + pmid,\n                    p = json[\"test results\"][\"p\"],\n                    test_result = p <= 0.05 ? \"evidence\" : \"no evidence\";\n\n                var fg_rate = json[\"fits\"][\"Unconstrained model\"][\"rate distributions\"][\"FG\"];\n                var mapped_omegas = {\"omegas\" : _.map(fg_rate, function(d) { return _.object([\"omega\",\"prop\"], d)})};\n\n                self.setState({\n                                p : p,\n                                test_result : test_result,\n                                json : json,\n                                omegas : mapped_omegas[\"omegas\"],\n                                pmid_text : pmid_text,\n                                pmid_href : pmid_href\n                              });\n\n              }\n            })(f);\n            reader.readAsText(f);\n        }\n        $(\"#datamonkey-absrel-toggle-here\").dropdown(\"toggle\");\n        e.preventDefault();\n    });\n\n\n  },\n\n  formatBranchAnnotations : function(json, key) {\n\n    // attach is_foreground to branch annotations\n    var foreground = json[\"test set\"].split(\",\");\n\n    var tree = d3.layout.phylotree(),\n        nodes = tree(json[\"fits\"][key][\"tree string\"]).get_nodes(),\n        node_names = _.map(nodes, function(d) { return d.name});\n    \n    // Iterate over objects\n    var branch_annotations = _.object(node_names, \n                             _.map(node_names, function(d) {\n                               return { is_foreground : _.indexOf(foreground, d) > -1 }\n                               })\n                            );\n\n    return branch_annotations;\n\n  },\n\n  initialize : function() {\n\n    var json = this.state.json;\n\n    if(!json) {\n      return;\n    }\n\n    busted.render_histogram(\"#chart-id\", json);\n\n    // delete existing tree\n    d3.select('#tree_container').select(\"svg\").remove();\n\n    var fg_rate = json[\"fits\"][\"Unconstrained model\"][\"rate distributions\"][\"FG\"],\n        omegas  = fg_rate.map(function (r) {return r[0];}),\n        weights = fg_rate.map(function (r) {return r[1];});\n\n    var dsettings = { \n      'log'       : true,\n      'legend'    : false,\n      'domain'    : [0.00001, 20],\n      'dimensions': {'width' : 325, 'height' : 300}\n    }\n\n    $(\"#export-dist-svg\").on('click', function(e) { \n      datamonkey.save_image(\"svg\", \"#primary-omega-dist\"); \n    }); \n\n    $(\"#export-dist-png\").on('click', function(e) { \n      datamonkey.save_image(\"png\", \"#primary-omega-dist\"); \n    }); \n\n\n  },\n\n  componentWillMount: function() {\n    this.loadFromServer();\n    this.setEvents();\n  },\n\n  render: function() {\n\n    var self = this;\n    self.initialize();\n\n    return (\n\n      <div className=\"tab-content\">\n        <div className=\"tab-pane active\" id=\"summary_tab\">\n          <div className=\"row\" styleName=\"margin-top: 5px\">\n            <div className=\"col-md-12\">\n              <ul className=\"list-group\">\n              <li className=\"list-group-item list-group-item-info\">\n                <h3 className=\"list-group-item-heading\">\n                  <i className=\"fa fa-list\" styleName='margin-right: 10px'></i>\n                  <span id=\"summary-method-name\">BUSTED</span> summary</h3>\n                  There is <strong>{this.state.test_result}</strong> of episodic diversifying selection, with LRT p-value of {this.state.p}.\n                  <p>\n                    <small>Please cite <a href={this.state.pmid_href} id='summary-pmid'>{this.state.pmid_text}</a> if you use this result in a publication, presentation, or other scientific work.</small>\n                  </p>\n               </li>\n              </ul>\n            </div>\n          </div>\n\n           <div className=\"row\">\n              <div id=\"hyphy-model-fits\" className=\"col-lg-12\">\n                <ModelFits json={self.state.json} />\n              </div>\n          </div>\n\n          <button id=\"export-chart-svg\" type=\"button\" className=\"btn btn-default btn-sm pull-right btn-export\">\n            <span className=\"glyphicon glyphicon-floppy-save\"></span> Export Chart to SVG\n          </button>\n\n          <button id=\"export-chart-png\" type=\"button\" className=\"btn btn-default btn-sm pull-right btn-export\">\n            <span className=\"glyphicon glyphicon-floppy-save\"></span> Export Chart to PNG\n          </button>\n\n          <div className='row hyphy-busted-site-table'>\n            <div id=\"chart-id\" className=\"col-lg-8\">\n              <strong>Model Evidence Ratios Per Site</strong>\n              <div className=\"clearfix\"></div>\n            </div>\n          </div>\n\n\n          <div className='row site-table'>\n\n            <div className=\"col-lg-12\">\n\n              <form id=\"er-thresholds\">\n                <div className=\"form-group\">\n                  <label for=\"er-constrained-threshold\">Constrained Evidence Ratio Threshold:</label>\n                  <input type=\"text\" className=\"form-control\" id=\"er-constrained-threshold\" defaultValue={this.props.constrained_threshold}>\n                  </input>\n                </div>\n                <div className=\"form-group\">\n                  <label for=\"er-optimized-null-threshold\">Optimized Null Evidence Ratio Threshold:</label>\n                  <input type=\"text\" className=\"form-control\" id=\"er-optimized-null-threshold\" defaultValue={this.props.null_threshold}>\n                  </input>\n                </div>\n              </form>\n\n              <button id=\"export-csv\" type=\"button\" className=\"btn btn-default btn-sm pull-right hyphy-busted-btn-export\">\n                <span className=\"glyphicon glyphicon-floppy-save\"></span> Export Table to CSV\n              </button>\n\n              <button id=\"apply-thresholds\" type=\"button\" className=\"btn btn-default btn-sm pull-right hyphy-busted-btn-export\">\n                Apply Thresholds\n              </button>\n\n\n              <table id=\"sites\" className=\"table sites dc-data-table\">\n                <thead>\n                  <tr className=\"header\">\n                    <th>Site Index</th>\n                    <th>Unconstrained Likelihood</th>\n                    <th>Constrained Likelihood</th>\n                    <th>Optimized Null Likelihood</th>\n                    <th>Constrained Evidence Ratio</th>\n                    <th>Optimized Null Evidence Ratio</th>\n                  </tr>\n                </thead>\n              </table>\n            </div>\n          </div>\n\n        </div>\n\n        <div className=\"tab-pane\" id=\"tree_tab\">\n\n          <div className=\"col-md-12\">\n            <Tree json={self.state.json} \n                 settings={self.props.tree_settings} />\n          </div>\n\n          <div className=\"col-md-12\">\n            <div id=\"primary-omega-dist\" className=\"panel-body\">\n              <PropChart name={self.props.model_name} omegas={self.state.omegas} \n               settings={self.props.distro_settings} />\n            </div>\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n});\n\n\n\n// Will need to make a call to this\n// omega distributions\nvar render_busted = function(url, element) {\n  ReactDOM.render(\n    <BUSTED url={url} />,\n    document.getElementById(element)\n  );\n}\n\nmodule.exports = render_busted;\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/busted.jsx","var datamonkey_fade = function(json) { \r\n  \r\n  var _colorizerB = d3.interpolateRgb  (d3.rgb(0,0,255),d3.rgb(255,255,255));\r\n  var _colorizerR = d3.interpolateRgb  (d3.rgb(255,255,255),d3.rgb(255,0,0));\r\n  var _use_BF = false;\r\n\r\n  var fade_headers = [\r\n    ['Site','A','C','D','E','F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','Y'],\r\n    ['Site','Alanine','Cysteine','Aspartic acid','Glutamic acid','Phenylalanine','Glycine','Histidine','Isoleucine','Lysine','Leucine','Methionine', 'Asparagine','Proline','Glutamine','Arginine','Serine','Threonine','Valine', 'Tryptophan','Tyrosin']\r\n  ];\r\n\r\n  var fade_results = json['results'][\"FADE\"];\r\n\r\n  var dict_to_array = function(dict) {\r\n          ar = [];\r\n          for (var k in dict) {\r\n              ar.push (dict[k]);\r\n          }\r\n          return ar;\r\n      };\r\n      \r\n   var keys_in_dict = function(dict) {\r\n          ar = [];\r\n          for (var k in dict) {\r\n              ar.push (k);\r\n          }\r\n          return ar;\r\n      };\r\n      \r\n  //For displaying table with Posteriors\r\n  var display_column_map = function(row) { \r\n      var result = [parseInt(row[0])];\r\n    \r\n    for (var k = 4; k < row.length; k+=5) {\r\n          result.push((row[k]));\r\n      }\r\n      return result;\r\n  };\r\n\r\n  //For displaying table with BFs\r\n  var display_column_map_bf = function(row) { \r\n       //result = [parseInt(row[0]),row[3]];\r\n      var result = [parseInt(row[0])];\r\n    \r\n    for (var k = 5; k < row.length; k+=5) {\r\n          result.push((row[k]));\r\n      }\r\n      return result;\r\n  };\r\n\r\n\r\n  var row_display_filter = function(d) {\r\n\r\n  //Any row, with at least one val > thres must get displayed. Any elements greater must be in red. \r\n     // if (d.slice(2).reduce (function (a,b) {return a+b;}) == 0.0) {return false;} \r\n      //console.log (d, this);\r\n      for (var k=1;k<21;k++) {\r\n          if (d[k] > this) return true;\r\n      } \r\n      return false;\r\n  };\r\n\r\n\r\n\r\n  var initial_display = function() {\r\n      //load_data_summary (\"summary_div\", data_summary);\r\n      $('#filter_on_pvalue').trigger ('submit');\r\n      plot_property_graphs(\"property_plot_svg\",fade_results); //Using a matrix from html\r\n  };\r\n\r\n  var set_handlers = function (file_id) {\r\n\r\n      var fade_headers = [\r\n        ['Site','A','C','D','E','F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','Y'],\r\n        ['Site','Alanine','Cysteine','Aspartic acid','Glutamic acid','Phenylalanine','Glycine','Histidine','Isoleucine','Lysine','Leucine','Methionine', 'Asparagine','Proline','Glutamine','Arginine','Serine','Threonine','Valine', 'Tryptophan','Tyrosin']\r\n      ];\r\n\r\n      var found = '';\r\n\r\n      $('body').attr ('data-job-id', file_id);\r\n      $('#filter_on_pvalue').submit(function (e) {\r\n              cutoff = parseFloat($('#pvalue')[0].value);\r\n              if (_use_BF) {\r\n                  found = load_analysis_results('prime_table',fade_headers, fade_results,display_column_map_bf,row_display_filter);            \r\n              } else {\r\n                  found = load_analysis_results('prime_table',fade_headers, fade_results,display_column_map,row_display_filter);\r\n              }\r\n              d3.select (\"#total_sites_found\").selectAll(\"span\").data (found).html (function (d) {return d;});\r\n              return false;\r\n          });\r\n\r\n      $('#site_rate_display').on ('show', (function (e) {\r\n              //alert (\"Show\");\r\n              //console.log (this);\r\n              return true;\r\n          }));\r\n\r\n      \r\n        $( 'body' ).on( 'click', '[data-toggle=\"modal\"]', function(event) {\r\n              display_site_properties ($(this).attr (\"data-codon-id\"));\r\n      });\r\n   \r\n\r\n     $( '#set-p-value' ).click(function(event) {\r\n           d3.select (\"#pq_selector\").html (\"Posterior <span class='caret'></span>\");\r\n           _use_BF = false;\r\n           event.preventDefault(); \r\n     } );    \r\n\r\n     $( '#set-q-value' ).click(function(event) {\r\n           d3.select (\"#pq_selector\").html (\"BF <span class='caret'></span>\");\r\n           _use_BF = true;\r\n           event.preventDefault(); \r\n     } );    \r\n           \r\n     $( 'body' ).on( 'click', '#property_selector .btn', function(event) {\r\n          event.stopPropagation(); // prevent default bootstrap behavior\r\n          if( $(this).attr('data-toggle') != 'button' ) { // don't toggle if data-toggle=\"button\"\r\n              $(this).toggleClass('active');\r\n          }\r\n           toggle_view(\"property_plot_svg\", parseInt($(this).attr( 'data-property-id' )), $(this).hasClass( 'active' ) ); // button state AFTER the click\r\n      });\r\n  };\r\n\r\n  var property_plot_done = false;\r\n\r\n\r\n  var display_site_properties = function(site_id) {\r\n      job_id = $('body').attr ('data-job-id');\r\n      url = \"/cgi-bin/datamonkey/wrapHyPhyBF.pl?file=fade_site&mode=1&arguments=\" + job_id + \"-\" + site_id;\r\n      d3.json (url, function (json) { site_info (json, site_id);});\r\n  };\r\n\r\n  var toggle_view = function(property_plot, group, show_hide) {\r\n      if (show_hide) {\r\n          prop = 'visible';\r\n      } else {\r\n          prop = 'hidden';\r\n      }\r\n      d3.select(\"#\"+property_plot).selectAll(\".dot\"+group)\r\n                    .style(\"visibility\", prop);\r\n  };\r\n\r\n  var site_info = function(values, site_id) {    \r\n      d3.select (\"#site_rate_display_header\").html (\"Detailed information about site \" + site_id);\r\n      elements = dict_to_array(values);\r\n      headers = keys_in_dict (elements[0]).sort();\r\n      var header_element = d3.select ('#site_info_table').select(\"thead\");\r\n      header_element.selectAll(\"th\").remove();\r\n      header_element.selectAll(\"th\").data (headers).enter().append(\"th\").html (function (d,i) //Get header of table\r\n          {return d;}\r\n      );\r\n\r\n  };\r\n\r\n\r\n  var plot_property_graphs = function(property_plot, property_info) {\r\n      if (!property_plot_done) {\r\n          property_info = property_info.map (display_column_map);\r\n          property_plot_done = true;\r\n          var site_count = property_info.length;\r\n                 \r\n          //console.log (d3.extent (property_info.map(function (d){return d[0];})));\r\n                  \r\n          var margin = {top: 20, right: 40, bottom: 30, left: 40},\r\n              width  = 800 - margin.left - margin.right,\r\n              height = 500 - margin.top - margin.bottom;\r\n\r\n          var x = d3.scale.linear()\r\n              .range([0, width]);\r\n\r\n          var y = d3.scale.linear()\r\n              .range([height, 0]);\r\n\r\n          var color = d3.scale.category10();\r\n\r\n          var xAxis = d3.svg.axis()\r\n              .scale(x)\r\n              .orient(\"bottom\");\r\n\r\n          var yAxis = d3.svg.axis()\r\n              .scale(y)\r\n              .orient(\"left\");\r\n   \r\n           var yAxis2 = d3.svg.axis()\r\n              .scale(y)\r\n              .orient(\"right\");\r\n             \r\n          var make_x_axis = function() {        \r\n              return d3.svg.axis()\r\n                  .scale(x)\r\n                   .orient(\"bottom\")\r\n                   .ticks(20);\r\n          }\r\n\r\n          var make_y_axis = function() {        \r\n              return d3.svg.axis()\r\n                  .scale(y)\r\n                  .orient(\"left\")\r\n                  .ticks(20);\r\n          }\r\n\r\n          var svg = d3.select(\"#\"+property_plot)\r\n              .attr(\"width\", width + margin.left + margin.right)\r\n              .attr(\"height\", height + margin.top + margin.bottom)\r\n               .append(\"g\")\r\n              .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n                  \r\n          x.domain ([1,site_count]);\r\n          y.domain ([0,1]);\r\n\r\n          svg.append(\"g\")\r\n                .attr(\"class\", \"x hyphy-axis\")\r\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                .call(xAxis)\r\n              .append(\"text\")\r\n                //.attr(\"class\", \"label\")\r\n                .attr(\"x\", width)\r\n                .attr(\"y\", 30)\r\n                .style(\"text-anchor\", \"end\")\r\n                .text(\"Site index\");\r\n\r\n          svg.append(\"g\")         \r\n                  .attr(\"class\", \"grid\")\r\n                  .call(make_y_axis()\r\n                      .tickSize(-width, 0, 0)\r\n                      .tickFormat(\"\")\r\n                  );\r\n          \r\n          svg.append(\"g\")         \r\n                  .attr(\"class\", \"grid\")\r\n                  .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                  .call(make_x_axis()\r\n                      .tickSize(-height, 0, 0)\r\n                      .tickFormat(\"\")\r\n                  );\r\n          \r\n          svg.append(\"g\")\r\n                .attr(\"class\", \"y hyphy-axis\")\r\n                .call(yAxis)\r\n              .append(\"text\")\r\n                //.attr(\"class\", \"label\")\r\n                .attr(\"transform\", \"rotate(-90)\")\r\n                .attr(\"y\", -37)\r\n                .attr(\"dy\", \".71em\")\r\n                .style(\"text-anchor\", \"end\")\r\n                .text(\"P(Bias>1)\");  \r\n\r\n          var y2= svg.append(\"g\")\r\n                .attr(\"class\", \"y hyphy-axis\")\r\n                .attr(\"transform\", \"translate(\"+width+\",0)\")\r\n                .call(yAxis2.tickFormat (\"\"));\r\n                \r\n          y2.append(\"text\")\r\n                //.attr(\"class\", \"label\")\r\n                .attr(\"transform\", \"rotate(-90)\")\r\n                .attr(\"y\", 10)\r\n                .attr(\"dy\", \".71em\")\r\n                .style(\"text-anchor\", \"end\")\r\n                .text(\"High Posteriors\");  \r\n\r\n          y2.append(\"text\")\r\n                //.attr(\"class\", \"label\")\r\n                .attr(\"transform\", \"rotate(-90)\")\r\n                .attr(\"y\", 10)\r\n                .attr(\"x\", -height)\r\n                .attr(\"dy\", \".71em\")\r\n                .style(\"text-anchor\", \"start\")\r\n                .text(\"Low Posteriors\");  \r\n\r\n          var legend = svg.selectAll(\".legend\")\r\n                .data(color.domain())\r\n              .enter().append(\"g\")\r\n                .attr(\"class\", \"legend\")\r\n                .attr(\"transform\", function(d, i) { return \"translate(0,\" + i * 20 + \")\"; });\r\n      \r\n      \r\n      var h = {}; //Hash of numbers -> AA names for labels\r\n      h[1] = \"Alanine\";\r\n      h[2] = \"Cysteine\";\r\n      h[3] = \"Aspartic acid\";\r\n      h[4] = \"Glutamic acid\";\r\n      h[5] = \"Phenylalanine\";\r\n      h[6] = \"Glycine\";\r\n      h[7] = \"Histidine\";\r\n      h[8] = \"Isoleucine\";\r\n      h[9] = \"Lysine\";\r\n      h[10] = \"Leucine\";\r\n      h[11] = \"Methionine\";\r\n      h[12] = \"Asparagine\";\r\n      h[13] = \"Proline\";\r\n      h[14] = \"Glutamine\";\r\n      h[15] = \"Arginine\";\r\n      h[16] = \"Serine\";\r\n      h[17] = \"Threonine\";\r\n      h[18] = \"Valine\";\r\n      h[19] = \"Tryptophan\";\r\n      h[20] = \"Tyrosine\";\r\n      \r\n      \r\n\r\n          var vis = 'visible';\r\n          for (var series = 1; series <= 20; series++) {\r\n              if (series > 1) {\r\n                  vis = 'hidden';\r\n              }\r\n              svg.selectAll(\".dot\"+series)\r\n                    .data(property_info)\r\n                  .enter().append(\"circle\")\r\n                    .attr(\"class\", \"dot\"+series)\r\n                    .attr(\"r\", function (d) {if (d[series] == 0) return 1; return 3.5;})\r\n                    .attr(\"cx\", function(d) { return x(d[0]); })\r\n                    .attr(\"cy\", function(d) { return y(d[series]); })\r\n                    .style(\"fill\", function(d) { return color(series); })\r\n            .style(\"opacity\", 0.5)\r\n            .style ('visibility', vis)\r\n                    .append (\"title\").text (function (d) { return \"Site \" + d[0] + \", \" + h[series] + \" P(Beta>1) =\" + d[series];});\r\n              d3.select (\"#show_property\" + series).style (\"color\", function(d) { return color(series); }); //Colour buttons on HTML\r\n          }\r\n        \r\n       } \r\n          \r\n  };\r\n\r\n  var load_data_summary = function(id, json_object) {\r\n      //if (error) return console.warn(error);\r\n      reportable_entries = [];\r\n      warnings = [];\r\n      for (var k in json_object) {\r\n          if (k == 'Warnings') {\r\n              warnings = json_object[k];\r\n          } else {\r\n              reportable_entries.push ({\"Phase\": k, \"Information\": json_object[k]});\r\n          }\r\n      }\r\n      info_container = d3.select (\"#\" + id);\r\n      items = info_container.selectAll(\"dt\").data(reportable_entries);\r\n      items.enter().append(\"dt\").text (function (d) {return d[\"Phase\"]});\r\n      item_count = items[0].length;\r\n      current_child = 2;\r\n      for (z = 1; z <= item_count; z++) { \r\n          info = dict_to_array(reportable_entries[z-1][\"Information\"]);\r\n          for (y = 0; y < info.length; y++) {\r\n              info_container.insert (\"dd\",\":nth-child(\"+current_child+\")\").data([info[y]]).text (function (d) {return d;});\r\n          }\r\n          key = reportable_entries[z-1][\"Phase\"];\r\n          if (key in warnings) {\r\n              current_child++;\r\n              info_container.insert (\"dd\",\":nth-child(\"+current_child+\")\").selectAll(\"div\").data([warnings[key]]).enter().append(\"div\").classed(\"alert\",true).html (function (d) {return d;})\r\n          }\r\n          current_child += info.length+1;\r\n      }\r\n      return 0;\r\n  };\r\n      \r\n  var load_analysis_results = function (id, headers, matrix, column_selector, condition) {    \r\n      var header_element = d3.select ('#' + id).select(\"thead\");\r\n      header_element.selectAll(\"th\").remove();\r\n      header_element.selectAll(\"th\").data (headers[0]).enter().append(\"th\").html (function (d,i) //Get header of table\r\n          {return \"<a href='#' data-toggle='tooltip' data-placement = 'right' data-html = true title data-original-title='\" + headers[1][i] + \"'>\" + d + \"</a>\";}\r\n      );\r\n          \r\n      var parent_element = d3.select ('#' + id).select(\"tbody\");\r\n      parent_element.selectAll(\"tr\").remove();\r\n      var filtered_matrix = matrix.map (column_selector).filter(condition,cutoff); //Get the columns to display in table\r\n      var rows = parent_element.selectAll(\"tr\").data(function (d) {return filtered_matrix;});\r\n      var conserved = 0;\r\n      rows.enter().append (\"tr\").selectAll(\"td\").data (function (d) {return d;}).enter().append(\"td\").\r\n          html (function (d,i) {\r\n              d = parseFloat (d);\r\n              if (i) {\r\n                  if (_use_BF == false)  {\r\n                      if (d > 0.99)  return \"1.00\";\r\n                      return d.toFixed (2);\r\n                  } else {\r\n                      if (d > 100) return \"100+\";\r\n                      return d.toFixed (1);\r\n                  }\r\n              }\r\n              return \"<b>\" + d + \"</b> <a href='#site_rate_display' data-toggle='modal' data-codon-id = '\" + d + \"' data-placement = 'bottom'><i class='icon-list'></i></a>\";}\r\n              ).\r\n              classed (\"btn-danger\", function (d,i,j)  {if (d >= cutoff &&  i>=1 ) {conserved++; return true;} return false;});\r\n              \r\n      d3.select ('#' + id).classed (\"table-striped table-hover\", true);\r\n      $('a').tooltip(); \r\n      return [filtered_matrix.length, conserved];\r\n  };\r\n\r\n\r\n  var numberToColor = function(value) {\r\n      if (typeof (value) == \"string\") {\r\n          return \"rgba (1,0,0,1)\";\r\n      }\r\n      rate_value = Math.min(20,Math.max(-20,Math.log (value)/Math.LN20));\r\n      if (rate_value < 0) {\r\n          return _colorizerB ((20+rate_value)/20.0);\r\n      }\r\n      return _colorizerR ((rate_value)/20.0);\r\n  };\r\n\r\n  var fgColor = function(value, normalizer) {\r\n      if (typeof (value) == \"string\") {\r\n          return \"rgba (1,1,1,1)\";\r\n      }\r\n      \r\n      var score = 1-Math.exp(-20*value/normalizer);\r\n      \r\n      if (score > 0.45) {\r\n          return \"white\";\r\n      }\r\n      return \"black\";\r\n  };\r\n\r\n  set_handlers('test');\r\n  initial_display();\r\n\r\n};\r\n\r\nmodule.exports = datamonkey_fade;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/fade/FADE.js","var React = require('react');\n\nvar FadeSummary = React.createClass({\n\n  float_format : d3.format(\".2f\"),\n\n  countBranchesTested: function(branches_tested) {\n    if(branches_tested) {\n      return branches_tested.split(';').length;\n    } else {\n      return 0;\n    }\n  },\n\n  getDefaultProps : function() {\n    return {\n     subs : []\n    };\n\n  },\n\n  componentDidMount: function() {\n\n    this.setProps({\n       alpha_level : 0.05,\n       sequences : this.props.msa.sequences,\n       subs : this.props.fade_results[\"TREE_LENGTHS\"][0],\n       sites : this.props.msa.sites,\n       model : this.props.fade_results[\"MODEL_INFO\"],\n       grid_desc : this.props.fade_results[\"GRID_DESCRIPTION\"],\n       branches_tested : this.props.fade_results[\"BRANCHES_TESTED\"]\n    });\n\n  },\n\n  render: function() {\n\n    var self = this;\n\n    return (\n          <dl className=\"dl-horizontal\">\n            <dt>Data summary</dt>\n            <dd>{this.props.sequences} sequences with {this.props.partitions} partitions.</dd><dd>\n            <div className=\"alert\">These sequences have not been screened for recombination. Selection analyses of alignments with recombinants in them using a single tree may generate <u>misleading</u> results.</div></dd>\n            {this.props.msa.partition_info.map(function(partition, index) {\n              return (<div><dt>Partition {partition[\"partition\"]}</dt><dd> {self.float_format(self.props.subs[index])} subs/ aminoacid  site</dd><dd>{partition[\"endcodon\"] - partition[\"startcodon\"]} aminoacids</dd></div>)\n            })}\n            <dt>Settings</dt><dd>{this.props.model}</dd><dd>{this.props.grid_desc}</dd>\n            <dd>Directional model applied to {self.countBranchesTested(this.props.branches_tested)} branches</dd>\n          </dl>\n        )\n  }\n\n});\n\n// Will need to make a call to this\n// omega distributions\nfunction render_fade_summary(json, msa) {\n  React.render(\n    <FadeSummary fade_results={json} msa={msa} />,\n    document.getElementById(\"summary-div\")\n  );\n}\n\nmodule.exports = render_fade_summary;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/fade_summary.jsx","import {ModelFits} from \"./components/model_fits.jsx\";\nimport {TreeSummary} from \"./components/tree_summary.jsx\";\nimport {Tree} from \"./components/tree.jsx\";\nimport {OmegaPlotGrid} from \"./components/omega_plots.jsx\";\n\nvar React = require('react'),\n\t\tReactDOM = require('react-dom'),\n\t\t_ = require('underscore');\n\nvar RELAX = React.createClass({\n\n  float_format : d3.format(\".2f\"),\n  p_value_format : d3.format(\".4f\"),\n  fit_format : d3.format(\".2f\"),\n\n  loadFromServer : function() {\n\n    var self = this;\n\n    d3.json(this.props.url, function(data) {\n\n      data[\"fits\"][\"Partitioned MG94xREV\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Partitioned MG94xREV\");\n      data[\"fits\"][\"General Descriptive\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"General Descriptive\");\n      data[\"fits\"][\"Null\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Null\");\n      data[\"fits\"][\"Alternative\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Alternative\");\n      data[\"fits\"][\"Partitioned Exploratory\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Partitioned Exploratory\");\n\n      var annotations = data[\"fits\"][\"Partitioned MG94xREV\"][\"branch-annotations\"],\n          json = data,\n          pmid = data[\"PMID\"],\n          test_results = data[\"relaxation_test\"];\n\n      var p = data[\"relaxation-test\"][\"p\"],\n          direction = data[\"fits\"][\"Alternative\"][\"K\"] > 1 ? 'intensification' : 'relaxation',\n          evidence = p <= self.props.alpha_level ? 'significant' : 'not significant',\n          pvalue = self.p_value_format(p),\n          lrt = self.fit_format(data[\"relaxation-test\"][\"LR\"]),\n          summary_k = self.fit_format(data[\"fits\"][\"Alternative\"][\"K\"]),\n          pmid_text = \"PubMed ID \" + pmid,\n          pmid_href = \"http://www.ncbi.nlm.nih.gov/pubmed/\" + pmid;\n\n      self.setState({\n                      annotations : annotations,\n                      json : json,\n                      pmid : pmid,\n                      test_results : test_results,\n                      p : p,\n                      direction : direction,\n                      evidence : evidence,\n                      pvalue : pvalue,\n                      lrt : lrt,\n                      summary_k : summary_k,\n                      pmid_text : pmid_text,\n                      pmid_href : pmid_href\n                    });\n\n    });\n\n  },\n\n  getDefaultProps: function() {\n\n    var edgeColorizer = function(element, data) {\n\n      var self = this,\n          scaling_exponent = 0.33,\n          omega_format = d3.format(\".3r\");\n\n      var omega_color = d3.scale.pow().exponent(scaling_exponent)\n          .domain([0, 0.25, 1, 5, 10])\n          .range(\n            self.options()[\"color-fill\"]\n              ? [\"#DDDDDD\", \"#AAAAAA\", \"#888888\", \"#444444\", \"#000000\"]\n              : [\"#6e4fa2\", \"#3288bd\", \"#e6f598\", \"#f46d43\", \"#9e0142\"])\n          .clamp(true);\n\n\n      if (data.target.annotations) {\n          element.style('stroke', omega_color(data.target.annotations.length) || null);\n          $(element[0][0]).tooltip('destroy');\n          $(element[0][0]).tooltip({\n              'title': omega_format(data.target.annotations.length),\n              'html': true,\n              'trigger': 'hover',\n              'container': 'body',\n              'placement': 'auto'\n          })\n      } else {\n          element.style('stroke', null);\n          $(element[0][0]).tooltip('destroy');\n      }\n\n      var selected_partition = $(\"#hyphy-tree-highlight\").attr(\"value\");\n      \n      if(selected_partition && this.get_partitions()) {\n        var partitions = this.get_partitions()[selected_partition];\n\n        element.style('stroke-width', (partitions && partitions[data.target.name]) ? '8' : '4')\n            .style('stroke-linejoin', 'round')\n            .style('stroke-linecap', 'round');\n      }\n\n    }\n\n    return {\n      edgeColorizer : edgeColorizer,\n      alpha_level : 0.05\n    };\n\n\n  },\n\n  getInitialState: function() {\n\n    var model_fits_id = \"#hyphy-model-fits\",\n        omega_plots_id = \"#hyphy-omega-plots\",\n        summary_id = \"#hyphy-relax-summary\",\n        tree_id = \"#tree-tab\";\n\n    var tree_settings = {\n        'omegaPlot': {},\n        'tree-options': {\n            /* value arrays have the following meaning\n                [0] - the value of the attribute\n                [1] - does the change in attribute value trigger tree re-layout?\n            */\n            'hyphy-tree-model': [\"Partitioned MG94xREV\", true],\n            'hyphy-tree-highlight': [\"RELAX.test\", false],\n            'hyphy-tree-branch-lengths': [true, true],\n            'hyphy-tree-hide-legend': [true, false],\n            'hyphy-tree-fill-color': [true, false]\n        },\n        'suppress-tree-render': false,\n        'chart-append-html' : true,\n        'edgeColorizer' : this.props.edgeColorizer\n    };\n\n    return { \n              annotations : null,\n              json : null,\n              pmid : null,\n              settings : tree_settings,\n              test_results : null,\n              tree : null,\n              p : null,\n              direction : 'unknown',\n              evidence : 'unknown',\n              pvalue : null,\n              lrt : null,\n              summary_k : 'unknown',\n              pmid_text : \"PubMed ID : Unknown\",\n              pmid_href : \"#\",\n              relaxation_K : \"unknown\"\n           };\n\n  },\n\n  componentWillMount: function() {\n    this.loadFromServer();\n    this.setEvents();\n  },\n\n  setEvents : function() {\n\n    var self = this;\n\n    $(\"#datamonkey-relax-load-json\").on(\"change\", function(e) {\n        var files = e.target.files; // FileList object\n\n        if (files.length == 1) {\n            var f = files[0];\n            var reader = new FileReader();\n\n            reader.onload = (function(theFile) {\n              return function(e) {\n\n                var data = JSON.parse(this.result);\n                data[\"fits\"][\"Partitioned MG94xREV\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Partitioned MG94xREV\");\n                data[\"fits\"][\"General Descriptive\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"General Descriptive\");\n                data[\"fits\"][\"Null\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Null\");\n                data[\"fits\"][\"Alternative\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Alternative\");\n                data[\"fits\"][\"Partitioned Exploratory\"][\"branch-annotations\"] = self.formatBranchAnnotations(data, \"Partitioned Exploratory\");\n\n                var annotations = data[\"fits\"][\"Partitioned MG94xREV\"][\"branch-annotations\"],\n                    json = data,\n                    pmid = data[\"PMID\"],\n                    test_results = data[\"relaxation_test\"];\n\n                var p = data[\"relaxation-test\"][\"p\"],\n                    direction = data[\"fits\"][\"Alternative\"][\"K\"] > 1 ? 'intensification' : 'relaxation',\n                    evidence = p <= self.props.alpha_level ? 'significant' : 'not significant',\n                    pvalue = self.p_value_format(p),\n                    lrt = self.fit_format(data[\"relaxation-test\"][\"LR\"]),\n                    summary_k = self.fit_format(data[\"fits\"][\"Alternative\"][\"K\"]),\n                    pmid_text = \"PubMed ID \" + pmid,\n                    pmid_href = \"http://www.ncbi.nlm.nih.gov/pubmed/\" + pmid;\n\n\n                self.setState({\n                                annotations : annotations,\n                                json : json,\n                                pmid : pmid,\n                                test_results : test_results,\n                                p : p,\n                                direction : direction,\n                                evidence : evidence,\n                                pvalue : pvalue,\n                                lrt : lrt,\n                                summary_k : summary_k,\n                                pmid_text : pmid_text,\n                                pmid_href : pmid_href\n                              });\n              }\n\n            })(f);\n            reader.readAsText(f);\n        }\n\n        $(\"#datamonkey-absrel-toggle-here\").dropdown(\"toggle\");\n        e.preventDefault();\n    });\n\n\n  },\n\n  formatBranchAnnotations : function(json, key) {\n\n    var initial_branch_annotations = json[\"fits\"][key][\"branch-annotations\"];\n\n    if(!initial_branch_annotations) {\n      initial_branch_annotations = json[\"fits\"][key][\"rate distributions\"];\n    }\n\n    // Iterate over objects\n    var branch_annotations = _.mapObject(initial_branch_annotations, function(val, key) {\n      return {\"length\" : val};\n    });\n\n    return branch_annotations;\n\n  },\n\n  initialize : function() {},\n\n  render: function() {\n\n    var self = this;\n\n    return (\n      <div className=\"tab-content\">\n         <div className=\"tab-pane active\" id=\"datamonkey-relax-summary-tab\">\n             <div id=\"hyphy-relax-summary\" className=\"row\">\n              <div className=\"col-md-12\">\n                  <ul className=\"list-group\">\n                      <li className=\"list-group-item list-group-item-info\">\n                          <h3 className=\"list-group-item-heading\">\n                            <i className=\"fa fa-list\" styleFormat='margin-right: 10px'></i>\n                            <span id='summary-method-name'>RELAX(ed selection test)</span> summary\n                          </h3>\n                          <p className=\"list-group-item-text lead\" styleFormat=\"margin-top:0.5em; \">\n                            Test for selection <strong id='summary-direction'>{this.state.direction}</strong> \n                            (<abbr title=\"Relaxation coefficient\">K</abbr> = <strong id='summary-K'>{this.state.summary_k}</strong>) was <strong id='summary-evidence'>{this.state.evidence}</strong> \n                            (p = <strong id='summary-pvalue'>{this.state.p}</strong>, <abbr title=\"Likelihood ratio statistic\">LR</abbr> = <strong id='summary-LRT'>{this.state.lrt}</strong>)\n                          </p>\n                          <p>\n                            <small>Please cite <a href={this.state.pmid_href} id='summary-pmid'>{this.state.pmid_text}</a> if you use this result in a publication, presentation, or other scientific work.</small>\n                          </p>\n                      </li>\n                  </ul>\n                </div>\n             </div>\n             <div id=\"hyphy-model-fits\" className=\"row\">\n               <ModelFits json={self.state.json} />\n             </div>\n             <div id=\"hyphy-omega-plots\" className=\"row\">\n               <OmegaPlotGrid json={self.state.json} />\n             </div>\n         </div>\n         <div className='tab-pane' id=\"tree-tab\">\n           <Tree json={self.state.json} \n                 settings={self.state.settings} />\n         </div>\n      </div>\n    )\n  }\n});\n\n\n// Will need to make a call to this\n// omega distributions\nfunction render_relax(url, element) {\n  ReactDOM.render(\n    <RELAX url={url} />,\n    document.getElementById(element)\n  );\n}\n\n\nmodule.exports = render_relax;\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/relax.jsx","var React = require('react');\nvar datamonkey = require('../../datamonkey/datamonkey.js');\nvar _ = require('underscore');\n\nvar OmegaPlot = React.createClass({\n\n  getDefaultProps : function() {\n    return {\n      svg_id : null,\n      dimensions : { width : 600, height : 400 },\n      margins : { 'left': 50, 'right': 15, 'bottom': 35, 'top': 35 },\n      has_zeros : false,\n      legend_id : null,\n      do_log_plot : true,\n      k_p : null,\n      plot : null,\n    };\n\n  },\n\n  setEvents : function() {\n    var self = this;\n\n    d3.select(\"#\" + this.save_svg_id).on('click', function(e) {\n      datamonkey.save_image(\"svg\", \"#\" + self.svg_id);\n    });\n\n    d3.select(\"#\" + this.save_png_id).on('click', function(e) {\n      datamonkey.save_image(\"png\", \"#\" + self.svg_id);\n    });\n  },\n\n  initialize : function() {\n\n    if(!this.state.omegas || !this.state.omegas[\"Reference\"]) {\n      return;\n    }\n\n    var data_to_plot = this.state.omegas[\"Reference\"];\n    var secondary_data = this.state.omegas[\"Test\"];\n\n    // Set props from settings\n    this.svg_id = this.props.settings.svg_id;\n    this.dimensions = this.props.settings.dimensions || this.props.dimensions;\n    this.legend_id = this.props.settings.legend || this.props.legend_id;\n    this.do_log_plot = this.props.settings.log || this.props.do_log_plot;\n    this.k_p = this.props.settings.k || this.props.k_p;\n\n    var dimensions = this.props.dimensions;\n    var margins = this.props.margins;\n\n    this.margins = margins;\n\n    if (this.do_log_plot) {\n      this.has_zeros = data_to_plot.some(function(d) {return d.omega <= 0;});\n      if (secondary_data) {\n        this.has_zeros = this.has_zeros || data_to_plot.some(function(d) {return d.omega <= 0;});\n      }\n    }\n\n    this.plot_width = dimensions[\"width\"] - margins['left'] - margins['right'],\n    this.plot_height = dimensions[\"height\"] - margins['top'] - margins['bottom'];\n\n    var domain = this.state.settings[\"domain\"] || d3.extent(secondary_data ? secondary_data.map(function(d) {\n        return d.omega;\n    }).concat(data_to_plot.map(function(d) {\n        return d.omega;\n    })) : data_to_plot.map(function(d) {\n        return d.omega;\n    }));\n\n    domain[0] *= 0.5;\n\n    this.omega_scale = (this.do_log_plot ? (this.has_zeros ? d3.scale.pow().exponent (0.2) : d3.scale.log()) : d3.scale.linear())\n        .range([0, this.plot_width]).domain(domain).nice();\n\n    this.proportion_scale = d3.scale.linear().range([this.plot_height, 0]).domain([-0.05, 1]).clamp(true);\n\n    // compute margins -- circle AREA is proportional to the relative weight\n    // maximum diameter is (height - text margin)\n    this.svg = d3.select(\"#\" + this.svg_id).attr(\"width\", dimensions.width).attr(\"height\", dimensions.height);\n    this.plot = this.svg.selectAll(\".container\");\n\n    this.svg.selectAll(\"defs\").remove();\n    this.svg.append(\"defs\").append(\"marker\")\n        .attr(\"id\", \"arrowhead\")\n        .attr(\"refX\", 10) /*must be smarter way to calculate shift*/\n        .attr(\"refY\", 4)\n        .attr(\"markerWidth\", 10)\n        .attr(\"markerHeight\", 8)\n        .attr(\"orient\", \"auto\")\n        .attr(\"stroke\", \"#000\")\n        .attr(\"fill\", \"#000\")\n        .append(\"path\")\n        .attr(\"d\", \"M 0,0 V8 L10,4 Z\");\n\n    if (this.plot.empty()) {\n      this.plot = this.svg.append(\"g\").attr(\"class\", \"container\");\n    }\n\n    this.plot.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \" , \" + this.margins[\"top\"] + \")\");\n    this.reference_omega_lines = this.plot.selectAll(\".hyphy-omega-line-reference\"),\n    this.displacement_lines = this.plot.selectAll(\".hyphy-displacement-line\");\n\n    this.createDisplacementLine();\n    this.createNeutralLine();\n    this.createOmegaLine();\n    this.createReferenceLine();\n    this.createXAxis();\n    this.createYAxis();\n    this.setEvents();\n\n  },\n  makeSpring : function(x1, x2, y1, y2, step, displacement) {\n\n    if (x1 == x2) {\n        y1 = Math.min(y1, y2);\n        return \"M\" + x1 + \",\" + (y1 - 40) + \"v20\";\n    }\n\n    var spring_data = [],\n        point = [x1, y1],\n        angle = Math.atan2(y2 - y1, x2 - x1);\n\n    var step = [step * Math.cos(angle), step * Math.sin(angle)];\n    var k = 0;\n\n    if (Math.abs(x1 - x2) < 15) {\n        spring_data.push(point);\n    } else {\n        while (x1 < x2 && point[0] < x2 - 15 || x1 > x2 && point[0] > x2 + 15) {\n            point = point.map(function(d, i) {\n                return d + step[i];\n            });\n            if (k % 2) {\n                spring_data.push([point[0], point[1] + displacement]);\n            } else {\n                spring_data.push([point[0], point[1] - displacement]);\n            }\n            k++;\n            if (k > 100) {\n                break;\n            }\n        }\n    }\n\n    if (spring_data.length > 1) {\n        spring_data.pop();\n    }\n\n    spring_data.push([x2, y2]);\n    var line = d3.svg.line().interpolate(\"monotone\");\n    return line(spring_data);\n\n  },\n  createDisplacementLine : function() {\n\n    var self = this;\n    var data_to_plot = this.state.omegas[\"Reference\"];\n    var secondary_data = this.state.omegas[\"Test\"];\n\n    if(secondary_data) {\n        var diffs = data_to_plot.map(function(d, i) {\n            return {\n                'x1': d.omega,\n                'x2': secondary_data[i].omega,\n                'y1': d.weight * 0.98,\n                'y2': secondary_data[i].weight * 0.98\n            };\n        });\n\n      this.displacement_lines = this.displacement_lines.data(diffs);\n      this.displacement_lines.enter().append(\"path\");\n      this.displacement_lines.exit().remove();\n      this.displacement_lines.transition().attr(\"d\", function(d) {\n          return self.makeSpring(self.omega_scale(d.x1),\n              self.omega_scale(d.x2),\n              self.proportion_scale(d.y1 * 0.5),\n              self.proportion_scale(d.y2 * 0.5),\n              5,\n              5);\n      }).attr(\"marker-end\", \"url(#arrowhead)\")\n        .attr(\"class\", \"hyphy-displacement-line\");\n    }\n\n  },\n  createReferenceLine : function () {\n\n    var data_to_plot = this.state.omegas[\"Reference\"];\n    var secondary_data = this.state.omegas[\"Test\"];\n    var self = this;\n\n    if(secondary_data) {\n        this.reference_omega_lines = this.reference_omega_lines.data(data_to_plot);\n        this.reference_omega_lines.enter().append(\"line\");\n        this.reference_omega_lines.exit().remove();\n\n        this.reference_omega_lines.transition().attr(\"x1\", function(d) {\n            return self.omega_scale(d.omega);\n        })\n            .attr(\"x2\", function(d) {\n                return self.omega_scale(d.omega);\n            })\n            .attr(\"y1\", function(d) {\n                return self.proportion_scale(-0.05);\n            })\n            .attr(\"y2\", function(d) {\n                return self.proportion_scale(d.weight);\n            })\n            .style(\"stroke\", function(d) {\n                return \"#d62728\";\n            })\n            .attr(\"class\", \"hyphy-omega-line-reference\");\n    } else {\n        this.reference_omega_lines.remove();\n        this.displacement_lines.remove();\n    }\n\n  },\n  createOmegaLine : function() {\n\n    var data_to_plot = this.state.omegas[\"Reference\"];\n    var secondary_data = this.state.omegas[\"Test\"];\n    var self = this;\n\n    // ** Omega Line (Red) ** //\n    var omega_lines = this.plot.selectAll(\".hyphy-omega-line\").data(secondary_data ? secondary_data : data_to_plot);\n    omega_lines.enter().append(\"line\");\n    omega_lines.exit().remove();\n    omega_lines.transition().attr(\"x1\", function(d) {\n        return self.omega_scale(d.omega);\n    })\n        .attr(\"x2\", function(d) {\n            return self.omega_scale(d.omega);\n        })\n        .attr(\"y1\", function(d) {\n            return self.proportion_scale(-0.05);\n        })\n        .attr(\"y2\", function(d) {\n            return self.proportion_scale(d.weight);\n        })\n        .style(\"stroke\", function(d) {\n          return \"#1f77b4\";\n        })\n        .attr(\"class\", \"hyphy-omega-line\");\n  },\n  createNeutralLine : function() {\n    var self = this;\n\n    // ** Neutral Line (Blue) ** //\n    var neutral_line = this.plot.selectAll(\".hyphy-neutral-line\").data([1]);\n    neutral_line.enter().append(\"line\").attr(\"class\", \"hyphy-neutral-line\");\n    neutral_line.exit().remove();\n    neutral_line.transition().attr(\"x1\", function(d) {\n        return self.omega_scale(d);\n    }).attr(\"x2\", function(d) {\n          return self.omega_scale(d);\n      })\n      .attr(\"y1\", 0)\n      .attr(\"y2\", this.plot_height);\n\n  },\n  createXAxis : function() {\n\n    // *** X-AXIS *** //\n    var xAxis = d3.svg.axis()\n        .scale(this.omega_scale)\n        .orient(\"bottom\");\n\n    if (this.do_log_plot) {\n        xAxis.ticks(10, this.has_zeros ? \".2r\" : \".1r\");\n    }\n\n    var x_axis = this.svg.selectAll(\".x.axis\");\n    var x_label;\n\n    if (x_axis.empty()) {\n        x_axis = this.svg.append(\"g\")\n            .attr(\"class\", \"x hyphy-axis\");\n\n        x_label = x_axis.append(\"g\").attr(\"class\", \"hyphy-axis-label x-label\");\n    } else {\n        x_label = x_axis.select(\".axis-label.x-label\");\n    }\n\n    x_axis.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \",\" + (this.plot_height + this.margins[\"top\"]) + \")\")\n        .call(xAxis);\n    x_label = x_label.attr(\"transform\", \"translate(\" + this.plot_width + \",\" + this.margins[\"bottom\"] + \")\")\n        .selectAll(\"text\").data([\"\\u03C9\"]);\n    x_label.enter().append(\"text\");\n    x_label.text(function(d) {\n        return d\n    }).style(\"text-anchor\", \"end\")\n      .attr(\"dy\", \"0.0em\");\n\n  },\n  createYAxis : function() {\n\n    // *** Y-AXIS *** //\n    var yAxis = d3.svg.axis()\n        .scale(this.proportion_scale)\n        .orient(\"left\")\n        .ticks(10, \".1p\");\n\n    var y_axis = this.svg.selectAll(\".y.hyphy-axis\");\n    var y_label;\n\n    if (y_axis.empty()) {\n        y_axis = this.svg.append(\"g\")\n            .attr(\"class\", \"y hyphy-axis\");\n        y_label = y_axis.append(\"g\").attr(\"class\", \"hyphy-axis-label y-label\");\n    } else {\n        y_label = y_axis.select(\".hyphy-axis-label.y-label\");\n    }\n    y_axis.attr(\"transform\", \"translate(\" + this.margins[\"left\"] + \",\" + this.margins[\"top\"] + \")\")\n        .call(yAxis);\n    y_label = y_label.attr(\"transform\", \"translate(\" + (-this.margins[\"left\"]) + \",\" + 0 + \")\")\n        .selectAll(\"text\").data([\"Proportion of sites\"]);\n    y_label.enter().append(\"text\");\n    y_label.text(function(d) {\n        return d\n    }).style(\"text-anchor\", \"start\")\n      .attr(\"dy\", \"-1em\")\n\n  },\n\n  getInitialState: function() {\n    return { \n              omegas : this.props.omegas,\n              settings : this.props.settings\n           };\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n\n    this.setState({\n             omegas : nextProps.omegas \n           });\n  },\n\n  componentDidUpdate : function() {\n    this.initialize();\n  },\n\n  componentDidMount: function() {\n    this.initialize();\n  },\n\n  render: function() {\n\n    var key = this.props.omegas.key,\n        label = this.props.omegas.label;\n\n    this.svg_id = key + \"-svg\";\n    this.save_svg_id = \"export-\" + key + \"-svg\";\n    this.save_png_id = \"export-\" + key + \"-png\";\n    \n\n    return (\n      <div className=\"col-lg-6\">\n          <div className=\"panel panel-default\" id={ key }>\n              <div className=\"panel-heading\">\n                  <h3 className=\"panel-title\">&omega; distributions under the <strong>{ label }</strong> model</h3>\n                  <p>\n                      <small>Test branches are shown in <span className=\"hyphy-blue\">blue</span> and reference branches are shown in <span className=\"hyphy-red\">red</span></small>\n                  </p>\n                  <div className=\"btn-group\">\n                      <button id={ this.save_svg_id } type=\"button\" className=\"btn btn-default btn-sm\">\n                          <span className=\"glyphicon glyphicon-floppy-save\"></span> SVG\n                      </button>\n                      <button id={ this.save_png_id } type=\"button\" className=\"btn btn-default btn-sm\">\n                          <span className=\"glyphicon glyphicon-floppy-save\"></span> PNG\n                      </button>\n                  </div>\n              </div>\n              <div className=\"panel-body\">\n                  <svg id ={ this.svg_id } />\n              </div>\n          </div>\n      </div>\n    );\n  }\n});\n\nvar OmegaPlotGrid = React.createClass({\n\n  getInitialState: function() {\n    return { omega_distributions: this.getDistributions(this.props.json) };\n  },\n\n  componentWillReceiveProps : function(nextProps) {\n\n    this.setState({ \n      omega_distributions: this.getDistributions(nextProps.json) \n    });\n\n  },\n\n  getDistributions : function(json) {\n\n    var omega_distributions = {};\n\n    if(!json) {\n      return [];\n    }\n\n    for (var m in json[\"fits\"]) {\n        var this_model = json[\"fits\"][m];\n        omega_distributions[m] = {};\n        var distributions = [];\n        for (var d in this_model[\"rate-distributions\"]) {\n            var this_distro = this_model[\"rate-distributions\"][d];\n            var this_distro_entry = [d, \"\", \"\", \"\"];\n            omega_distributions[m][d] = this_distro.map(function(d) {\n                return {\n                    'omega': d[0],\n                    'weight': d[1]\n                };\n            });\n        }\n    }\n\n    _.each(omega_distributions, function(item,key) { \n      item.key   = key.toLowerCase().replace(/ /g, '-'); \n      item.label = key; \n    });\n\n    var omega_distributions = _.filter(omega_distributions, function(item) {\n      return _.isObject(item[\"Reference\"]);\n    });\n\n    return omega_distributions;\n  },\n\n  render: function() {\n\n    var OmegaPlots = _.map(this.state.omega_distributions, function(item, key) {\n\n      var model_name = key;\n      var omegas = item;\n\n      var settings = {\n        svg_id : omegas.key + '-svg',\n        dimensions : { width : 600, height : 400 },\n        margins : { 'left': 50, 'right': 15, 'bottom': 35, 'top': 35 },\n        has_zeros : false,\n        legend_id : null,\n        do_log_plot : true,\n        k_p : null,\n        plot : null\n      };\n\n      return (\n        <OmegaPlot name={model_name} omegas={omegas} settings={settings} />\n      )\n\n    });\n\n    return (\n    <div>\n      {OmegaPlots}\n    </div>\n    );\n  }\n\n});\n\n\nmodule.exports.OmegaPlot = OmegaPlot;\nmodule.exports.OmegaPlotGrid = OmegaPlotGrid;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/components/omega_plots.jsx","var React = require('react'),\n    ReactDOM = require('react-dom'),\n    _ = require('underscore');\n\nimport {DatamonkeyPartitionTable, DatamonkeyModelTable, DatamonkeyTimersTable} from \"./components/shared_summary.jsx\";\nimport {SLACSites} from \"./components/slac_sites.jsx\";\nimport {SLACBanner} from \"./components/slac_summary.jsx\";\n\nvar datamonkey = require('../datamonkey/datamonkey.js');\nrequire('../datamonkey/helpers.js');\n\nvar SLAC = React.createClass({\n\n  float_format : d3.format(\".2f\"),\n\n  dm_loadFromServer : function() {\n  /* 20160721 SLKP: prefixing all custom (i.e. not defined by REACT) with dm_\n     to make it easier to recognize scoping immediately */\n\n    var self = this;\n\n    d3.json(self.props.url, function(request_error, data) {\n\n        if (!data) {\n            var error_message_text = request_error.status == 404 ? self.props.url + \" could not be loaded\" : request_error.statusText;\n            self.setState ({error_message: error_message_text});\n        } else {\n            self.dm_initializeFromJSON (data);\n        }\n    });\n\n  },\n\n\n  dm_initializeFromJSON: function (data) {\n      this.setState ({ analysis_results : data});\n  },\n\n  getDefaultProps: function() {\n    /* default properties for the component */\n\n    return {\n        url : \"#\"\n    };\n\n  },\n\n  getInitialState: function() {\n\n    return {\n              analysis_results : null,\n              error_message: null,\n              pValue : 0.1,\n           };\n\n  },\n\n  componentWillMount: function() {\n    this.dm_loadFromServer();\n    this.dm_setEvents();\n  },\n\n  dm_setEvents : function() {\n\n    var self = this;\n\n    $(\"#datamonkey-json-file\").on(\"change\", function(e) {\n\n        var files = e.target.files; // FileList object\n\n        if (files.length == 1) {\n            var f = files[0];\n            var reader = new FileReader();\n\n\n\n            reader.onload = (function(theFile) {\n                return function(e) {\n                  try {\n                    self.dm_initializeFromJSON (JSON.parse(this.result));\n                  }\n                  catch (error) {\n                    self.setState ({error_message : error.toString()});\n                  }\n                }\n            })(f);\n\n            reader.readAsText(f);\n        }\n\n        $(\"#datamonkey-json-file-toggle\").dropdown(\"toggle\");\n    });\n\n\n  },\n\n  dm_adjustPvalue : function (event) {\n    this.setState ({pValue: parseFloat(event.target.value)});\n  },\n\n  render: function() {\n\n    var self = this;\n\n    if (self.state.error_message) {\n        return (\n            <div id='datamonkey-error' className=\"alert alert-danger alert-dismissible\" role=\"alert\">\n                <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n                <strong>{self.state.error_message}</strong> <span id='datamonkey-error-text'></span>\n            </div>\n        );\n    }\n\n    if (self.state.analysis_results) {\n\n        return (\n           <div className=\"tab-content\">\n                <div className=\"tab-pane\" id=\"summary_tab\">\n\n                    <div className=\"row\">\n                        <div id=\"summary-div\" className=\"col-md-12\">\n                            <SLACBanner analysis_results={self.state.analysis_results} pValue={self.state.pValue} pAdjuster={_.bind (self.dm_adjustPvalue, self)}/>\n                        </div>\n                    </div>\n\n                    <div className=\"row hidden-print\">\n                        <div id=\"datamonkey-slac-tree-summary\" className=\"col-lg-4 col-md-6 col-sm-12\">\n                             <div className = \"panel panel-default\">\n                                <div className=\"panel-heading\">\n                                    <h3 className=\"panel-title\">\n                                        <i className=\"fa fa-puzzle-piece\"></i> Partition information\n                                     </h3>\n                                </div>\n                                <div className=\"panel-body\">\n                                    <small>\n                                        <DatamonkeyPartitionTable\n                                            pValue={self.state.pValue}\n                                            trees={self.state.analysis_results.trees}\n                                            partitions={self.state.analysis_results.partitions}\n                                            branchAttributes={self.state.analysis_results['branch attributes']}\n                                            siteResults={self.state.analysis_results.MLE}\n                                            accessorPositive={function (json, partition) {return _.map (json[\"content\"][partition][\"by-site\"][\"AVERAGED\"], function (v) {return v[8];});}}\n                                            accessorNegative={function (json, partition) {return _.map (json[\"content\"][partition][\"by-site\"][\"AVERAGED\"], function (v) {return v[9];});}}\n                                        />\n                                    </small>\n                                </div>\n                            </div>\n                       </div>\n                        <div id=\"datamonkey-slac-model-fits\" className=\"col-lg-5 col-md-6 col-sm-12\">\n                             <div className = \"panel panel-default\">\n                                <div className=\"panel-heading\">\n                                    <h3 className=\"panel-title\">\n                                        <i className=\"fa fa-table\"></i> Model fits\n                                     </h3>\n                                </div>\n                                <div className=\"panel-body\">\n                                    <small>\n                                        {<DatamonkeyModelTable fits={self.state.analysis_results.fits}/>}\n                                    </small>\n                                </div>\n                            </div>\n                        </div>\n                        <div id=\"datamonkey-slac-timers\" className=\"col-lg-3 col-md-3 col-sm-12\">\n                             <div className = \"panel panel-default\">\n                                <div className=\"panel-heading\">\n                                    <h3 className=\"panel-title\">\n                                        <i className=\"fa fa-clock-o\"></i> Execution time\n                                     </h3>\n                                </div>\n                                <div className=\"panel-body\">\n                                    <small>\n                                        <DatamonkeyTimersTable timers={self.state.analysis_results.timers} totalTime={\"Total time\"} />\n                                    </small>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n\n                    </div>\n\n                    <div className='tab-pane active' id=\"sites_tab\">\n                        <div className=\"row\">\n                            <div id=\"summary-div\" className=\"col-md-12\">\n                                <SLACSites\n                                    headers={self.state.analysis_results.MLE.headers}\n                                    mle={datamonkey.helpers.map (datamonkey.helpers.filter (self.state.analysis_results.MLE.content, function (value, key) {return _.has (value, \"by-site\");}),\n                                               function (value, key) {return value[\"by-site\"];})}\n                                    sample25={self.state.analysis_results[\"sample-2.5\"]}\n                                    sampleMedian={self.state.analysis_results[\"sample-median\"]}\n                                    sample975={self.state.analysis_results[\"sample-97.5\"]}\n                                    partitionSites={self.state.analysis_results.partitions}\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className='tab-pane' id=\"tree_tab\"></div>\n\n            </div>\n        );\n        }\n    return null;\n  }\n\n});\n\n\n\n// Will need to make a call to this\n// omega distributions\nfunction render_slac(url, element) {\n  ReactDOM.render(\n    <SLAC url={url} />,\n    document.getElementById(element)\n  );\n}\n\n\nmodule.exports = render_slac;\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/slac.jsx","var React = require('react');\nvar datamonkey = require('../../datamonkey/datamonkey.js');\n\nconst DatamonkeyTableRow = React.createClass ({\n/**\n    A single table row\n\n    *rowData* is an array of cells\n        each cell can be one of\n            1. string: simply render the text as shown\n            2. object: a polymorphic case; can be rendered directly (if the object is a valid react.js element)\n               or via a transformation of the value associated with the key 'value'\n\n               supported keys\n                2.1. 'value' : the value to use to generate cell context\n                2.2. 'format' : the function (returning something react.js can render directly) that will be called\n                to transform 'value' into the object to be rendered\n                2.3. 'span' : colSpan attribute\n                2.4. 'style': CSS style attributes (JSX specification, i.e. {margin-top: '1em'} and not a string)\n                2.5. 'classes': CSS classes to apply to the cell\n                2.6. 'abbr': wrap cell value in <abbr> tags\n\n            3. array: directly render array elements in the cell (must be renderable to react.js; note that plain\n            text elements will be wrapped in \"span\" which is not allowed to nest in <th/td>\n\n\n    *header* is a bool indicating whether the header is a header row (th cells) or a regular row (td cells)\n*/\n\n    /*propTypes: {\n     rowData: React.PropTypes.arrayOf (React.PropTypes.oneOfType ([React.PropTypes.string,React.PropTypes.number,React.PropTypes.object,React.PropTypes.array])).isRequired,\n     header:  React.PropTypes.bool,\n    },*/\n\n    dm_compareTwoValues: function (a,b) {\n        /**\n            compare objects by iterating over keys\n        */\n\n        var myType = typeof a,\n            self   = this;\n\n        if (myType == typeof b) {\n            if (myType == \"string\" || myType == \"number\") {\n                    return a == b ? 1 : 0;\n            }\n\n            if (_.isArray (a) && _.isArray (b)) {\n\n                if (a.length != b.length) {\n                    return 0;\n                }\n\n                var not_compared = 0;\n                var result = _.every (a, function (c, i) {var comp = self.dm_compareTwoValues (c, b[i]); if (comp < 0) {not_compared = comp; return false;} return comp == 1;});\n\n                if (not_compared < 0) {\n                    return not_compared;\n                }\n\n                return result ? 1 : 0;\n            }\n\n            return -2;\n        }\n        return -1;\n    },\n\n   dm_log100times: _.before (100, function (v) {\n    console.log (v);\n    return 0;\n   }),\n\n   shouldComponentUpdate: function (nextProps) {\n\n        var self = this;\n\n        if (this.props.header !== nextProps.header) {\n            return true;\n        }\n\n        var result = _.some (this.props.rowData, function (value, index) {\n            /** TO DO\n                check for format and other field equality\n            */\n            if (value === nextProps.rowData[index]) {\n                return false;\n            }\n\n            var compare = self.dm_compareTwoValues (value, nextProps.rowData[index]);\n            if (compare >= 0) {\n                return compare == 0;\n            }\n\n            if (compare == -2) {\n                if (_.has (value, \"value\") && _.has (nextProps.rowData[index], \"value\")) {\n                    return self.dm_compareTwoValues (value.value, nextProps.rowData[index].value) != 1;\n                }\n\n            }\n\n            return true;\n        });\n\n        if (result) {\n            this.dm_log100times ([\"Old\", this.props.rowData, \"New\", nextProps.rowData]);\n        }\n\n        return result;\n    },\n\n\n    render: function () {\n        return (\n            <tr>\n            {\n                this.props.rowData.map (_.bind(function (cell, index) {\n\n                        var value = _.has (cell, \"value\") ? cell.value : cell;\n\n                        if (_.isArray (value)) {\n                            if (!_.has (cell, \"format\")) {\n                                return value;\n                            }\n                        } else {\n                            if (_.isObject (value)) {\n                                if (!React.isValidElement (value)) {\n                                    return null;\n                                }\n                            }\n                        }\n\n                        if (_.has (cell, \"format\")) {\n                            value = cell.format (value);\n                        }\n\n\n                        if (_.has (cell, \"abbr\")) {\n                            value = (\n                                <abbr title={cell.abbr}>{value}</abbr>\n                            );\n                        }\n\n                        var cellProps = {key: index};\n\n                        if (_.has (cell, \"span\")) {\n                            cellProps[\"colSpan\"] = cell.span;\n                        }\n\n                        if (_.has (cell, \"style\")) {\n                            cellProps[\"style\"] = cell.style;\n                        }\n\n                        if (_.has (cell, \"classes\")) {\n                            cellProps[\"className\"] = cell.classes;\n                        }\n\n\n                        return React.createElement (this.props.header ? \"th\" : \"td\" ,\n                                                    cellProps,\n                                                    value);\n\n\n                    },this))\n            }\n            </tr>\n        );\n    }\n});\n\nvar DatamonkeyTable = React.createClass ({\n/**\n    A table composed of rows\n        *headerData* -- an array of cells (see DatamonkeyTableRow) to render as the header\n        *bodyData* -- an array of arrays of cells (rows) to render\n        *classes* -- CSS classes to apply to the table element\n*/\n\n    /*propTypes: {\n        headerData: React.PropTypes.array,\n        bodyData: React.PropTypes.arrayOf (React.PropTypes.array),\n    },*/\n\n    getDefaultProps : function () {\n        return {classes : \"table table-condensed table-hover\",\n                rowHash : null,\n                sortableColumns : new Object (null),\n                initialSort: null,\n                };\n    },\n\n    getInitialState: function () {\n        return {sortedOn: this.props.initialSort};\n    },\n\n\n    render: function () {\n        const children = [];\n\n        if (this.props.headerData) {\n            if (_.isArray (this.props.headerData[0])) { // multiple rows\n                 children.push ((\n                    <thead key = {0}>\n                        {\n                            _.map (this.props.headerData, function (row, index) {\n                                return (\n                                    <DatamonkeyTableRow rowData={row} header={true} key={index}/>\n                                );\n                            })\n                        }\n                    </thead>\n                ));\n            }\n            else {\n                children.push ((\n                    <thead key = {0}>\n                        <DatamonkeyTableRow rowData={this.props.headerData} header={true}/>\n                    </thead>\n                ));\n            }\n        }\n\n        children.push (React.createElement (\"tbody\", {key : 1},\n             _.map (this.props.bodyData, _.bind(function (componentData, index) {\n                            return (\n                                <DatamonkeyTableRow rowData={componentData} key={this.props.rowHash ? this.props.rowHash (componentData) : index} header={false}/>\n                            );\n                        }, this))));\n\n\n        return React.createElement (\"table\", {className: this.props.classes}, children);\n    }\n});\n\n\nvar DatamonkeyRateDistributionTable = React.createClass ({\n\n  /** render a rate distribution table from JSON formatted like this\n  {\n       \"non-synonymous/synonymous rate ratio for *background*\":[ // name of distribution\n        [0.1701428265961598, 1] // distribution points (rate, weight)\n        ],\n       \"non-synonymous/synonymous rate ratio for *test*\":[\n        [0.1452686330406915, 1]\n        ]\n  }\n\n  */\n\n  propTypes: {\n    distribution: React.PropTypes.object.isRequired,\n  },\n\n  dm_formatterRate : d3.format (\".3r\"),\n  dm_formatterProp : d3.format (\".3p\"),\n\n  dm_createDistributionTable: function (jsonRates) {\n    var rowData = [];\n    var self = this;\n    _.each (jsonRates, function (value, key) {\n        rowData.push ([{value: key, span: 3, classes: \"info\"}]);\n        _.each (value, function (rate, index) {\n            rowData.push ([{value: rate[1], format: self.dm_formatterProp}, '@', {value: rate[0], format: self.dm_formatterRate}]);\n        })\n    });\n    return rowData;\n  },\n\n  render: function () {\n    return (\n        (<DatamonkeyTable bodyData = {this.dm_createDistributionTable(this.props.distribution)} classes = {\"table table-condensed\"}/>)\n    );\n  },\n\n});\n\nvar DatamonkeyPartitionTable = React.createClass({\n\n   dm_formatterFloat : d3.format (\".3r\"),\n   dm_formatterProp : d3.format (\".3p\"),\n\n   propTypes: {\n        trees: React.PropTypes.object.isRequired,\n        partitions: React.PropTypes.object.isRequired,\n        branchAttributes: React.PropTypes.object.isRequired,\n        siteResults: React.PropTypes.object.isRequired,\n        accessorNegative: React.PropTypes.func.isRequired,\n        accessorPositive: React.PropTypes.func.isRequired,\n        pValue: React.PropTypes.number.isRequired,\n    },\n\n    dm_computePartitionInformation: function (trees, partitions, attributes, pValue) {\n\n        var partitionKeys = _.sortBy (_.keys (partitions), function (v) {return v;}),\n            matchingKey = null,\n            self = this;\n\n        var extractBranchLength = this.props.extractOn || _.find (attributes.attributes, function (value, key) {matchingKey = key; return value[\"attribute type\"] == \"branch length\";});\n        if (matchingKey) {\n            extractBranchLength = matchingKey;\n        }\n\n        return _.map (partitionKeys, function (key, index) {\n            var treeBranches = trees.tested[key],\n                tested = {};\n\n\n            _.each (treeBranches, function (value, key) { if (value == \"test\") tested[key] = 1;});\n\n            var testedLength = extractBranchLength ? datamonkey.helpers.sum (attributes[key], function (v, k) { if  (tested[k.toUpperCase()]) {return v[extractBranchLength]} return 0;}) : 0;\n            var totalLength =  extractBranchLength ? datamonkey.helpers.sum (attributes[key], function (v) { return v[extractBranchLength] || 0;}) : 0; // || 0 is to resolve root node missing length\n\n\n            return _.map ([index+1, // 1-based partition index\n                    partitions[key].coverage[0].length, // number of sites in the partition\n                    _.size(tested), // tested branches\n                    _.keys (treeBranches).length, // total branches\n                    testedLength,\n                    testedLength / totalLength,\n                    totalLength,\n                    _.filter (self.props.accessorPositive (self.props.siteResults, key), function (p) {return p <= pValue;}).length,\n                    _.filter (self.props.accessorNegative (self.props.siteResults, key), function (p) {return p <= pValue;}).length,\n\n                   ], function (cell, index) {\n                        if (index > 1) {\n                            var attributedCell = {value : cell,\n                                                  style : {textAlign: 'center'}};\n\n                            if (index == 4 || index == 6) {\n                                _.extend (attributedCell, {'format': self.dm_formatterFloat});\n                            }\n                            if (index == 5) {\n                                _.extend (attributedCell, {'format': self.dm_formatterProp});\n                            }\n\n                            return attributedCell;\n                        }\n                        return cell;\n                   });\n        });\n\n    },\n\n    dm_makeHeaderRow : function (pValue) {\n        return [\n                    _.map([\"Partition\", \"Sites\", \"Branches\", \"Branch Length\", \"Selected at p\" + String.fromCharCode(parseInt(\"2264\",16)) + pValue], function (d,i) {\n                        return _.extend ({value:d, style: {borderBottom: 0, textAlign: (i>1 ? 'center' : 'left')}}, i>1 ? {'span' : i == 3 ? 3 : 2} : {});\n                    }),\n                    _.map (\n                        [\"\", \"\", \"Tested\", \"Total\", \"Tested\", \"% of total\", \"Total\", \"Positive\", \"Negative\"], function (d,i) {\n                            return {value: d, style: {borderTop : 0, textAlign: (i>1 ? 'center' : 'left')}};\n                        })\n               ];\n    },\n\n    getInitialState: function() {\n        return {\n            header: this.dm_makeHeaderRow (this.props.pValue),\n            rows: this.dm_computePartitionInformation (this.props.trees, this.props.partitions, this.props.branchAttributes, this.props.pValue),\n        }\n    },\n\n    componentWillReceiveProps: function (nextProps) {\n        this.setState ({\n            header: this.dm_makeHeaderRow (nextProps.pValue),\n            rows: this.dm_computePartitionInformation (nextProps.trees, nextProps.partitions, nextProps.branchAttributes, nextProps.pValue),\n        });\n    },\n\n    render: function() {\n        return (<div className=\"table-responsive\">\n                    <DatamonkeyTable headerData = {this.state.header} bodyData = {this.state.rows}/>\n                </div>);\n    }\n});\n\nvar DatamonkeyModelTable = React.createClass({\n\n  /** render a model fit table from a JSON object with entries like this\n\n\n        \"Global MG94xREV\":{ // model name\n             \"log likelihood\":-5453.527975908821,\n             \"parameters\":131,\n             \"AIC-c\":11172.05569160427,\n             \"rate distributions\":{\n               \"non-synonymous/synonymous rate ratio for *background*\":[\n                [0.1701428265961598, 1]\n                ],\n               \"non-synonymous/synonymous rate ratio for *test*\":[\n                [0.1452686330406915, 1]\n                ]\n              },\n             \"display order\":0\n            }\n\n    dm_supportedColumns controls which keys from model specification will be consumed;\n        * 'value' is the cell specification to be consumed by DatamonkeyTableRow\n        * 'order' is the column order in the resulting table (relative; doesn't have to be sequential)\n        * 'display_format' is a formatting function for cell entries\n        * 'transform' is a data trasformation function for cell entries\n\n  */\n\n  dm_numberFormatter: d3.format (\".2f\"),\n\n  dm_supportedColumns : {'log likelihood' :\n                                {order: 2,\n                                 value: {\"value\" : \"log L\", \"abbr\" : \"log likelihood\" },\n                                 display_format : d3.format (\".2f\")},\n                         'parameters'     :\n                                {order: 3,\n                                 value: \"Parameters\"},\n                         'AIC-c'  :\n                                {order: 1,\n                                 value: {value : React.createElement ('span', null, ['AIC', (<sub key=\"0\">C</sub>)]),\n                                         abbr : \"Small-sample corrected Akaike Information Score\"},\n                                 display_format : d3.format (\".2f\")},\n                         'rate distributions' :\n                                {order: 4,\n                                 value: \"Rate distributions\",\n                                 transform: function (value) {\n                                    return React.createElement (DatamonkeyRateDistributionTable, {distribution:value});\n                                }},\n                         },\n\n\n\n\n  propTypes: {\n    fits: React.PropTypes.object.isRequired,\n  },\n\n  getDefaultProps: function() {\n    return {\n        orderOn : \"display order\",\n    };\n  },\n\n  dm_extractFitsTable : function (jsonTable) {\n     var modelList = [];\n     var columnMap = null;\n     var columnMapIterator = [];\n     var valueFormat = {};\n     var valueTransform = {};\n     var rowData   = [];\n     var self = this;\n\n     _.each (jsonTable, function (value, key) {\n        if (!columnMap) {\n            columnMap = {};\n            _.each (value, function (cellValue, cellName) {\n               if (self.dm_supportedColumns [cellName]) {\n                    columnMap[cellName] = self.dm_supportedColumns [cellName];\n                    columnMapIterator[columnMap[cellName].order] = cellName;\n                    valueFormat [cellName] =  self.dm_supportedColumns [cellName][\"display_format\"];\n                    if (_.isFunction (self.dm_supportedColumns [cellName][\"transform\"])) {\n                        valueTransform [cellName] = self.dm_supportedColumns [cellName][\"transform\"];\n                    }\n               }\n            });\n            columnMapIterator = _.filter (columnMapIterator, function (v) {return v;})\n        }\n\n\n        var thisRow = [{value: key, style: {fontVariant: \"small-caps\" }}];\n\n        _.each (columnMapIterator, function (tag) {\n\n            var myValue = valueTransform [tag] ?  valueTransform [tag] (value[tag]) : value [tag];\n\n\n            if (valueFormat[tag]) {\n                thisRow.push ({'value' : myValue, 'format' : valueFormat[tag]});\n            } else {\n                thisRow.push(myValue);\n            }\n        });\n\n        rowData.push ([thisRow, _.isNumber (value [self.props.orderOn]) ? value [self.props.orderOn] : rowData.length]);\n\n       });\n\n\n\n       return {'data' : _.map (_.sortBy (rowData, function (value) { return value[1]; }), function (r) {return r[0];}),\n               'columns' : _.map (columnMapIterator, function (tag) {\n        return columnMap[tag].value;\n     }) };\n  },\n\n  dm_makeHeaderRow : function (columnMap) {\n    var headerRow = ['Model'];\n    _.each(columnMap, function (v) {headerRow.push(v);});\n    return headerRow;\n  },\n\n  getInitialState: function () {\n\n    var tableInfo = this.dm_extractFitsTable (this.props.fits);\n\n    return {\n                header:     this.dm_makeHeaderRow     (tableInfo.columns),\n                rows:       tableInfo.data,\n                caption:    null,\n           };\n  },\n\n\n  render: function() {\n        return (<div className=\"table-responsive\">\n                    <DatamonkeyTable headerData = {this.state.header} bodyData = {this.state.rows}/>\n                </div>);\n  },\n});\n\nvar DatamonkeyTimersTable = React.createClass({\n\n  dm_percentageFormatter: d3.format (\".2%\"),\n\n  propTypes: {\n    timers: React.PropTypes.object.isRequired,\n  },\n\n  dm_formatSeconds: function (seconds) {\n\n    var fields = [ ~~ (seconds / 3600),\n                ~~ ( (seconds % 3600) / 60),\n                seconds % 60];\n\n\n    return _.map (fields, function (d) { return d < 10 ? \"0\" + d : \"\" + d}).join (':') ;\n  },\n\n  dm_extractTimerTable : function (jsonTable) {\n     var totalTime = 0.,\n        formattedRows = _.map (jsonTable, _.bind ( function (value, key) {\n        if (this.props.totalTime) {\n            if (key == this.props.totalTime) {\n                totalTime = value['timer'];\n            }\n        } else {\n            totalTime += value['timer'];\n        }\n        return [key, value['timer'], value['order']];\n     }, this));\n\n\n     formattedRows = _.sortBy (formattedRows, function (row) {\n        return row[2];\n     });\n\n     formattedRows = _.map (formattedRows, _.bind (function (row) {\n        var fraction = null;\n        if (this.props.totalTime === null || this.props.totalTime != row[0]) {\n            row[2] = {\"value\" : row[1]/totalTime, \"format\": this.dm_percentageFormatter};\n        } else {\n            row[2] = \"\";\n        }\n        row[1] = this.dm_formatSeconds (row[1]);\n        return row;\n     }, this));\n\n     return formattedRows;\n  },\n\n  dm_makeHeaderRow : function () {\n    return ['Task', 'Time', '%'];\n  },\n\n  getInitialState: function () {\n\n    return {\n                header:     this.dm_makeHeaderRow (),\n                rows:       this.dm_extractTimerTable (this.props.timers),\n                caption:    null,\n           };\n  },\n\n\n  render: function() {\n        return (\n            <DatamonkeyTable headerData = {this.state.header} bodyData = {this.state.rows}/>\n\n        );\n  },\n});\n\n\nmodule.exports.DatamonkeyTable = DatamonkeyTable;\nmodule.exports.DatamonkeyTableRow = DatamonkeyTableRow;\nmodule.exports.DatamonkeyRateDistributionTable = DatamonkeyRateDistributionTable;\nmodule.exports.DatamonkeyPartitionTable = DatamonkeyPartitionTable;\nmodule.exports.DatamonkeyModelTable = DatamonkeyModelTable;\nmodule.exports.DatamonkeyTimersTable = DatamonkeyTimersTable;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/components/shared_summary.jsx","var React = require('react');\nvar datamonkey = require('../../datamonkey/datamonkey.js');\n\nimport {DatamonkeyTable} from \"./shared_summary.jsx\";\n\nvar SLACSites = React.createClass({\n    propTypes: {\n     headers: React.PropTypes.arrayOf (React.PropTypes.arrayOf (React.PropTypes.string)).isRequired,\n     mle  : React.PropTypes.object.isRequired,\n     sample25 : React.PropTypes.object,\n     sampleMedian: React.PropTypes.object,\n     sample975: React.PropTypes.object,\n     initialAmbigHandling: React.PropTypes.string.isRequired,\n     partitionSites: React.PropTypes.object.isRequired,\n    },\n\n\n\n  getInitialState: function() {\n    var canDoCI = this.props.sample25 && this.props.sampleMedian && this.props.sample975;\n\n    return {\n\n                ambigOptions: this.dm_AmbigOptions (this.props),\n                ambigHandling: this.props.initialAmbigHandling,\n                filters: new Object (null),\n                showIntervals: canDoCI,\n                hasCI : canDoCI,\n           };\n  },\n\n  getDefaultProps: function() {\n\n    return {\n                sample25: null,\n                sampleMedian: null,\n                sample975: null,\n                initialAmbigHandling: \"RESOLVED\",\n           };\n  },\n\n\n\n  componentWillReceiveProps: function(nextProps) {\n        this.setState (\n           {\n\n                ambigOptions: this.dm_AmbigOptions (nextProps),\n                ambigHandling: nextProps.initialAmbigHandling,\n           }\n        );\n  },\n\n  dm_formatNumber: d3.format (\".3r\"),\n  dm_formatNumberShort: d3.format (\".2r\"),\n\n  dm_log10times: _.before (10, function (v) {\n    console.log (v);\n    return 0;\n  }),\n\n  dm_formatInterval: function (values) {\n    //this.dm_log10times (values);\n\n    return this.dm_formatNumber (values[0]) + \" / \" + this.dm_formatNumber (values[2]) +\n                \" [\"  + this.dm_formatNumber (values[1])  +\n                \" : \" + this.dm_formatNumber (values[3]) + \"]\";\n  },\n\n  dm_AmbigOptions: function (theseProps) {\n    return _.keys (theseProps.mle[0]);\n  },\n\n\n  dm_changeAmbig : function (event) {\n\n    this.setState ({\n                        ambigHandling : event.target.value,\n                   });\n  },\n\n  dm_toggleIntervals : function (event) {\n     this.setState ({\n                        showIntervals : !this.state.showIntervals,\n                   });\n  },\n\n  dm_toggleVariableFilter: function (event) {\n\n    var filterState = new Object (null);\n    _.extend (filterState,  this.state.filters);\n    filterState [\"variable\"] = (this.state.filters[\"variable\"] == \"on\") ? \"off\" : \"on\";\n    this.setState ({filters: filterState});\n\n  },\n\n  dm_makeFilterFunction: function () {\n\n    var filterFunction = null;\n\n    _.each (this.state.filters, function (value, key) {\n        var composeFunction = null;\n\n        switch (key) {\n            case \"variable\" : {\n                if (value == \"on\") {\n                    composeFunction = function (f, partitionIndex, index, site, siteData) {\n                        return (!f || f (partitionIndex, index, site, siteData)) && (siteData[2] + siteData[3] > 0);\n                    }\n                }\n                break;\n            }\n        }\n\n        if (composeFunction) {\n         filterFunction = _.wrap (filterFunction, composeFunction);\n        }\n    });\n\n     return filterFunction;\n  },\n\n  dm_makeHeaderRow : function () {\n\n        var headers = ['Partition', 'Site'],\n            doCI = this.state.showIntervals;\n\n        if (doCI) {\n            var secondRow = ['',''];\n\n            _.each (this.props.headers, function (value) {\n                headers.push ({value : value[0], abbr: value[1], span: 4, style: {textAlign: 'center'}});\n                secondRow.push ('MLE');\n                secondRow.push ('Med');\n                secondRow.push ('2.5%');\n                secondRow.push ('97.5%');\n            });\n            return [headers, secondRow];\n\n       } else {\n\n            _.each (this.props.headers, function (value) {\n                headers.push ({value : value[0], abbr: value[1]});\n            });\n\n        }\n        return headers;\n  },\n\n  dm_makeDataRows: function (filter) {\n\n    var rows           = [],\n        partitionCount = datamonkey.helpers.countPartitionsJSON (this.props.partitionSites),\n        partitionIndex = 0,\n        self = this,\n        doCI = this.state.showIntervals;\n\n    while (partitionIndex < partitionCount) {\n\n        _.each (self.props.partitionSites [partitionIndex].coverage[0], function (site, index) {\n            var siteData = self.props.mle[partitionIndex][self.state.ambigHandling][index];\n            if (!filter || filter (partitionIndex, index, site, siteData)) {\n                var thisRow   = [partitionIndex+1, site+1];\n                    //secondRow = doCI ? ['',''] : null;\n\n                _.each (siteData, function (estimate, colIndex) {\n\n                    if (doCI) {\n                        thisRow.push ({value : estimate, format : self.dm_formatNumber});\n                        thisRow.push ({value : self.props.sample25[partitionIndex][self.state.ambigHandling][index][colIndex], format : self.dm_formatNumberShort});\n                        thisRow.push ({value : self.props.sampleMedian[partitionIndex][self.state.ambigHandling][index][colIndex], format : self.dm_formatNumberShort});\n                        thisRow.push ({value : self.props.sample975[partitionIndex][self.state.ambigHandling][index][colIndex], format : self.dm_formatNumberShort});\n\n                        /*thisRow.push ({value: [estimate, self.props.sample25[partitionIndex][self.state.ambigHandling][index][colIndex],\n                                                         self.props.sampleMedian[partitionIndex][self.state.ambigHandling][index][colIndex],\n                                                         self.props.sample975[partitionIndex][self.state.ambigHandling][index][colIndex]],\n                                       format: self.dm_formatInterval,\n\n                                       }); */\n                    } else {\n                        thisRow.push ({value : estimate, format : self.dm_formatNumber});\n                    }\n                });\n                rows.push (thisRow);\n                //if (secondRow) {\n                //    rows.push (secondRow);\n                //}\n            }\n        });\n\n        partitionIndex ++;\n    }\n\n    return rows;\n  },\n\n  render: function() {\n\n        var self = this;\n\n\n        var result = (\n\n                <div className=\"table-responsive\">\n                    <form className=\"form-inline navbar-form navbar-left\">\n                      <div className=\"form-group\">\n\n                      <div className=\"btn-group\">\n                          <button className=\"btn btn-default btn-sm dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            Display Options <span className=\"caret\"></span>\n                          </button>\n                          <ul className=\"dropdown-menu\">\n                            <li key = \"variable\">\n                                <div className = \"checkbox\">\n                                    <input type=\"checkbox\" checked = {self.state.filters[\"variable\"] == \"on\" ? true : false} defaultChecked = {self.state.filters[\"variable\"] == \"on\" ? true : false} onChange={self.dm_toggleVariableFilter}/> Variable sites only\n                                </div>\n                            </li>\n                            {self.state.hasCI ? (\n                            <li key = \"intervals\">\n                                <div className = \"checkbox\">\n                                    <input type=\"checkbox\" checked = {self.state.showIntervals} defaultChecked = {self.state.showIntervals} onChange={self.dm_toggleIntervals}/> Show sampling confidence intervals\n                                </div>\n                            </li>) : null}\n                          </ul>\n                        </div>\n\n\n                        <div className=\"input-group\">\n                          <div className=\"input-group-addon\">Ambiguities are </div>\n                          <select className=\"form-control input-sm\" defaultValue={self.state.ambigHandling} onChange={self.dm_changeAmbig}>\n                                {\n                                    _.map (this.state.ambigOptions, function (value, index) {\n                                        return (\n                                            <option key={index} value={value}>{value}</option>\n                                        );\n                                    })\n                                }\n                          </select>\n                        </div>\n                      </div>\n                    </form>\n\n                    <DatamonkeyTable headerData = {this.dm_makeHeaderRow()} bodyData = {this.dm_makeDataRows (this.dm_makeFilterFunction())}/>\n                </div>);\n\n\n        return result;\n\n\n  }\n});\n\nmodule.exports.SLACSites = SLACSites;\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/components/slac_sites.jsx","\nvar React = require('react');\nvar datamonkey = require('../../datamonkey/datamonkey.js');\n\nvar SLACBanner = React.createClass({\n\n  dm_countSites : function (json, cutoff) {\n\n    var result = { all : 0,\n                   positive: 0,\n                   negative : 0};\n\n    result.all       = datamonkey.helpers.countSitesFromPartitionsJSON (json);\n\n    result.positive = datamonkey.helpers.sum (\n                            json[\"MLE\"][\"content\"],\n                            function (partition) {\n                                return _.reduce (partition[\"by-site\"][\"RESOLVED\"], function (sum, row)\n                                    {return sum + (row[8] <= cutoff ? 1 : 0);}, 0);\n                            }\n                       );\n\n    result.negative = datamonkey.helpers.sum (\n                            json[\"MLE\"][\"content\"],\n                            function (partition) {\n                                return _.reduce (partition[\"by-site\"][\"RESOLVED\"], function (sum, row)\n                                    {return sum + (row[9] <= cutoff ? 1 : 0);}, 0);\n                            }\n                       );\n\n    return result;\n  },\n\n\n  dm_computeState: function (state, pvalue) {\n    return {\n              sites: this.dm_countSites (state, pvalue),\n           }\n  },\n\n  dm_formatP: d3.format (\".3f\"),\n\n  getInitialState: function() {\n    return this.dm_computeState (this.props.analysis_results, this.props.pValue);\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    this.setState(this.dm_computeState (nextProps.analysis_results, nextProps.pValue));\n  },\n\n  render: function() {\n\n        return (\n              <div className=\"panel panel-primary\">\n                  <div className=\"panel-heading\">\n                      <h3 className=\"panel-title\">\n                        <abbr title = \"Single Likelihood Ancestor Counting\">SLAC</abbr> analysis summary\n                      </h3>\n                  </div>\n                  <div className=\"panel-body\">\n                      <span className=\"lead\">\n                          Evidence<sup>&dagger;</sup> of pervasive <span className = 'hyphy-red'>diversifying</span> / <span className = 'hyphy-navy'>purifying</span> selection was found at\n                          <strong className = 'hyphy-red'> {this.state.sites.positive}</strong> / <strong className = 'hyphy-navy'>{this.state.sites.negative}</strong> sites\n                          among {this.state.sites.all} tested sites\n\n                      </span>\n                      <div style={{marginBottom: '0em'}}>\n                        <small>\n                          <sup>&dagger;</sup>Extended binomial test, p &le; {this.dm_formatP(this.props.pValue)}\n                          <div className = \"dropdown hidden-print\" style={{display: 'inline', marginLeft: '0.25em'}}>\n                            <button id = 'dm.pvalue.slider' type=\"button\" className=\"btn btn-primary btn-xs dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            <span className=\"caret\"></span></button>\n                            <ul className=\"dropdown-menu\" aria-labelledby='dm.pvalue.slider'>\n                              <li><a href=\"#\"><input type=\"range\" min=\"0\" max=\"1\" value={this.props.pValue} step=\"0.01\" onChange = {this.props.pAdjuster}/></a></li>\n                            </ul>\n                           </div>\n                          <emph> not</emph> corrected for multiple testing; ambiguous characters resolved to minimize substitution counts.<br/>\n                          <i className=\"fa fa-exclamation-circle\"></i> Please cite <a href=\"http://www.ncbi.nlm.nih.gov/pubmed/15703242\" target=\"_blank\">PMID 15703242</a> if you use this result in a publication, presentation, or other scientific work.\n                        </small>\n                      </div>\n                  </div>\n              </div>\n            );\n\n  }\n});\n\nmodule.exports.SLACBanner = SLACBanner;\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx/components/slac_summary.jsx","var datamonkey = require(\"./datamonkey.js\");\n\nfunction datamonkey_get_styles(doc) {\n  var styles = \"\",\n      styleSheets = doc.styleSheets;\n\n  if (styleSheets) {\n    for (var i = 0; i < styleSheets.length; i++) {\n      processStyleSheet(styleSheets[i]);\n    }\n  }\n\n  function processStyleSheet(ss) {\n    if (ss.cssRules) {\n      for (var i = 0; i < ss.cssRules.length; i++) {\n        var rule = ss.cssRules[i];\n        if (rule.type === 3) {\n          // Import Rule\n          processStyleSheet(rule.styleSheet);\n        } else {\n          // hack for illustrator crashing on descendent selectors\n          if (rule.selectorText) {\n            if (rule.selectorText.indexOf(\">\") === -1) {\n              styles += \"\\n\" + rule.cssText;\n            }\n          }\n        }\n      }\n    }\n  }\n  return styles;\n}\n\n\nfunction datamonkey_save_newick_to_file() {\n  var top_modal_container = \"#neighbor-tree-modal\";\n  var nwk = $(top_modal_container).data(\"tree\");\n  var pom = document.createElement('a');\n  pom.setAttribute('href', 'data:text/octet-stream;charset=utf-8,' + encodeURIComponent(nwk));\n  pom.setAttribute('download', 'nwk.txt');\n  $(\"body\").append(pom);\n  pom.click();\n  pom.remove();\n}\n\nfunction datamonkey_convert_svg_to_png(image_string) {\n  var image = document.getElementById(\"image\");\n  image.src = image_string;\n\n  image.onload = function() {\n    var canvas = document.getElementById(\"canvas\");\n    canvas.width = image.width;\n    canvas.height = image.height;\n    var context = canvas.getContext(\"2d\");\n    context.fillStyle = \"#FFFFFF\";\n    context.fillRect(0,0,image.width,image.height);\n    context.drawImage(image, 0, 0);\n    var img = canvas.toDataURL(\"image/png\");\n\n    var pom = document.createElement('a');\n    pom.setAttribute('download', 'phylotree.png');\n    pom.href = canvas.toDataURL(\"image/png\");\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n}\n\nfunction datamonkey_save_newick_tree(type) {\n\n  var prefix = {\n    xmlns: \"http://www.w3.org/2000/xmlns/\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    svg: \"http://www.w3.org/2000/svg\"\n  }\n\n  var tree_container = \"#tree_container\";\n  var svg = $(\"#tree_container\").find(\"svg\")[0];\n  var styles = datamonkey_get_styles(window.document);\n\n  svg.setAttribute(\"version\", \"1.1\");\n\n  var defsEl = document.createElement(\"defs\");\n  svg.insertBefore(defsEl, svg.firstChild);\n\n  var styleEl = document.createElement(\"style\");\n  defsEl.appendChild(styleEl);\n  styleEl.setAttribute(\"type\", \"text/css\");\n\n\n  // removing attributes so they aren't doubled up\n  svg.removeAttribute(\"xmlns\");\n  svg.removeAttribute(\"xlink\");\n\n  // These are needed for the svg\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns\", prefix.svg);\n  }\n\n  if (!svg.hasAttributeNS(prefix.xmlns, \"xmlns:xlink\")) {\n    svg.setAttributeNS(prefix.xmlns, \"xmlns:xlink\", prefix.xlink);\n  }\n\n  var source = (new XMLSerializer()).serializeToString(svg).replace('</style>', '<![CDATA[' + styles + ']]></style>');\n  var rect = svg.getBoundingClientRect();\n  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n  var to_download = [doctype + source]\n  var image_string = 'data:image/svg+xml;base66,' + encodeURIComponent(to_download);\n\n  if(type == \"png\") {\n    datamonkey_convert_svg_to_png(image_string)\n  } else {\n    var pom = document.createElement('a');\n    pom.setAttribute('download', 'phylotree.svg');\n    pom.setAttribute('href', image_string);\n    $(\"body\").append(pom);\n    pom.click();\n    pom.remove();\n  }\n\n}\n\nfunction datamonkey_validate_email(email) {\n  if($(this).find(\"input[name='receive_mail']\")[0].checked) {\n    var regex = /^([a-zA-Z0-9_.+-])+\\@(([a-zA-Z0-9-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n    if(regex.test($(this).find(\"input[name='mail']\").val())) {\n       // Give them green. They like that.\n      $(this).removeClass('has-error');\n      $(this).addClass('has-success');\n      $(this).next('.help-block').remove();\n    } else {\n      $(this).next('.help-block').remove();\n      $(this).removeClass('has-error');\n      $(this).removeClass('has-success');\n      $(this).addClass('has-error');\n      var span = jQuery('<span/>', {\n            class: 'help-block col-lg-9 pull-right',\n            text : 'Invalid Email'\n        }).insertAfter($(this));\n    }\n  } else {\n    $(this).removeClass('has-error');\n    $(this).removeClass('has-success');\n    $(this).next('.help-block').remove();\n  }\n\n}\n\nfunction datamonkey_describe_vector (vector, as_list) {\n\n    vector.sort (d3.ascending);\n\n    var d = {'min' : d3.min (vector),\n             'max' : d3.max (vector),\n             'median' : d3.median (vector),\n             'Q1' : d3.quantile (vector, 0.25),\n             'Q3' : d3.quantile (vector, 0.75),\n             'mean': d3.mean (vector)};\n\n    if (as_list) {\n\n        d = \"<pre>Range  :\" + d['min'] + \"-\" + d['max'] + \"\\n\"\n            +    \"IQR    :\" + d['Q1'] + \"-\" + d['Q3'] + \"\\n\"\n            +    \"Mean   :\" + d['mean'] + \"\\n\"\n            +    \"Median :\" + d['median'] + \"\\n\"\n            + \"</pre>\";\n\n        /*d =\n        \"<dl class = 'dl-horizontal'>\" +\n        \"<dt>Range</dt><dd>\" + d['min'] + \"-\" + d['max'] + \"</dd>\" +\n        \"<dt>IQR</dt><dd>\" + d['Q1'] + \"-\" + d['Q3'] +  \"</dd>\" +\n        \"<dt>Mean</dt><dd>\" + d['mean'] +  \"</dd>\" +\n        \"<dt>Median</dt><dd>\" + d['median'] + \"</dd></dl>\";*/\n    }\n\n    return d;\n\n}\n\nfunction datamonkey_export_handler (data, filename, mimeType) {\n\n  function msieversion() {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./)) {\n      return true;\n    }\n    return false;\n  }\n\n  if(msieversion()) {\n    var IEwindow = window.open();\n    IEwindow.document.write(data);\n    IEwindow.document.close();\n    IEwindow.document.execCommand('SaveAs', true, filename + \".csv\");\n    IEwindow.close();\n  } else {\n    var pom = document.createElement('a');\n    pom.setAttribute('href', 'data:' + (mimeType || 'text/plain')  +  ';charset=utf-8,' + encodeURIComponent(data));\n    pom.setAttribute('download', filename || \"download.tsv\");\n    pom.click();\n    pom.remove();\n  }\n\n}\n\n\nfunction datamonkey_table_to_text (table_id, sep) {\n    sep = sep || \"\\t\";\n    var header_row = [];\n    d3.select (table_id + \" thead\").selectAll (\"th\").each (function () {header_row.push (d3.select(this).text())});\n    var data_rows = [];\n    d3.select (table_id + \" tbody\").selectAll (\"tr\").each (function (d,i) {data_rows.push ([]); d3.select (this).selectAll (\"td\").each (function () {data_rows[i].push (d3.select(this).text())})});\n\n    return header_row.join (sep) + \"\\n\" +\n           data_rows.map (function (d) {return d.join (sep);}).join (\"\\n\");\n}\n\nfunction datamonkey_capitalize(s) {\n  if(s.length > 0) {\n    return s[0].toUpperCase() + s.slice(1);\n  } else {\n    return s;\n  }\n}\n\nfunction datamonkey_count_partitions (json) {\n    try {\n      return _.keys (json).length;\n    } catch (e) {\n        // ignore errors\n    }\n    return 0;\n}\n\nfunction datamonkey_sum (object, accessor) {\n    accessor = accessor || function (value) {return value;};\n    return _.reduce (object, function (sum, value, index) {return sum + accessor (value, index);},0);\n}\n\nfunction datamonkey_count_sites_from_partitions (json) {\n    try {\n        return datamonkey_sum (json [\"partitions\"], function (value) {return value[\"coverage\"][0].length;});\n    } catch (e) {\n        // ignore errors\n    }\n    return 0;\n}\n\nfunction datamonkey_filter_list (list, predicate, context) {\n    var result = {};\n    predicate = _.bind (predicate, context);\n    _.each (list, _.bind(function (value, key) {\n        if (predicate (value, key)) {\n            result[key] = value;\n        }\n      }, context)\n    );\n    return result;\n}\n\nfunction datamonkey_map_list (list, transform, context) {\n    var result = {};\n    transform = _.bind (transform, context);\n   _.each (list, _.bind(function (value, key) {\n        result[key] = transform(value,key);\n      }, context)\n    );\n    return result;\n}\n\ndatamonkey.helpers = new Object;\ndatamonkey.helpers.save_newick_to_file = datamonkey_save_newick_to_file;\ndatamonkey.helpers.convert_svg_to_png = datamonkey_convert_svg_to_png;\ndatamonkey.helpers.save_newick_tree = datamonkey_save_newick_tree;\ndatamonkey.helpers.validate_email = datamonkey_validate_email;\ndatamonkey.helpers.describe_vector = datamonkey_describe_vector;\ndatamonkey.helpers.table_to_text = datamonkey_table_to_text;\ndatamonkey.helpers.export_handler = datamonkey_export_handler;\ndatamonkey.helpers.capitalize = datamonkey_capitalize;\ndatamonkey.helpers.countPartitionsJSON = datamonkey_count_partitions;\ndatamonkey.helpers.countSitesFromPartitionsJSON = datamonkey_count_sites_from_partitions;\ndatamonkey.helpers.sum = datamonkey_sum;\ndatamonkey.helpers.filter=datamonkey_filter_list;\ndatamonkey.helpers.map=datamonkey_map_list;\n\n\n\n// WEBPACK FOOTER //\n// ./src/datamonkey/helpers.js"],"sourceRoot":""}